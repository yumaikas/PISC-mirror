/* Parsing CSV data in PISC */

: parse-csv-core ( reader -- vec [ vec ] ) 
	:reader
	<vector> :results
	f :inString
	f :lastCharWasQuote
	[ $inString not ] :outOfString

	/* Set up the temporary variables */
	[ "" :tempStr ] :resetCell
	[ resetCell <vector> :tempVec ] dup call :resetLine

	[ $tempVec $tempStr vec-append :tempVec resetCell ] :addCell
	[ $results $tempVec vec-append :results resetLine ] :addLine

	[ $reader -$EOF call not nip ] :notEOF
	[ $reader -$read-rune call nip ] :readRune

	[ notEOF ] [ 
		/* By default, append a char */
		t :default
		[ f :default ] :break

		readRune
		dup "," str-eq outOfString and [ addCell break ] when
		dup "\n" str-eq outOfString and [ addCell addLine break ] when
		dup "\"" str-eq [
			$lastCharWasQuote 
				[ f :lastCharWasQuote [ "\"" concat ] $:tempStr break ]
				[ t :lastCharWasQuote outOfString :inString break ] 
			if
		 ] when
		$default [ [ swap concat ] $:tempStr ] [ drop ] if
	] while 
	/* Add the straggling items */
	addCell addLine 
	$results ; 

: csv-of-file ( filepath -- vec [ vec ] ) open-file-reader parse-csv-core ;
: csv-of-string ( string -- vec [ vec ] ) str>rune-reader parse-csv-core ;