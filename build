#! /data/data/com.termux/files/usr/bin/bash
# /bin/bash

set -uo pipefail
export PISCDIR="$(pwd)"

function older_than() {
  local target="$1"
  shift
  if [ ! -e "$target" ]
  then
    echo "updating $target" >&2
    return 0  # success
  fi
  local f
  for f in "$@"
  do
    if [ "$f" -nt "$target" ]
    then
      echo "updating $target" >&2
      return 0  # success
    fi
  done
  return 1  # failure
}

cd "$PISCDIR"

function generate {
	echo "Generating..." >&2
	older_than bindata.go stdlib/*.pisc && {
        # TODO: Put in a go get command for go-bindata
		echo "Generating bindata" >&2 
		go-bindata -pkg pisc stdlib/...
	}
}

function webbuild {
	older_than ./cmd/playground/playground.js *.go stdlib/*.pisc && {
		cd "./cmd/playground"
        # TODO: Put in a go get command for gopherjs
		gopherjs build -m
		cd ../..
	} 
}

function upload {
	generate
	webbuild
	cd ./cmd/playground
	# Note: This command won't work w/o a password for the scp
	scp *.css *.js *.html yumaikas@junglecoder.com:/var/www/pisc-static/playground
	cd ../..
}

function interpinstall {
	generate 
	cd "./cmd/pisc"
    go get
	echo "Installing new PISC interpreter"
	go install 
	cd "../.."
}

function testpisc {
	interpinstall
	pisc -f tests/all.pisc
}

case "$1" in 
"generate")
	generate
	;;
"install")
	interpinstall
	;;
"web")
	webbuild
	;;
"upload")
	upload
	;;
"test")
	testpisc
	;;
esac

cat <<EONOTE
TODO: Definitely consider switching fmt.Println to pass through priv_puts in as *many* places as make sense.
TODO: Consider using crit-bit trees for dictionaries
TODO: Now that something close to a save-game has been implemented for final-frontier, start implementing the initial states and such
TODO: Implement an interactive tutorial in the 'in Y minutes' style. 
TODO: consider packing the scripts under scripts/ for general use, possibly with a switch for unpacking them
EONOTE

exit 0
