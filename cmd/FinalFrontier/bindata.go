// Code generated by go-bindata.
// sources:
// scripts/backstory.txt
// scripts/intro.pisc
// scripts/lib.pisc
// scripts/main.pisc
// scripts/map.pisc
// scripts/markets.pisc
// scripts/ships.pisc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBackstoryTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x92\x51\x6e\xdc\x30\x0c\x44\xaf\x32\x07\xd8\x2c\xd0\x8f\x1e\x21\x1f\xfd\x28\x10\xa0\xb9\x00\x2d\x8f\x2d\x62\x65\x49\x15\xe9\x75\x7c\xfb\x42\xca\x6e\x1b\xf4\xd3\x30\xc5\x79\x9c\x99\xd7\x8f\x9a\x4a\x63\x33\x48\x23\x78\x67\x46\x2e\x07\x36\xa9\x55\xf3\x8a\xb2\x3b\x3c\x12\x77\x69\x5a\x76\x43\x92\x4c\x43\x59\x60\x49\xab\x55\x09\xbc\xe2\x67\x31\x47\x65\xa9\x89\x30\x72\x83\x17\x4c\x44\x28\xd9\x99\xbd\x7f\x99\xcb\x89\x92\xc7\xa6\xda\x57\x78\x5f\xe1\x91\xda\x30\x69\xf3\x78\x81\x18\xa6\xe2\x11\xb6\x4f\x63\x2d\x24\xcf\xff\x44\x06\x9c\x37\x4a\x88\x6c\x9d\xa3\x26\x09\xb4\x2b\xde\xb4\x89\xd3\x2e\x58\x1a\x75\x8d\xce\x66\x97\xcf\xa7\xdb\xbe\xae\x69\xdc\x95\xf4\x46\xdc\x95\x58\x4a\xc3\x22\xee\x34\xbf\xe0\xf7\xae\xe1\x46\x73\x4c\x7b\xb8\x5d\xf1\x36\xb0\xa4\x9d\x58\x12\xe9\x86\xad\x98\xa7\x13\xb5\x15\x67\xf0\x07\x6c\x2c\x5b\x57\x7d\x8f\x6c\xc4\x6e\x9c\x1f\xb7\x0a\xec\x34\xe7\xf6\x72\xa8\x11\xdc\xaa\xb6\xce\x5c\xf6\x3c\xe3\x57\x49\x17\x4c\xbb\x23\x95\x55\xcd\x35\x18\x36\xb9\xd1\x20\x58\x25\xc9\xc7\xf9\x72\xe8\x4c\x94\x4c\x64\x4a\x7b\xd1\xad\x16\x33\x9d\x12\xaf\x78\xed\x79\xe8\x32\x06\x83\x6b\x40\xdb\x13\x71\x88\xe1\x39\x73\x19\xa6\x52\x5a\x3a\xbf\xd8\xa5\xd9\x5c\x26\x4d\xea\x4a\x83\xd5\x46\x99\x9f\x11\x2d\xd2\x86\x43\x43\xd5\x63\x2b\xfb\x1a\x7b\xcc\x8f\x34\xdf\xa3\x1a\x16\x09\xbe\xb7\x7e\x5e\x24\xac\x04\xa5\x9f\x48\x5c\x1c\x13\xa3\xe6\xf9\x8a\x1f\x3d\xd8\x72\xc3\xcc\x20\x33\x6d\x78\x2b\x5f\x08\xe6\xa6\x77\x3e\xdc\xe9\x2c\x89\x60\xee\x52\x63\x72\x2b\xbd\x6c\x1f\x95\x4d\x37\x66\x97\xd4\xcd\x1c\x4b\xfb\x6d\x25\xa7\x13\x87\x7a\x1c\xf2\xb2\xf6\x22\x76\xe2\x99\xe2\xf1\xb3\x39\xc5\x88\x23\x96\x3e\x95\x69\xf6\x24\xfd\x2b\xbf\xb4\x71\x41\x7f\xe9\x51\xfc\xbf\xbf\x41\xb6\x27\x9b\x84\xc0\xea\x9c\x7b\x01\x05\x1b\x25\x8f\x7a\x7b\x93\x3b\xd3\x48\x1a\x49\xcc\xf1\xed\x3b\x4e\x4a\x33\x44\xb9\x13\x16\xcb\x91\x71\x94\x3c\x8f\x36\x7a\xd4\xbc\xda\xf5\x4f\x00\x00\x00\xff\xff\x94\x12\x47\x4d\x4c\x03\x00\x00")

func scriptsBackstoryTxtBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBackstoryTxt,
		"scripts/backstory.txt",
	)
}

func scriptsBackstoryTxt() (*asset, error) {
	bytes, err := scriptsBackstoryTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/backstory.txt", size: 844, mode: os.FileMode(438), modTime: time.Unix(1502345282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsIntroPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x41\x6b\xc3\x46\x10\x85\xcf\x16\xe8\x3f\x3c\x4c\x20\x09\xc8\xae\x2f\xbd\xb8\x87\x50\x0a\x81\x42\x6f\x09\x94\x60\x7c\x18\x4b\x23\xed\xe0\xf5\xac\xba\x3b\x92\xa2\x7f\x5f\x56\x8a\x49\x28\x14\x9f\xbc\x33\x9a\xf9\xde\x7b\xbb\x65\x71\x84\xa8\xc5\x80\x27\x74\x74\x63\xec\x76\x50\xfe\x34\x3c\x97\xc5\x31\x1f\x94\xc5\x1f\x7f\xbd\x95\x45\x59\x6c\xdf\x7a\xaa\xb9\x82\x39\xc6\xab\x28\x79\xbc\xc6\xa0\x26\x1c\x73\xf5\xdd\x31\x92\x51\x4c\x70\x34\x32\x2e\x5c\x5f\x83\x72\x83\x39\x0c\x15\x78\x64\xc5\xe4\x58\xf3\x5f\x4c\x1c\x19\x97\xc1\x40\x98\x98\x51\x3b\xf1\xcd\xbe\x2c\xfe\xb4\xc7\x04\x42\x94\x74\x9d\xe1\xa5\xe5\x0a\x29\x6f\x6c\x29\x8a\x76\x15\x26\x47\x86\x49\xcc\xa1\x97\x48\xc6\xa9\x42\xba\x0d\x5d\xe7\x39\xa6\x0a\xa4\x0d\x7a\x4f\xca\x46\x71\x46\x1f\xbc\xd4\x5c\x16\xa2\x20\xd4\x41\x93\x91\x1a\x92\xc5\xa5\xbf\x82\x06\x83\x05\xdc\x58\x4d\x82\x82\x92\x71\x94\xd0\xa4\x0a\x4a\xa3\x74\xb4\x9c\x36\xd2\xb6\x52\x0f\xde\xe6\x75\x7c\x16\x3e\x98\x65\xbd\x63\x90\x06\xa1\x5d\x01\xf7\xf8\x08\xc3\xe3\xc8\xe8\x23\xf7\x14\xb9\x41\x1b\x22\xcc\x49\x42\x43\xf3\x52\x8d\x88\x4c\x8d\x68\x07\x93\x1b\x63\xa2\x84\x86\x1b\xa9\xc9\xb8\xc9\x20\xb5\xa3\x68\xa9\x2c\xf2\x9a\xe4\xa4\x47\xe8\x39\x2e\x14\x55\xb6\x2c\xe6\x45\x91\xd7\x8f\x2d\xc0\x22\x89\xe6\x69\xa2\x48\x72\x1b\x3c\x59\xb8\x9b\xb0\xb6\xd3\x28\xda\xa5\xb2\x58\xc2\xa0\x5b\x18\xf4\x6b\xd3\xc3\xaf\x87\xc3\x61\x8f\xbf\xc5\xfb\x25\x0c\xfe\xec\x7d\xc8\xa3\xef\xf9\xbd\xe0\xe9\xe3\x17\x7d\x2e\x8b\x2d\xfa\x28\x6a\x5e\x73\xbc\x07\x1c\xaf\x38\xe1\xe1\x0a\x49\xbb\x59\x5f\x16\x07\xcf\x38\xa1\x63\xbb\xf2\x9c\xab\x67\x4c\x4e\x3c\xe7\xee\xb5\x4d\x5f\x70\x42\x59\x6c\xb6\xef\x2e\x0c\x9d\xab\xd0\x73\x74\xd4\xa7\xef\x5d\xc8\xa2\xb2\x59\xa4\xc1\x1c\xc7\x45\xe0\x1e\xbf\xb7\xc6\x11\xe4\xfd\x72\xd9\x66\x4c\x41\x1f\x0d\x17\x46\x17\xb2\x68\xd2\x79\x72\x1c\xf9\x07\xe0\x66\x22\xb1\x1d\xeb\x12\xce\x66\x73\xca\xfe\x65\x83\x76\x37\xd6\x01\xe7\x85\x8d\xf5\x0e\x36\x67\xb0\x13\x7a\xa9\xaf\xbb\xc5\xed\xef\x86\xdf\x32\xfe\xf1\x47\xe9\xbf\xaf\x22\x0b\x5a\x1e\xc4\x66\xbb\xc4\x1e\xef\x54\x16\xa0\xcc\x0d\x68\x0d\xf0\xc2\x6d\xb6\x35\x5b\x5c\x93\xe6\xc4\x46\xf6\x30\x17\xb3\x15\xeb\xbd\xa9\xe0\xc2\xc4\x23\xc7\x3d\xfe\x57\xca\x09\xff\x0c\x62\xbb\x85\xe1\xfc\x85\xb7\xfe\xfe\x0d\x00\x00\xff\xff\x1a\x20\xc0\xb9\xb9\x03\x00\x00")

func scriptsIntroPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsIntroPisc,
		"scripts/intro.pisc",
	)
}

func scriptsIntroPisc() (*asset, error) {
	bytes, err := scriptsIntroPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/intro.pisc", size: 953, mode: os.FileMode(438), modTime: time.Unix(1503724306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsLibPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\xcf\x8f\x9a\x40\x14\xc7\xcf\x92\xf0\x3f\xbc\x50\x0f\x9a\xcd\x24\x8a\x6c\x6d\x58\x76\x3d\x6c\xda\x43\x63\xbc\xec\x91\x7a\xc0\x61\x16\xa6\xc0\x8c\x19\x20\x96\x34\xfd\xdf\x9b\xf9\xa1\x0c\x0b\x6e\x62\x22\x6f\xde\xe7\xfd\x98\xef\x57\x0c\x01\xf3\x92\x0b\x84\x79\x4a\x60\x01\xea\x0b\x21\x73\x48\x6a\x0c\x4b\x08\xd5\xe1\xfc\x2f\x7c\x7f\x7b\x05\x2f\xf6\x60\xae\x0e\xbc\xca\x83\x7f\xf0\xe4\x3a\x21\xbc\xee\xdf\x60\x21\xcb\x96\x3d\xe6\xff\x94\xe9\xb3\xa0\xac\xd1\xd0\x61\xaf\x99\xc3\x1e\x96\xe0\xfd\x62\x9e\x39\x1e\x9c\x1f\xf6\xf2\xf3\xe4\x3a\xae\xf3\x05\x7e\x70\x41\x90\xda\xa4\x96\xe4\xa9\x4c\x70\xa1\x59\x52\x63\xa4\xc3\x25\x78\x9b\x95\x67\x5f\x42\x75\x15\x24\xed\x49\x19\x48\x6e\x3d\xe6\x32\x41\x08\xeb\x49\x1d\x4a\xd6\x1f\xb3\x1d\x29\x4b\x7e\xe9\x61\x13\x4b\x7a\x33\xa6\x4f\x65\x4b\xec\x65\x5b\xa2\xc8\x60\x4c\x56\x49\x46\x58\x93\xf4\xf0\xf5\x40\xf2\x8f\x63\x1e\x77\x89\xb5\xb2\x8a\x24\xf9\x75\x4c\x5e\x72\xda\x58\x4b\xe8\x50\xb2\xdb\x8f\xac\x94\xfb\x94\xe0\xc2\x96\x5b\x86\xf7\x34\x0f\x26\x34\x57\x05\x53\xc2\x07\x13\xc2\x2b\xf8\x9e\xfa\xc1\x84\xfa\xaa\xe0\xbe\x05\xc1\x94\x05\xfa\x06\x53\x3e\x04\x13\x3e\x28\xfc\x33\x33\x82\x09\x33\xb4\x68\x93\x8e\x04\x13\x8e\x28\xfc\x9e\x2d\xc1\x84\x2d\x21\xd0\x1a\x11\xd6\x10\xb1\x83\x05\x14\xb2\x66\x07\x4b\x58\x6f\xe0\x59\x77\xa4\x35\x4a\x84\xe0\x97\x41\xda\xf7\x03\x9d\x37\x44\x7b\x1e\xa4\xb7\xbe\x55\x9d\xf2\x0b\x1b\x64\xbf\xad\xac\xac\xa0\x59\xde\x0c\x8b\xb7\x56\xba\x24\xef\x1f\xb2\x8f\x83\xc1\xdd\x70\x6b\x7f\x6d\xd5\x0e\xa7\xae\xd7\xf6\xd8\x6e\x98\x84\xd8\x34\x3b\xea\x27\x26\x9f\x4e\x14\xb8\xb8\xce\xba\x24\xb4\xd1\x3a\x5d\xff\x89\x5c\x67\x16\x43\x46\x9a\x82\x74\x96\x86\xb2\xc1\x51\xbe\x18\x25\x71\x1d\x53\x1b\xb5\x67\xa5\x02\xaa\x08\x6b\x5f\x60\x01\xac\xad\x10\x3f\x37\xb5\x6c\xc4\x4f\xbf\x75\xb3\x90\xb5\x95\xeb\xcc\x56\x10\x56\x88\xa6\x7f\x5c\x67\xd6\x40\x88\x73\xce\x6b\xca\x32\x35\xcc\x75\x66\x33\x33\x30\x2c\x64\x30\x2f\xac\xc9\x31\xbc\xf7\xbc\xda\x81\x30\xe8\x29\x63\xa2\xee\x72\x6b\x93\x52\xa1\xe2\x79\x4a\xc5\xd5\xc8\x18\x10\x52\x2b\x98\x26\x03\x40\xbb\x19\xc3\xc3\xc3\x18\xd1\x27\x01\x54\x3c\xed\x2f\x71\x3b\x5f\x41\x04\x31\x6c\x4c\xc6\x2a\xbc\x3d\x1d\xe5\xfe\x04\xcb\xab\x45\x29\xc5\xcd\x8b\xd6\x78\x6e\x5d\x2a\x8a\x50\xca\x19\xd9\xe9\xc4\xb5\x53\x14\x21\x9c\xf3\x9a\x30\x33\x33\x06\xd5\x47\x67\xce\x82\x63\x54\x90\xce\x2e\x79\x86\xd8\x7e\x55\x8c\x58\x0a\xcf\x69\x96\x97\xf2\x47\xa9\xec\xfb\x1f\x00\x00\xff\xff\x38\xbb\x4e\xe8\xbf\x06\x00\x00")

func scriptsLibPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsLibPisc,
		"scripts/lib.pisc",
	)
}

func scriptsLibPisc() (*asset, error) {
	bytes, err := scriptsLibPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/lib.pisc", size: 1727, mode: os.FileMode(438), modTime: time.Unix(1502343960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsMainPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\x5d\x4f\xf3\x36\x14\xc7\xaf\x13\x29\xdf\xe1\xaf\xac\x17\x0f\xa8\x29\x7b\xbb\x0a\x88\x69\x2a\x65\x43\x2a\xad\x34\xe0\xaa\xf4\xc2\x71\x4e\x1b\xab\x8e\x9d\xd9\x2e\xa5\x42\x68\x5f\x7d\xb2\x93\x92\x8e\x01\xcf\x4d\x5e\x8e\x7f\xe7\x7f\x5e\xfd\x03\xee\x2b\x61\x21\x2c\x56\x42\x31\x89\x95\xd1\xca\x09\x32\x43\x30\xac\x59\x4d\x10\xca\x36\xc2\x50\xc9\x51\xec\x61\x1b\xc6\x69\x08\x67\x58\x49\x3b\xa1\x4a\x3b\x04\x53\x25\x18\xa4\x70\x4e\x12\x0a\xe1\xa0\x57\x90\x4c\x51\x56\x30\x4b\x25\xb8\xae\x0b\xe6\x92\xf8\xec\x34\x89\x6f\xae\x26\xbf\xdf\xe5\xb8\x65\xfb\x82\x7c\xb8\x12\x56\xd7\x84\x1d\xdb\xc3\x69\x08\xe5\x68\x6d\x98\x23\x48\xad\xd6\x70\xa2\x26\x1f\xe8\x89\xa4\x3f\xd2\x70\x15\x81\x6f\xa5\xdb\x1a\xf2\x31\x42\x2a\x2b\x66\xc8\xd8\x24\x3e\x3d\x4b\xe2\x24\x4e\x2d\x37\xa2\x71\xf6\xf1\x51\x8a\x62\xd4\x08\xcb\xd3\x50\x43\xd6\xda\x8f\x81\x9a\x99\x0d\x39\xfb\x35\x24\x94\x33\xfa\x23\x24\x89\x73\xe8\x86\x94\x50\xeb\xac\x26\xb5\xc5\xb7\xb6\x57\x59\x06\x45\xcf\x0e\x27\x49\x1c\xe5\xde\x92\xc4\xd1\xaf\xb8\xd8\x36\x59\xa9\x77\x2a\xa0\x97\xc8\xeb\x24\x8e\x06\x35\xb2\xcb\x4a\xac\x2b\x29\xd6\x95\x43\x7e\x3b\x99\x3d\x24\x31\xa2\x05\x0a\xc6\x37\x59\x21\x19\xdf\x60\x89\x7c\xfc\xe7\xfc\x66\x3c\xf1\x27\xed\x17\x1a\x23\x54\xc8\xc0\xb3\x83\x1a\xa3\x52\x2b\xfa\x0d\xcb\x60\x48\xe2\x28\x1a\x4f\xef\xfc\x6b\x36\x9b\xfa\xd7\xe0\xc5\x3f\x23\xbe\x67\x0a\xe9\x75\x98\xf0\x75\x37\xe1\x14\x1d\x13\x19\x2a\x11\x3e\x52\x20\xc5\x8f\xf0\xc9\x20\x9d\xd1\x0e\x7f\xb0\x9a\x52\x74\xa1\x0f\x78\xa0\x7e\xea\xa8\xa9\x66\xe5\x17\xd8\xcf\x1d\x36\x6f\x9c\xd0\xca\x7e\x0c\xfd\xd2\x41\x7f\x91\xdb\x1a\xe5\x77\xc1\x10\x93\x90\x62\xf5\x7f\xd5\x5d\x25\x1c\x21\x7d\x68\xce\xae\xf4\x2e\xb0\xbc\xd2\xda\xd2\x10\x13\xe5\xc8\x04\x83\x56\x2b\x61\x6a\xa4\xde\xe1\xb5\xef\x58\xe4\xbb\x3e\x6a\x8c\xe6\xd9\x86\xf6\x49\x1c\x2d\xb1\xab\x84\xf4\x43\x7a\x09\xf5\x63\x81\x30\x72\x2c\x0f\xbf\x52\xb3\x32\x0b\xa3\x5d\x76\x16\xdd\x16\xf2\xf6\x4f\xcf\xc2\xf5\xc4\x6b\x18\x09\xaf\xb4\x25\x95\x89\xf2\x19\x4f\xc4\x33\xe6\x90\xc4\xe7\xed\xd6\xf4\x82\xfd\xca\xe0\x04\x61\x59\x30\x9e\xde\x21\xbd\x9f\x5f\xcd\x73\xdc\xd4\x8d\xa4\x9a\x94\x6b\x17\xcf\xbb\xd9\xb4\x2d\x45\x2a\x2c\x90\x22\xc5\x08\x4b\x9c\x7b\x51\xcb\x9e\xe8\xbd\xe8\xf7\x35\xbd\xd7\xe7\x9a\x87\x3a\xbf\xbd\x13\xfb\xe7\x63\xb5\x37\xfe\x53\xc1\xbe\x51\xc7\x49\xf6\xa9\xff\xbd\x3d\x9c\x77\xad\xaa\x99\x50\x5d\xf8\x24\x8e\x2e\x4a\xc1\xdd\xe5\x7f\x6f\x5d\xce\xb7\xc6\x64\xd6\x31\x47\x3d\x71\xb8\x77\x0b\x38\x2c\xb1\xc0\x20\x68\x0e\x7a\x14\x9c\x49\x79\xec\x8b\x7e\x0f\xd6\xe4\xda\xd5\x38\xba\x85\x87\x7a\x7c\x27\xbb\x39\xfa\xd4\xfe\x0d\x00\x00\xff\xff\x27\xc9\xb9\x37\x39\x05\x00\x00")

func scriptsMainPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainPisc,
		"scripts/main.pisc",
	)
}

func scriptsMainPisc() (*asset, error) {
	bytes, err := scriptsMainPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.pisc", size: 1337, mode: os.FileMode(438), modTime: time.Unix(1503724448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsMapPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x5f\x8b\x13\x31\x14\xc5\x9f\x33\x90\xef\x70\xa8\x03\xae\x8b\xb1\xfa\x9a\x95\xfa\x50\x16\x14\xd6\x0a\xca\xe2\x43\xe9\x43\x9a\x5c\x9b\xb0\xf9\x33\x24\xa9\xb3\x20\x7e\x77\x49\xa6\xe2\x22\xfb\x30\x19\x72\xcf\xb9\xe7\xde\xfc\xd6\xd7\x7c\xe0\xc3\x57\x8a\x86\x32\x14\x4e\xca\xab\xea\x34\x82\x9a\xf0\x23\xa7\x00\x4b\x99\x9a\xe3\x7a\xdd\x4e\x89\x52\x55\x16\x4d\xbd\xc2\x49\x05\x82\x10\x88\xf4\x58\xf1\x0a\x7c\x60\x7c\xb8\x69\xae\xee\xb3\x69\x16\x73\xca\xde\xe0\x0a\x93\x57\x91\xea\x33\x0d\xb2\x97\xe4\xa2\xb7\x46\x36\x5e\xbc\x62\x63\xa8\xe8\xec\xa6\xea\x52\xc4\x94\x5d\xac\x3e\xfe\xe7\xf0\x49\xab\x26\x17\x98\xf3\xd4\xbf\x3d\xc4\x26\xb6\xc8\x03\x7e\x92\xee\x7b\x4a\x9f\x74\xe9\x82\x4e\x21\xa8\x68\x9e\x6a\xda\x26\xa7\xa9\xb4\xd4\x6e\xf3\x14\xf1\x0e\x02\xef\xcf\x93\x30\x69\x8e\x22\x50\x3c\x6f\x20\xc3\x32\x39\x40\x6c\xac\x3b\x59\xef\x4e\xb6\x42\x7e\xbe\xdd\xdd\xf3\x01\x6c\x8f\xa3\xd2\x0f\xe2\xe8\x95\x7e\xc0\x01\x72\xfb\xf1\xcb\xa7\xed\xed\x42\x82\xed\x31\x06\xbc\x31\x29\xd2\x07\x1c\xf8\xc0\x5e\xe0\x3b\xbd\xcc\x84\x4c\xe2\x78\x76\xde\xb8\x78\x42\xb5\x84\x36\x09\xa4\xb4\x45\x75\x81\x30\xbb\x6a\xa1\x90\xa9\x54\xd4\x84\xd1\xf5\x28\x3e\x30\xb6\xbd\xfb\xd6\x7f\x7d\xc8\x3f\x32\x8c\xbd\x85\x6c\x2e\x36\xfe\x6a\xe7\x13\x4e\x9d\xc8\x6e\x77\xd7\xcb\x99\xcc\x22\x5f\xb8\x48\xdf\xaf\x6c\x74\x68\xef\xc1\x0a\x58\x61\xf4\xb8\xe4\xff\x6d\x5b\xa0\xb5\xfd\xfa\x75\xb6\xae\x12\x56\xf7\xd3\xba\x61\x6a\x1b\x16\xf2\xa4\xeb\x6b\x50\xac\x94\x5b\x41\xdb\x94\x0a\xad\xb0\x04\xfc\xe6\x03\x3b\x60\xb6\xce\xd3\xc2\xf2\x82\xbe\xd3\xd1\x36\x15\x8a\xc2\x99\xc7\x3e\x45\x55\x3e\xdc\xe0\x4f\x00\x00\x00\xff\xff\xb8\x77\xfd\xe3\x9a\x02\x00\x00")

func scriptsMapPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMapPisc,
		"scripts/map.pisc",
	)
}

func scriptsMapPisc() (*asset, error) {
	bytes, err := scriptsMapPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/map.pisc", size: 666, mode: os.FileMode(438), modTime: time.Unix(1502257010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsMarketsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x31\x6f\xdb\x4e\x0c\xc5\xf7\x03\xee\x3b\x10\xf0\x92\x04\x7f\xc3\x7b\xfe\x43\x01\x2b\x71\x9a\xc1\x68\x50\x17\xcd\x4c\x9f\x18\x1d\x91\xd3\x51\xe0\xf1\xec\xfa\xdb\x17\x27\xbb\x70\x81\x74\xc8\xc2\x41\xd4\xfb\xbd\x27\x3e\x2d\xc0\x3b\xef\x56\x77\x6d\xbe\x46\x34\xe0\x02\x16\x09\x28\x48\x96\xf1\x04\x83\x70\x1e\xc0\x04\xf6\x04\x89\xdf\x09\x38\x83\x45\x2e\x30\xe0\x48\x5f\x9a\x6a\xb1\x80\x35\x16\x0e\xf0\x24\xd2\x97\x99\x83\x46\xea\xdd\x46\xa4\xf7\x6e\x53\x29\x79\xf7\x4d\x69\xb5\x0b\x8a\xd3\x45\xf1\x80\x86\xd0\xe1\x54\x6a\xa2\x59\xf3\xa2\x32\x28\x8e\xc5\xbb\x9f\xdc\x93\x14\xef\x9e\x70\x6c\xab\x2d\x4e\x65\xd5\x45\x54\x2b\x17\xed\x57\xc2\xc3\xe9\xea\xf6\x5d\xf6\xd2\x76\xdb\x9a\xd9\x58\x72\xf1\x6e\x5d\x39\xf5\xcb\x4e\xc9\xc8\xbb\xc7\x7c\x60\x95\x65\x89\x4c\xa9\xe7\x3c\x5c\x28\x1b\xc5\x81\x13\x5d\x39\x3b\x49\xa8\xf0\x82\x99\x52\xf1\xae\x93\x71\xaa\x46\x0a\x5d\xe4\xa9\x78\xf7\x20\xa1\x8e\x94\x9b\xd1\x2e\xd4\x34\x59\xd5\x73\xf0\xbb\x55\x9b\xf7\x50\xa2\x1c\x97\x23\xea\x3b\x19\xdc\xc0\x72\x09\xb7\xf0\xff\x9f\xd3\xbe\x8a\xa6\x1e\x50\x43\x24\x3b\x4d\x67\x5d\x27\x49\xf2\xe9\xde\xbb\xc7\x5f\x93\xa8\x15\xd8\xcf\x47\x1c\x5a\x9c\xff\xe0\xc8\x16\x01\x41\x31\xf7\x32\x42\x88\x98\x03\x81\xbc\x01\xcd\x2f\xb7\x4a\x24\x13\x88\x45\x52\x68\xc8\xb6\x6b\x52\x40\x03\x84\x24\x47\x98\x94\x03\x35\xa3\xad\x64\x2c\xc6\x01\x7e\x50\x88\x59\x82\x62\x68\xb6\xcf\xe3\x3f\x6c\xe9\x92\xa5\x6f\xf5\x84\x4b\x3d\x8d\x7d\x40\x65\xa9\x05\xfe\x8a\xaf\x93\x28\x1a\x17\x83\xe7\xdc\xd7\x62\x9f\x23\xc7\xb9\xbc\xf9\xe1\xfc\xe7\x75\x4a\x67\xc8\x06\xf7\xca\x9f\x84\x7c\xe8\x6e\x4d\x55\x9b\xb4\x7d\xe6\x96\x4c\x3f\x60\xe8\x40\x7a\xb2\xc8\x79\xb8\x52\x26\x39\x92\xae\x38\xbf\xa5\x4a\xed\xbc\x37\x91\xe2\xed\xb9\xd2\xdf\x01\x00\x00\xff\xff\x8c\x0c\x77\x50\x16\x03\x00\x00")

func scriptsMarketsPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMarketsPisc,
		"scripts/markets.pisc",
	)
}

func scriptsMarketsPisc() (*asset, error) {
	bytes, err := scriptsMarketsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/markets.pisc", size: 790, mode: os.FileMode(438), modTime: time.Unix(1502256820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsShipsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x4d\x6f\xdc\x36\x10\x3d\x5b\x80\xfe\xc3\x03\x12\xa0\xb6\xb1\x6b\xc7\x75\x4f\xea\x22\x45\xea\x24\x68\x80\xe4\xd2\x04\xc8\xa1\xe8\x61\x24\x8e\x24\x76\x25\x52\xe5\x50\xbb\x56\x8b\xfe\xf7\x62\x48\x6d\xec\x24\x6d\x81\xc2\x30\x56\x22\xe7\xe3\x71\xe6\xcd\xa3\x9e\xe0\x63\x4f\x11\x56\x10\x7b\xc6\xe8\x0d\x0f\x68\x7d\x80\xf4\x76\x12\x74\xde\xba\x0e\xd1\xa3\xe6\x1f\xca\xa2\x2c\x9e\xe0\x2d\x39\x46\x5c\x26\x16\x34\xe4\x50\x33\x6e\xe0\xdb\xe4\xfc\x1d\x46\xfa\xcd\x87\xbc\x9b\xad\x9f\x61\x8b\x1f\x49\x6c\x53\xe1\x8e\x1c\x1a\x0a\x61\x41\xad\x0b\xfa\xdc\x79\xb5\xb9\xc1\x16\x2f\x29\xd2\x63\x13\x43\x91\x34\xec\x81\x82\xf5\xb3\x60\x6f\x9d\x91\x8d\xa2\x0c\x64\x2c\x45\xeb\x9d\x22\xe4\xc1\xb0\xb9\xc2\x0b\x34\xbe\xd9\x4f\x36\xa2\x27\xc1\x4d\xf6\x96\xc1\x47\xd4\x0b\x0c\xb7\x34\x0f\x51\x33\x7d\x8b\x2d\x7e\x62\x3a\x2c\xff\x82\x66\x03\x1f\xd0\x33\x1d\x2c\x07\x74\xde\x1b\x81\xba\xdd\x62\x8b\xd7\x81\x3a\x3b\x70\x85\x37\x82\x7a\xb6\x43\xc4\xd1\xc6\x1e\xd2\xfb\x66\x0f\xaa\xc5\x87\x5a\x14\x54\xf4\xa0\x61\xf0\x47\xc4\x40\x4e\x26\x1f\xa2\x1e\xa3\xcd\xde\x39\xa6\x56\xa6\xc2\x6e\x20\xc7\xcf\x71\x0e\xb1\x7f\xe4\x82\x62\xbb\x85\x2e\xe2\x02\x65\x71\x56\xa5\xa5\x4a\x77\xcb\xe2\xec\x4f\x3c\x4d\x76\xbf\xa0\xc5\xaf\x88\x76\x64\xc1\x5f\xa8\xd6\x1a\x9e\xed\x8c\x6d\xe2\xf3\xb2\x38\x3b\x7b\x9a\x96\xb0\xdb\x6d\x4f\x7b\x67\x4f\x53\xa4\xdd\x6e\xab\xbf\x65\xf1\xfd\x9a\x5f\x1b\xac\xf9\x1d\x8d\x9c\xf2\x8a\x02\xd0\xd5\x15\x40\x5e\xab\x74\xff\xf3\x14\x79\x63\xb7\xdb\xa6\x87\xb4\x94\x82\xec\x76\xdb\x6c\x9c\x52\x5c\x5f\x96\xc5\x2b\x6a\xfa\x1c\xd2\x9e\xca\xe6\xe7\x54\x91\xd5\xf5\xc1\x40\x3b\x47\x30\xc1\x3b\xc6\xe0\xc9\xa8\x5d\xe3\x5d\x0c\x7e\x18\xd8\x68\x23\x95\x62\x77\xb9\xcf\x65\xf1\x26\x53\xee\xd4\x77\x2b\x30\x2c\x31\xf8\x85\xcd\x06\x8b\x9f\xd1\x29\x22\x2b\xf0\x07\x0e\x57\x28\x8b\x77\x5e\xe2\x4a\x6a\xe3\xdd\x37\x11\x31\x2c\xda\xad\xd5\x0d\xf4\xc0\x21\x7f\xe4\x03\x87\x0d\xca\x62\x0a\xdc\x72\x08\xeb\x0c\x0c\x4c\x07\x4e\xc1\x7b\x1e\xa6\x81\x45\x94\x2f\x0d\x4d\x71\x0e\x69\xfd\x4a\xcf\xfd\x3e\xe5\xd0\xd9\xe8\xd5\xfc\xe6\xfe\x56\x7d\x6f\xef\x6f\x9e\xc1\x3a\x18\x3b\xb2\x53\xfa\xca\x06\xe4\x0c\x5a\x9b\x8e\x97\xc8\x64\x6c\xdb\x72\x60\x17\x21\xdc\xa9\x59\xa2\xca\xdb\x54\x6d\x8d\xd7\x78\x3d\x92\xc3\x6d\xe2\x8c\x80\x04\x47\x1e\x86\x0d\xde\x8f\xa4\x3f\xef\xd8\xd8\x31\x45\x7d\x4b\xa1\xe3\x04\x26\x07\x5a\x07\xf6\xfc\x12\xd6\x19\xdb\x50\x64\x8c\xe4\x0c\x45\x1f\x96\x53\xb2\x8b\x0a\x29\x9d\x6d\x79\x2b\xf3\xa4\xd4\xbd\x5e\xcb\x7d\xa9\xb5\x78\xe5\x3a\xeb\x58\x2e\x37\x65\xf1\x7a\xe6\x01\x1f\xc8\xed\x2f\xcb\x22\xf3\x6d\xf2\xa6\x2c\xee\x02\x1f\xf1\xfb\x4c\x21\x72\xc0\xf9\x0d\x1a\x7d\x1f\x79\xac\x39\x60\xe2\x00\xe1\x46\x4f\x7e\x51\x16\xb9\xcd\x93\x37\x6a\xb6\xbe\x7c\x66\x50\x16\x1f\x7a\x0e\x0c\xd2\xff\x41\x34\x81\x88\xad\x07\x86\xf3\x6e\x2b\x51\xc1\x07\xf3\xa9\x4e\x55\x42\xee\x5d\x87\x40\xae\x63\x08\x3b\xf1\x41\x70\x0e\xbe\x8f\x41\x5b\x3b\xd6\x14\x11\xfc\xec\x0c\x2e\xca\xe2\x4e\x89\x45\xb5\x96\x2a\x81\x40\x4b\x01\x35\x47\x05\xde\xf4\xe4\x1a\x56\x8e\x4e\x24\xa2\xad\x27\x07\xeb\x64\xca\xe0\xd4\x5d\x5b\x0c\x69\xc8\x39\x3d\x68\x9a\x77\x49\xbc\x88\x1e\xc2\xda\x23\x7d\x48\x46\x2b\xc0\x8b\xb2\xf8\xe0\x8f\x98\xa8\xd9\x53\xc7\x5f\xfa\xf4\x34\x0f\x99\x9b\xd7\x31\x90\x1d\x38\x08\x28\x81\xbd\x78\xd4\x44\xc9\x84\x3a\x50\x58\x14\xd5\xc0\x07\x1e\x44\x71\x52\x18\x7d\xa8\xca\x62\xf0\xc7\x2c\x6c\x35\xa3\x0e\x4c\x4d\x9f\x07\x87\xdc\x02\x8a\xb1\xd9\x97\xc5\xc8\xc6\xce\x63\x85\x8f\x76\x18\x12\xe9\x52\x29\x41\x18\xad\xb3\xe3\x3c\x6a\xb8\x1b\xc8\xdc\x34\x2c\xd2\xce\x83\xfa\x51\xb3\xbf\x2a\x8b\x3e\xeb\xe6\x7f\x39\xde\x7e\xed\x28\x69\x24\x5e\x6a\x87\xe5\x11\x7f\xb3\xe6\x26\x52\xa6\xd6\xbd\x48\xc6\x15\xde\xf7\xde\x47\x81\xc4\xb9\x6d\xcb\xe2\x25\xb7\xec\x1a\xae\x90\x1e\x8c\x80\x3a\xb2\x4e\xe2\x1a\x3b\x13\x47\x36\xe0\x2c\x22\x3e\x6a\xef\x42\xc7\x82\x79\x52\x64\xdc\xd1\xb6\x66\x1a\xcb\xe2\x8d\x77\x95\x5a\x84\x28\x5b\x15\x96\xec\xa9\xa3\x72\xed\x3f\xd1\x2e\x4d\xdb\x0b\x73\xd0\xf6\x9b\xd5\xa4\xc2\xcf\x64\x0d\x07\xdd\xca\x4f\x27\x5f\xe3\x41\xe9\x7a\xe2\xb8\xe4\x0b\xd0\xba\x4e\x36\x30\x3c\xb1\x33\xda\x20\xef\x70\xec\x6d\xd3\x67\x71\xf7\xed\x89\x0c\x2a\x5c\x8b\xce\x9f\x32\x41\xbb\xaf\x7a\x76\x52\xb4\x45\x5f\xf1\xd9\x10\xae\xba\xb4\xc9\xdb\x91\xf6\x9c\x44\x2d\xe9\x9f\x92\x46\x87\x33\x27\x5a\x59\x65\x63\xbe\xb1\x21\x03\x1d\xd8\xe8\xcb\xe2\xe7\x20\xe9\x5e\x7f\xb8\x97\x56\x8e\x2e\x14\xf2\x9d\xf4\x18\x00\x81\xd3\xb8\xeb\x78\xa4\xc4\xf0\xd3\xe4\xd3\x34\x24\x5e\x1f\x95\x06\x29\x83\x3f\x6a\xb1\xfc\xd1\x7d\x1d\x22\xc9\x44\x24\xb7\xdf\x28\xb2\x14\xa5\xd5\x25\xeb\x10\xf5\x9b\x43\xb7\xd2\x87\x87\x42\x52\xe5\xfb\x04\x35\x27\x71\x7c\x1f\x11\xe7\xf0\x0f\xa1\xb3\xea\xd4\xb4\x64\x70\xf9\xf5\x14\xb7\xa6\xe5\x21\x2c\xfd\xaf\xb0\x81\x8f\xdb\x55\xc1\xd6\xc8\x8f\x34\xec\x14\xff\x24\x71\x56\xc0\x36\xf6\x1c\xa0\x32\x98\x6e\x01\xa3\x37\xc2\x3e\x69\xfa\x17\x54\xb0\x6d\xbe\x39\x74\x84\x65\xa2\x26\xb5\x3e\x7f\x81\xc4\x9e\x47\xf5\x73\x3e\xa6\x71\xf9\xfa\xef\xef\x00\x00\x00\xff\xff\x2f\xdf\x8e\xdf\xa5\x09\x00\x00")

func scriptsShipsPiscBytes() ([]byte, error) {
	return bindataRead(
		_scriptsShipsPisc,
		"scripts/ships.pisc",
	)
}

func scriptsShipsPisc() (*asset, error) {
	bytes, err := scriptsShipsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/ships.pisc", size: 2469, mode: os.FileMode(438), modTime: time.Unix(1502255623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/backstory.txt": scriptsBackstoryTxt,
	"scripts/intro.pisc": scriptsIntroPisc,
	"scripts/lib.pisc": scriptsLibPisc,
	"scripts/main.pisc": scriptsMainPisc,
	"scripts/map.pisc": scriptsMapPisc,
	"scripts/markets.pisc": scriptsMarketsPisc,
	"scripts/ships.pisc": scriptsShipsPisc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"backstory.txt": &bintree{scriptsBackstoryTxt, map[string]*bintree{}},
		"intro.pisc": &bintree{scriptsIntroPisc, map[string]*bintree{}},
		"lib.pisc": &bintree{scriptsLibPisc, map[string]*bintree{}},
		"main.pisc": &bintree{scriptsMainPisc, map[string]*bintree{}},
		"map.pisc": &bintree{scriptsMapPisc, map[string]*bintree{}},
		"markets.pisc": &bintree{scriptsMarketsPisc, map[string]*bintree{}},
		"ships.pisc": &bintree{scriptsShipsPisc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

