/* Tests for various bits of PISC */

: assert ( message quot1 quot2 -- ) 
/*
Use deep-slow-reflect-eq to assert both quotoations result in the same test result 
*/
	:q2 :q1 :msg 
 	{ q1 } dup :a1 { q2 } dup :a2 deep-slow-reflect-eq not [ 
	 	"" println 
	 	${ "Testing that " $msg " failed: " $a1 " is not " $a2 } println
 	 ] [
            "." print
 	 ] if 
 	# Indicate that we passed the assert
;

: assert-no-error ( message quot -- )
    # Assert that no catchable error was thrown
    :q :msg
    {  
       $q catch-all-the-errors dup f neq 
         [ :err ${ "Testing that " $msg " failed: " $err } println ] 
         [ "." print drop ]
       if 
    } drop # 
;

: assert-error-tags ( message quot tags -- )
    :tags :q :msg
    { [ 
        $q $tags catch f eq [ "Testing that " $msg " failed, because an expected error was not thrown" println  ] when   
      ] catch-all-the-errors dup f neq 
         [ :err ${ "Testing that " $msg " failed: " $err } println ] 
         [ "." print drop ]
        if
   } drop
;



: run-single-test ( name quot -- test ) 
	:quot :name
	${ "Running: " $name " " } print
	{ quot } dup :arr len 0 > [ ${ "Test" $name "corrupted the stack with" arr } error ] when
;

: <test-suite> ( name -- suite ) 
	<vector> :tests

	<dict> dup :self
		swap <<-name
		[ $tests ] <<-tests
		/* ( name quot -- ) Appends a name/quot pair to the tests vector */
		[ 2vector $tests swap vec-append :tests ] <<-addTest

		[ 
			# The title of the tests
			${ "Running the " $self ->name " tests" } println
			$tests [ 
				# Indent each sub-test
				"   " print
				splat run-single-test "" println 
			] vec-each
		] <<-runTests
;
