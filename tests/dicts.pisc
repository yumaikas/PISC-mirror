# Importing the test core
"tests/test_root.pisc" import

"Dictionary and lexical closure" <test-suite> :dict-suite
[$dict-suite .addTest] :test

"Basic functions" [
	get-locals  /* Make sure we don't pollute global scope */
	<dict> :subject
	
	"Stack is left empty after dict-set" 
		[ $subject 1 "a" dict-set ] [ ] assert

	"Key can be retrived" 
		[ $subject "a" dict-get ] [ 1 ] assert

	"Dict is left on stack when pair is pushed"
		[ $subject 3 "a" dict-push ] [ $subject ] assert

	"Key can have value checked" 
		[ $subject "a" dict-has-key? ] [ t ] assert

	"Non-existing keys are reported properly"
		[ $subject "b" dict-has-key? ] [ f ] assert

	$subject 2 "q" dict-set

	"Getting the keys returns all the keys" 
		[ $subject dict-keys len ] [ 2 ] assert
	drop-locals
] test

"get-or-default" [ 
    <dict> 45 <<-key :d
    "get-or-default miss" [ $d "other-key" 2 get-or-default ][ 2 ] assert
    "get-or-default hit" [ $d "key" 2 get-or-default ][ 45 ] assert
] test

"Prefix tests" [ 
	get-locals

	-%abwq :char-set

	"Each char in the char-set is set to true" 
		[ 
			$char-set ->a
			$char-set ->b and
			$char-set ->w and 
			$char-set ->q and
		] [ t ] assert


	<dict> dup :triangle
		4 <<-a
		5 <<-b
		3 <-c

	"Testing <<- and ->>" [ $triangle ->>a ->>b ->c ] [ 4 5 3 ] assert

    "a" :a
    "b" :b
    "Testing <-$ and ->>$" [ $triangle 24 <<-$a -3 <-$b][ ] assert
    "Testing ->$ and ->>$" [ $triangle ->>$a ->$b][ 24 -3 ] assert

	<dict> dup :self
		0 <<-count
		[ $self dup ->count 1 + <-count ] <<-incr
		[ $self dup ->count 1 - <-count ] <-decr

	"State tracking also works" 
		[ $self .incr $self ->count ] [ 1 ] assert

	"Further state tracking"
		[ 3 [ $self .decr ] times $self ->count ] [ -2 ] assert


	drop-locals
] test

$dict-suite .runTests
