/* A few core words for PISC execution. */

: println ( a --  ) >string priv_puts "\n" priv_puts ;

: print ( a -- ) >string priv_puts ;


/* The following calls are the current stack-shuffling primitives */


:DOC len ( lenable -- length )  Len is the go defined word that defers length checking to the go type system  ;


:DOC import ( filepath -- .. ) `import` current takes a file path, and attempts to execute the file at that relative file path. ;


# TODO: Move the statments that import these to their respective modules

/* Stack shufflers */
:DOC dup ( a -- a a ) Duplicates the top of the stack ;
: dup ( a -- a a ) 0 pick-dup ;

:DOC 2dup ( a -- a a ) Duplicates the top two elements of the stack ;
: 2dup ( a b -- a b a b ) 2 [ 1 pick-dup ] times ;

:DOC swap ( a b -- b a ) Swaps the top two elements of the stack ;
: swap ( a b -- b a ) 1 pick-drop ;

: drop ( a -- ) 0 pick-del ;
: nip ( a b -- b ) 1 pick-del ;
: 2drop ( a b -- ) 2 [ drop ] times ;
: 3drop ( a b c -- ) 3 [ drop ] times ;
: over ( x y -- x y x ) 1 pick-dup ;

:DOC dip ( a quot -- a ) Takes a quotation and a value, and puts the value back on the stack after calling the quotation ;

: keep ( ..a x quot: [ ..a x --- ..b ] -- ..b x ) over [ call ] dip ;
: bi ( a quot1 quot2 -- ... ) [ keep ] dip call ;

/* If statement */
:DOC if ( ? trueQuot falseQuot -- result ) if ? is t, call true quot, otherwise call falseQuot. Defined as `? call` ;
: if ( ? true false -- res ) ? call ;
/* When statement for when you don't need all of if */
: when ( ? true -- res ) [ ] ? call ;

: ndrop ( n -- ) [ drop ] times ;

: inspect ( a -- a ) dup print ;

: clear-stack ( -- ) [ stack-empty? not ] [ drop ] while ;
