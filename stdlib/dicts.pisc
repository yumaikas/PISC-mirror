/* Dictionaries and their utilities */

: dict-if-empty-stack ( .. -- dict? ) stack-empty? [ <dict> ] when ;
: dict-if-not-dict ( .. -- dict ) dup typeof "Dictionary" str-neq? [ <dict> ] when ;
: ensure-dictionary ( .. -- dict ) dict-if-empty-stack dict-if-not-dict ;

/* Fetch from dictionary */
 :PRE -> ( dict key -- val ) dict-get ;
 :PRE ->> ( dict key -- val dict ) [ dup :d ] dip dict-get $d ;

/* Set the key for a given dictinoary value, but leave the dictionary on the stack */
 :PRE <<- ( dict val key -- dict ) dict-push ;
 :PRE <- ( dict val key -- ) dict-set ;

 :PRE ->$ ( dict key -- ) get-local dict-get ;
 :PRE ->>$ ( dict key -- dict ) [ dup ] dip get-local dict-get swap ;

 :PRE $<- ( dict val key -- ) dup get-local swap dict-set ;
 :PRE $<<- ( dict val key -- dict ) [ [ dup ] dip ] dip dup get-local swap dict-set ;

/*  Set an entry to true for each unicode character in this string */
 :PRE -% ( dict? key -- dict ) [ ensure-dictionary ] dip [ :dict ] dip [ $dict swap t swap dict-set ] each-char $dict ;

 :PRE ->? ( dict key -- dict ? ) dict-has-key? ;

 :PRE . ( dict key -- .. ) dict-get call ;
