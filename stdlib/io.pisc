/* The IO libraries of PISC */

/* This doc isn't for a specific word */
:DOC IO ( -- ) 
# Readers

Currently, PISC has reading and writing objects that are bound to underlying go based bufio objects. Each reader has the following functions loaded into its dictionary entries:

## read-byte ( -- byte )
Reads a byte from the reader as an int, setting the readers EOF to true if the end of the file is reached

## read-rune ( -- rune )
Reads a UTF-8 rune from the reader

## read-line ( -- str )
Reads a line from the reader, trimming '\r' and '\n' off the end

## EOF ( -- EOF? )
Returns true if the end of the file has been reached, false otherwise

;

:DOC open-file-reader ( path -- Reader ) File readers have a `close` entry that can be called to close the underlying file handle ;

:DOC open-file-writer ( path -- writer ) Writers are simpler than readers, as they can only write lines or strings ;
	
:DOC .write-string ( str IO -- ) Write str to the attached writer ;

:DOC write-line ( str -- ) Write str to the attached writer, appending \n to the end ;

:DOC filepath>string ( fileName -- strContents )  A utility function for reading small files into strings. Do not use on large files  ;

:DOC priv_puts ( str -- )  priv_puts is the underlying word used for printing values  ;

: with-output ( path quot -- .. )
	:quot
	open-file-writer dup $quot with .close
;

# TODO
# : with-append-out 

: with-input ( path quot -- .. ) 
	:quot
	open-file-reader dup $quot with .close
;


: write-iolist ( content:arr|str writer:dict[ .write .write-line ] -- ) 
/* 
Take an array of arrays and strings, and write it to the supplied writer 

Loosely modeled after Erlang's notion of iolists, though not likely to be nearly as efficient yet
*/
:OUT :content
$content typeof "String" eq [ $content $OUT .write-string ]
[
    $content [ :elem
        $elem typeof :type
        $type "String" eq [ $elem $OUT .write-string continue ] when
        $type "Vector" eq [ $elem $OUT write-iolist continue ] when 
        ${"Unsupported iolist type: " $type "."} {"io"} error
    ] vec-each
] if

; 

