/* Vectors and their utilities */

:DOC vec-set-at ( vec val idx -- elem ) Set vector at idx to value ;
:DOC vec-at ( vec idx -- elem ) Get element at index ;
:DOC <vector> ( -- vector ) Init a new vector ;
:DOC vec-each ( vec quot -- .. ) Run `quot` for each element in the vector ;

: 2vector ( a b -- vec ) <vector> 2 [ swap vec-prepend ] times ;

:DOC each2 ( v1 v2 quot -- v3 ) Applies a quotation to each elementwise pair in v1 and v2, to result in v3 ;
: each2 ( v1 v2 quot [ a b -- ab ] v3 ) 
	:quot :v2 :v1
	0 :i <vector> #:out
	$v2 len $v1 len min [
		$v1 $i vec-at 
		$v2 $i vec-at
		quot vec-append
		[ 1 + ] $:i
	] times ;

:DOC splat ( vec -- items ) Dump the contents of the vector onto the stack ;
: splat ( vec -- items... ) [ ] vec-each ;

:DOC vec-reverse ( vec -- reversevec ) Reverses a vector ;
: vec-reverse ( vec -- reversevec ) 
	dup :vec len :end 0 :i
	[ 1 - ] $:end
	$end 2 / 1 + [ 
		$vec $i vec-at :x
		$vec $end vec-at :y
		$vec $y $i vec-set-at :vec
		$vec $x $end vec-set-at :vec
		--end
		++i
	] times
	$vec
;

: vec-filter ( vec quot -- filteredVec ) 
	<vector> :newvec
	:quot
	[ 
		 dup quot [ $newvec swap vec-append :newvec ] [ drop ] if 
	] vec-each
	$newvec
;

: vec-map ( vec quot -- mappedVec )
 	:quot :vec 0 :i
 	$vec len [ 
 		$vec $i vec-at quot 
 		$vec swap $i vec-set-at drop
	 	++i
 	] times
 	$vec
;

/* :DOC vec-dropfront ( vec -- newvec ) Drop the front of the vector ; */
: vec-dropfront ( vec -- newvec ) vec-popfront drop ;

/* :DOC vec-dropback ( vec -- newvec ) Drop the back of the vector ; */
: vec-dropback ( vec -- newvec ) vec-popback drop ;