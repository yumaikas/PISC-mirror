: handle-ping ( conn message -- was-ping )
    :msg :conn
	$msg .command "PING" str-eq? :was-ping
	$was-ping [
		$msg .params 0 vec-at :resp-key
		${ "PONG :" $resp-key } :resp 
		$resp $conn .send-message
	] when
	$was-ping
;

: irc-conf-defaults ( conf -- filledConf ) 
	:conf
	/* ( key fallbackVal --  ) */
	[ :v :k 
		$conf $k dict-has-key? not [
			$conf $v $k dict-set
		] when
	] :fallback

	"pass" "0" fallback
	"nick" "piscbot" fallback
	"chanlist" { "#botwars" } fallback
	"responders" { 
		 <ping-responder>
	} fallback
	"address" "" fallback
	$conf
;

: clean-chanlist ( chan-vec -- chancsv ) 
	:list
	{
		$list [ :c
			$c "#" str-starts? [ $c ] [ ${ "#" $c } ] if
		] vec-each 
	} "," str-join
;

: irc-evented-server! ( conf -- ) 
	irc-conf-defaults :conf
	"Checking address" println
	# Make sure we have an address
	$conf ->address len 0 > [
		$conf do-irc-evented-server!
	] [ "Need an address to dial into server!" println ] if
;

: do-irc-evented-server! ( conf -- )
	/* This server is single threaded for now */
	:conf 
	"Before trying to connect" println
	$conf ->address irc-dial :conn /* TODO: Figure out how to handle errors here, if at all */
	[ $conn .send-message ] :send
	[ $conn dup .recieve-message handle-ping drop ] :check-ping
	[ $conn .recieve-message ] :get-message

	$conf ->chanlist clean-chanlist :chanlist
	# Initialize the responders with an open connection
	{ $conf ->responders [ $conn swap call ] vec-each } :responders

	/* Get the server MOTD and the like */
	${ "PASS " $conf ->pass } send
	${ "NICK " $conf ->nick } send
	check-ping
	${ "USER piscbot piscbot i :" $conf ->nick } send
	check-ping


	/* Waiting for a MODE command so we know that MOTD has been finished */
	t :reading-motd
	[ $reading-motd ] [
		get-message :msg
		$msg .params " " str-join println
		$conn $msg handle-ping drop
		$msg .command "MODE" str-eq? not :reading-motd
	] while

	${ "JOIN " $chanlist } send

	[ t ] [
		get-message :msg
		$conn $msg handle-ping not [
			# This is a sandboxing technique
            log-stack
            ${ "Stack-length: " stack-len } println
			$responders [ :resp $msg $resp call ] vec-each 
		] when
	] while
	$conn .close
;


: is-ping? ( msg -- ? ) :msg
		$msg .command "PRIVMSG" str-eq?
		$msg .params len 1 > [ $msg .params 1 vec-at "!ping" str-contains? ] [ f ] if
	and
;

: <ping-responder> ( conn -- resp ) 
    [ :conn
        [ :msg
            $msg is-ping? [
                $msg .params 0 vec-at :replyId
                ${ "PRIVMSG " $replyId " pong!" } $conn .send-message
            ] when
        ]
    ]
;

: is-eval? ( msg -- ? ) :msg
		$msg .command "PRIVMSG" str-eq?
		$msg .params " " str-join "$pisc" str-contains?
	and
;

: clean-eval-output ( vec -- str )
    "|" str-join
    "\n" " " str-replace 
    dup len 250 > [ 0 250 str-substr " (Truncated...)" str-concat ] when
;

: clean-eval-code ( str -- code ) 
    :code 
    $code "$pisc" str-contains? 
    $code "$piscbot-help" str-contains? not and [ 
        $code "$pisc" str-idx-of :start
        $code len :end
        $code 
            $start "$pisc" len +  
            $end 
        str-substr
    ] [ "" ]  if
    dup println
;

# This is curried 3 ways
: <evalbot-responder> (  vm  -- [ conn - [ msg - response ] ] ) 
    :vm 
    [ :conn
        [ :msg
            $msg is-eval? [
                $msg .params
                    dup 0 vec-at :replyId
                        1 vec-at :eval-code
                $eval-code clean-eval-code
                $vm .eval 
                clean-eval-output :body
                
                ${ "PRIVMSG " $replyId " :" $body } $conn .send-message
            ] when
        ]
    ]
;

: is-help? ( msg -- ? ) :msg
        $msg .command "PRIVMSG" str-eq?
        $msg .params " " str-join "$piscbot-help" str-contains?
    and
        $msg .params len 0 >
    and
;

: help-message ( replying-to -- str ) :reply-id
    ${
        "PRIVMSG " 
        $reply-id
        " :I can be used to evaluate pisc on IRC. See https://pisc.junglecoder.com for language details" 
    } 
;

: <help-responder> ( -- [ conn - [ msg - response ] ] )
    [ :conn 
        [ :msg
            $msg is-help? [
                $msg .params 0 vec-at help-message  $conn .send-message
            ] when
        ] 
    ] 
;

: irc-conf-ping-freenode! ( -- ) 
	<dict> dup :conf
		"wiki-bot" <<-nick
		"0" <<-pass
		"irc.freenode.com:6667" <<-address
	irc-conf-defaults irc-evented-server!
;

: prep-vm ( vm -- ) :vm
    "vm-prep.pisc" get-str-at-path $vm .eval println 
    "Prepped!" println
;

: irc-eval-ludumdare! ( -- ) 
	<irc-vm> :vm
    $vm prep-vm
	<dict> 
		"piscbot" <<-nick
		"0" <<-pass
		"irc.afternet.org:6667" <<-address
		{ "#botwars" "#botspam" "#ludumdare" "#alakajam" } <<-chanlist
		{ 
			<ping-responder>
			$vm <evalbot-responder>
            <help-responder>
		} <<-responders
    irc-evented-server!
;

: irc-eval-freenode! ( -- ) 
	<irc-vm> :vm
    $vm prep-vm
	<dict> 
		"piscbot" <<-nick
		"0" <<-pass
		"irc.freenode.org:6667" <<-address
		{ 
            "#botwars" "#proglangdesign" "#lobsters"
            "#pisc"
        } <<-chanlist
		{ 
			<ping-responder>
			$vm <evalbot-responder>
            <help-responder>
		} <<-responders
    irc-evented-server!
;
