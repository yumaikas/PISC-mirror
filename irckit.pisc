: handle-ping ( conn message -- was-ping ) 
	:msg :conn
	$msg "PING" str-contains :was-ping
	$was-ping [
		$msg " " str-split 1 vec-at :resp-key
		${ "PONG :" $resp-key } :resp 
		$resp $conn .send-message
	] when
	$was-ping
;

: irc-conf-defaults ( conf -- filledConf ) 
	:conf
	/* ( key fallbackVal --  ) */
	[ :v :k 
		$conf $k dict-has-key?
		$conf $v $k dict-set
	] :fallback

	"pass" "0" fallback
	"nick" "piscbot" fallback
	"chanlist" { "#botwars" } fallback
	"handlers" {
		<dict> 
			[ "!ping" str-contains ] <<-is-match
			[ :bot "pong!" $bot .reply ] <<-callback
			/* Leave the dict on the stack for it to be added to the array */
	} fallback 

	$conf
;

: <msg-ctx> ( conn -- context ) 
	:conn
	<dict> dup :msgctx
		[ :reply ${ "PRIVMSG " $msgctx ->chan " " $reply } $conn .send-message ] <<-reply
		[ :reply ${ "PRIVMSG " $msgctx ->nick " " $reply } $conn .send-message ] <<-private-reply
		[ $msgctx ->message ] <<-msg
		[ $msgctx swap <-message ] <<-set-msg
;

: clean-chanlist ( chan-vec -- chancsv ) 
	:list
	{
		$list [ :c
			$c "#" str-starts [ $c ] [ ${ "#" $c } ] if
		] vec-each 
	} "," str-join
;

: irc-evented-server! ( conf -- )
	/* This server is single threaded for now */
	irc-conf-defaults :conf 
	"Before trying to connect" println
	$addr irc-dial :conn /* TODO: Figure out how to handle errors here, if at all */
	$conn <msg-ctx> :ctx
	[ $conn .send-message ] send
	[ $conn dup .recieve-message handle-ping ] check-ping
	[ $conn .recieve-message ] get-message

	$conf ->chanlist clean-chanlist :chanlist
	$conf ->handlers :handlers


	/* Get the server MOTD and the like */
	${ "PASS " $conf ->pass } send
	${ "NICK " $conf ->nick } send
	check-ping
	${ "USER piscbot piscbot i :" $conf ->nick } send
	check-ping


	/* Waiting for a MODE command so we know that MOTD has been finished */
	t :reading-motd
	[ $reading-motd ] [
		get-message :msg
		$msg println
		$msg "MODE" str-contains not :reading-motd
	] while

	${ "JOIN " $chanlist } send

	[ t ] [
		"Awaiting a message" println
		get-message dup :msg println

		[ $conn $msg handle-ping not [

				$handlers [ :handler /*  */
					$msg $handler .is-match [
					/* TODO: Parse out channel, verb, user nick, more, call handler so they can be passed to the handler */
					] when
				] vec-each
			] when
		] time println
	] while
	$conn .close
;
