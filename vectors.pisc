/* Vectors and their utilities */

:DOC vec-set-at ( vec val idx -- elem ) Set vector at idx to value ;
:DOC vec-at ( vec idx -- elem ) "vec-at" extern-call ;
:DOC <vector> ( -- vector ) "<vector>" extern-call ;
:DOC vec-each ( vec quot -- .. ) "vec-each" extern-call ;


:DOC vec-at ( -- ) "vec-at" extern-call ;
:DOC <vector> ( -- vec ) "<vector>" extern-call ;
:DOC vec-each ( vec quot -- .. ) "vec-each" extern-call ;
:DOC vec-append ( vec elem --  newVect ) "vec-append" extern-call ;
:DOC vec-prepend ( vec elem -- newVect ) "vec-prepend" extern-call ;
:DOC vec-popback ( vec -- vec elem  ) "vec-popback" extern-call ;
:DOC vec-popfront ( vec -- vec elem ) "vec-popfront" extern-call ;

:PRE [] ( vec idx -- ) string>int vec-at ;

: 2vector ( a b -- vec ) <vector> 2 [ swap vec-prepend ] times ;

: each2 ( v1 v2 quot -- v3 ) 
	:quot :v2 :v1
	0 :i <vector>
	$v2 len $v1 len min [
		 $v1 $i vec-at 
		 $v2 $i vec-at quot vec-append
		[ 1 + ] $:i
	] times ;

: vec-reverse ( vec -- reversevec ) 
	dup :vec len :end 0 :i
	[ 1 - ] $:end
	$end 2 / [ 
		$vec $i vec-at :x
		$vec $end vec-at :y
		$vec $y $i vec-set-at :vec
		$vec $x $end vec-set-at :vec
		[ 1 - ] $:end
		[ 1 + ] $:i
	] times
	$vec
;