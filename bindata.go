// Code generated by go-bindata.
// sources:
// stdlib/bools.pisc
// stdlib/debug.pisc
// stdlib/dicts.pisc
// stdlib/io.pisc
// stdlib/locals.pisc
// stdlib/loops.pisc
// stdlib/math.pisc
// stdlib/random.pisc
// stdlib/shell.pisc
// stdlib/std_lib.pisc
// stdlib/strings.pisc
// stdlib/symbols.pisc
// stdlib/vectors.pisc
// stdlib/with.pisc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stdlibBoolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\xe2\x4a\xca\xcf\xcf\x29\xd6\x2b\xc8\x2c\x4e\xe6\xd2\xd2\xe7\xe2\xb2\x72\xf1\x77\x56\x48\xcc\x4b\x51\xd0\x50\xa8\x50\xa8\x54\xd0\xd5\x55\xb0\x57\xd0\x54\x50\x70\xca\xcf\xcf\x49\x4d\xcc\x03\xcb\x28\x58\x43\x54\xe5\x17\xe1\x50\x94\x5f\x04\x57\x93\x97\x5f\x02\x56\xa4\xab\xab\xa0\x58\x81\xac\x06\x24\xa1\x60\x0d\x08\x00\x00\xff\xff\x66\x06\xc1\xea\x80\x00\x00\x00")

func stdlibBoolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibBoolsPisc,
		"stdlib/bools.pisc",
	)
}

func stdlibBoolsPisc() (*asset, error) {
	bytes, err := stdlibBoolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/bools.pisc", size: 128, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDebugPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\xc6\xf1\xbd\x4f\xf1\xd1\x49\x87\xbc\x40\x8b\x2e\xba\x3b\x38\x8a\x43\xb8\x9e\x26\x10\x72\xe1\x2e\x1a\x7d\x7b\x91\x5a\x70\xe8\xf4\x0d\x7f\xbe\x5f\x37\x1c\x4f\x07\x58\x90\xe6\x8a\xf2\x2d\xbe\x5c\x13\x9d\x0c\x1b\x38\x87\x2d\xce\x41\x9a\xa1\x85\x48\x01\x73\xc7\xdc\xbd\x32\xe8\xa1\xca\xb9\xa6\x37\x92\xf8\x89\x27\x8c\xdd\x1f\x97\x84\x7c\x5a\x85\x7e\xe5\x4b\xc4\xbc\x28\x30\x92\xc2\x18\xbb\x61\xed\x7e\x01\xe4\xc9\x8a\xbd\x55\x8d\xf9\x8e\x1e\x3b\xf4\xb0\xe6\x0b\x48\x32\xf9\xba\x4c\x8e\x05\x45\x63\xae\xb8\x82\x3d\x85\xd9\xc1\x88\x4f\x00\x00\x00\xff\xff\x97\x3e\x7b\x96\xe9\x00\x00\x00")

func stdlibDebugPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDebugPisc,
		"stdlib/debug.pisc",
	)
}

func stdlibDebugPisc() (*asset, error) {
	bytes, err := stdlibDebugPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/debug.pisc", size: 233, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDictsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\x41\x8f\xda\x3e\x10\xc5\xef\x7c\x8a\x27\xb4\x7f\x89\xa0\xbf\xe1\x0e\xd5\x72\xe8\xb6\x3d\x76\xd5\x1e\x23\x0e\xae\x33\x6c\x2c\x82\x9d\xb5\x1d\x68\x54\xf5\xbb\x57\x63\x27\xc1\x0b\x5c\x20\x71\x26\x6f\x7e\x33\xf3\x26\xeb\x25\x5e\xb4\x0a\xda\x1a\xe9\x34\x79\x48\x53\x21\xd4\xa4\x1d\xba\xa0\x1b\x1d\xf8\x6c\xb9\x9e\xcd\x36\x2f\xdf\x3f\xe3\x53\xa5\x55\x78\xc6\x02\x42\x80\x2f\x51\x00\xaf\x8d\x54\x04\x69\x40\xa7\x36\xf4\xf1\x38\x8a\xf5\xb0\x86\x95\xe0\x83\x54\x47\x60\x3b\x9b\xad\x97\x88\x32\x1c\x23\xde\x28\x88\x93\x34\x3d\x16\x49\xea\xbd\xb3\x81\x75\x59\xf3\x1b\x05\x48\x9c\x65\xd3\x11\x0e\xce\x9e\xa2\x4e\xa6\x7c\xb0\x0e\x24\x55\x8d\x8b\x75\x15\xb4\x81\x8c\xaf\x4b\x7e\x0e\x6c\x23\x30\x17\x66\xc9\x23\xd4\xda\xa7\x0c\xb5\x3c\x53\xba\x3d\x52\xbf\xc3\x72\x8d\x4d\x42\xa9\xa5\x17\xf1\x68\x40\x39\x52\x3f\x55\xf8\xcb\xda\x06\x05\xe6\x79\xe0\x1c\xf4\x3b\x90\x33\x42\xc9\xa6\xe1\xc2\xae\x55\x79\x0a\xb9\x0a\xdf\x66\xbd\xfa\x49\x21\x96\xc2\x8f\x82\x8d\x97\xb1\xc8\xff\xd1\x90\x3c\x6b\xf3\x36\x15\x7a\xdf\xbc\x0f\x9d\xbb\x21\x4d\x9d\x1a\x1a\x37\xa9\x3e\x6c\x5d\x94\x4a\x3a\xfa\x20\xe2\xcc\x44\x4a\xb2\xc0\x6a\x35\xc2\xee\x50\xa4\xd4\x29\x62\x87\x72\x9c\xfd\x1e\x97\x9a\x0c\xb6\x99\x88\xb1\x41\x44\x9a\x5c\x01\x05\xaa\xae\x45\xe8\x5b\xb2\x07\xcc\x27\x8f\xf5\x73\xf8\xe0\x84\xa1\xf7\x87\x9a\x64\x7c\xe7\x48\x64\xc0\xb7\xa2\x0f\xc8\xef\x40\x92\xd7\xbe\x52\x50\x75\x6a\x42\xa6\xb7\x5c\xcf\xb0\x79\xfd\xf1\x05\xe2\xe9\xbe\x8b\x63\x02\x6e\x71\x12\xe1\x91\x65\x6f\x0f\xe3\xe2\x2d\xe1\xd9\xda\x36\x5a\x6e\xa1\xd3\xb4\x82\x93\x95\x8e\x27\xf6\x00\x5f\x53\xd3\xf8\x22\x4b\xb8\x19\x12\xee\x62\xaa\xdc\x65\x05\x4a\x94\x0f\x8a\xe7\x16\x6e\x62\xc4\x1e\x95\x6e\x87\xdf\xc9\x69\x4f\x59\xb5\x91\x94\xd7\xd0\x04\x97\xdc\xe5\xd8\x02\xe3\xa6\x74\x46\x2b\x5b\x11\x54\x2d\x9d\x54\x81\x1c\x22\xb3\xf6\x3c\x0e\x76\xde\x15\xf3\xbf\x09\xf3\x16\xf1\x1e\x30\x01\x95\x1f\x20\xcb\x81\xcb\x5f\x64\x8b\xe1\x6f\x42\xde\x47\x1c\xc1\x18\x57\xfc\x21\xf1\xc3\x05\xdc\x8d\x33\x99\xb6\x74\x7a\x61\x75\x13\xbf\x5a\xe5\xf3\x9b\x96\x33\x7e\x1b\x9e\x07\x87\x8e\x9f\x99\xa1\x26\xfe\x0a\x35\x56\xc9\xc6\xa7\xf8\xc1\x91\xe5\x1d\x70\x0c\x42\xe5\x6c\x3b\xc6\x5f\x17\xe9\x48\xbd\x1f\x51\x84\x60\x1a\x7f\x26\x85\x02\x7f\xd0\x76\xbe\x16\xd7\xa0\xbf\xd8\xfe\x0b\x00\x00\xff\xff\x7b\xdc\xa1\x3a\x71\x05\x00\x00")

func stdlibDictsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDictsPisc,
		"stdlib/dicts.pisc",
	)
}

func stdlibDictsPisc() (*asset, error) {
	bytes, err := stdlibDictsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/dicts.pisc", size: 1393, mode: os.FileMode(420), modTime: time.Unix(1488981671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibIoPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xf3\x36\x0c\x3d\xd7\xbf\xe2\x01\x19\x90\xe6\x43\x9c\xef\x3a\xb4\xc0\x86\x21\x6d\x80\x5e\x96\x61\xeb\xb0\x4b\x81\x55\xb6\xe9\x58\x83\x22\x79\x12\xd5\xc0\xff\x7e\x20\x6d\x27\x59\xbb\x0e\xdf\x4d\x96\xc8\xf7\x1e\xc9\x47\x7f\xfd\x82\xe7\x8e\xf0\xb4\x87\xb3\x55\x34\xd1\x52\x42\x68\xf1\xcb\xd3\x6f\x5b\x7c\xf9\x5a\x14\xfa\x6e\x13\x9a\x50\xc3\x26\xbf\x64\xb4\x21\xc2\x20\xf5\x54\xdb\xd6\xd6\x38\x85\xd8\x48\xe4\xdd\xc3\x7e\x2b\x30\xb7\x28\x4b\xac\x50\x2c\xf0\x2b\x99\x86\x62\x2a\x8a\x6d\x8e\x91\x3c\xbb\x61\x3d\xe2\x76\x26\x21\x92\x69\xac\x3f\xc0\xf8\x06\xa7\x68\x59\xce\xa1\xfa\x8b\x6a\x4e\xe0\xce\x30\x4c\x24\x54\x21\xfb\x06\x1c\x90\x7d\x43\xd1\x0d\x12\x74\x08\xa8\x4c\xa2\x06\x55\x6e\x6d\x98\x73\x36\x78\x34\x75\xa7\xa8\x14\x95\x80\x3b\x42\x1b\x9c\x0b\x27\xc9\x6a\xb3\xaf\xd9\x06\x9f\xe0\x82\x69\xa8\x81\xf5\x1c\x60\x39\xa1\xb1\xfa\x60\xe2\x00\xf2\x2c\xf5\xdf\x15\xc5\x62\xa1\x50\x65\x35\x30\x8d\x15\xe9\x69\x55\x48\x4d\x09\x66\xfc\x6c\x63\x38\x2a\xcf\x44\x6b\x12\x8c\x17\xe4\x35\x12\xb1\x96\x74\x79\x4d\x78\xdc\xef\xa4\x16\x8e\x99\x60\x5b\x7d\x22\xdf\x48\xb7\x55\xab\x75\x04\xab\x8d\xa9\x3b\x6a\x2e\x1a\x62\xf6\x93\x06\x3d\x5d\x34\xfc\xfe\xbc\x2b\xbf\x1f\x2f\xdf\x29\xb9\x24\x3b\x3b\x27\x27\x8e\x57\xb9\x7a\xff\x2e\x6b\x0d\x8e\xf6\x78\x14\xd9\xcb\x97\xb8\xd4\xd1\x2c\x5f\xfc\x12\xa1\x3d\xab\x55\x64\x29\x44\x31\x1f\xf7\xbb\x1f\x15\x94\x73\xf4\xe9\x7f\x2b\x93\x91\x54\x44\x7e\xae\x6f\x8d\xd6\xb8\x44\x08\xdc\x51\x3c\xd9\x44\x45\x71\x5f\x8c\x26\x0a\x3d\xf9\x52\x92\xca\xa9\xaf\xb7\xe8\x0d\x77\x42\x38\x5a\x0a\x2b\xec\x04\x73\x6e\x6c\x67\xde\x08\x06\xaf\xb5\x0b\x89\x5e\x75\x8c\xc3\x68\xa2\xda\x78\x54\x84\xda\x38\x47\x6a\x24\x0d\x51\x55\x57\x96\x9a\x04\xfa\xc6\x11\x3e\x8a\x10\x77\xfe\x4b\xc4\x74\xb1\xc2\x1f\x7a\x48\x6a\xd5\x64\x8f\xbd\xa3\x28\xb4\x7e\x16\xb6\xc6\xe8\xc3\x41\x75\x04\xef\x86\x31\x57\xbb\x9f\x10\xa2\x0c\xc5\xfa\x43\xc2\x7d\x71\x33\xd2\xea\x7b\x39\x5e\xe3\x56\x87\xa6\xeb\xa4\x54\xfa\x29\x0e\xea\x08\x86\x59\xfb\x38\xab\x99\x75\x8f\x00\xd3\xd8\xbf\x39\x7d\x0d\xd3\xf7\xe4\x75\x23\x5f\xfc\x1c\x24\x33\x9c\x71\xa5\x15\xd2\x80\x1f\xce\xda\xe4\xe6\x67\x73\xa4\xc9\x5c\xdb\xe0\x99\x3c\x27\xac\x80\x9f\x90\xd9\x3a\xcb\xc3\x79\xef\xf4\xaf\x31\xef\x7c\x3a\x1a\xe7\x34\x3f\x8d\x7b\x38\xb5\x61\x83\x87\x00\x1f\x18\x59\x8c\xe1\xe1\x4c\x3c\xd0\x14\x77\x16\xd2\x47\xfb\xf6\x67\x9f\x39\x5d\xd7\x77\x75\x6b\xd3\xfb\xf1\xea\x1f\x2a\xcb\x2f\x43\x44\xf4\xd1\x7a\x5d\xcd\x37\xe3\xf2\x0c\x8c\x93\xe5\xae\x0c\x99\xfb\xcc\xf3\xa4\xff\xce\x81\x05\x7d\xb3\xc1\xaa\xb8\xb9\x93\xcf\xe2\xe6\x83\x2d\x9a\xdc\xe3\x3b\x0d\x15\x08\x6c\xd4\x60\x62\xe5\x05\x9e\xf7\x0f\xfb\x62\x81\x09\x7c\x6c\xb0\x70\xe0\x4c\x68\xfd\x27\x7c\xf8\x0f\xc2\x69\x19\x3e\x21\xfc\x27\x00\x00\xff\xff\xb2\x42\xc8\x50\xc8\x05\x00\x00")

func stdlibIoPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibIoPisc,
		"stdlib/io.pisc",
	)
}

func stdlibIoPisc() (*asset, error) {
	bytes, err := stdlibIoPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/io.pisc", size: 1480, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLocalsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x4b\x03\x31\x10\x85\xef\xfb\x2b\x1e\x78\xe9\x16\x36\xbd\xb7\xe0\xa5\x16\x11\x04\x8b\x7b\x14\x0f\x43\x36\x71\x43\xd7\x4c\x4d\x26\xf5\xef\x4b\x92\xed\xa2\xf6\x38\xe4\x7d\xdf\xcb\xdb\xac\xf1\xcc\x9a\xa6\x08\xe7\x71\x7c\xea\xf7\x58\x6f\x9a\xe6\x0e\x3d\x43\x46\x17\xe1\x22\x68\x9a\x10\x25\x59\xab\x94\x52\xcd\xf6\xe1\x65\x8f\x68\xa4\x9b\x32\x86\x15\x2e\x34\xc1\xd3\xa7\x41\xd7\xa1\x45\x6f\xa4\x5e\xc2\xe5\x05\xbb\xa6\x22\x1f\xbf\x90\x6b\x3c\x07\x5a\x3c\x1a\x81\x8c\x26\x5f\xc9\x80\x62\x64\xed\x48\xcc\x80\x6f\x27\x23\x08\x95\xaa\xaf\xb7\xba\x88\x55\x6d\x3e\xa6\x98\xd3\x51\x48\x9f\x60\x43\xae\xb0\x1c\x30\x87\xd8\x0b\x97\x96\xf9\xae\xb1\xab\x6d\x08\x7c\xfe\xaf\xe3\x33\x68\xf6\xb0\x5d\x34\xd6\xde\x5a\x16\x8d\x21\x3d\x2e\x23\xbf\x12\x0b\xde\x70\xc2\x05\x1d\x94\xc2\x7b\xf6\x56\x4e\x29\xb4\xc0\x6b\xf2\xa0\x12\x23\x71\xec\xcb\x6f\xb3\x61\x1e\xec\x7c\x69\xd2\x29\x04\xe3\xe5\xcf\xae\xfe\x70\xd8\x16\xf0\x7e\x70\x5a\x80\xdd\x4f\x00\x00\x00\xff\xff\x93\x2f\x42\x92\xc6\x01\x00\x00")

func stdlibLocalsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLocalsPisc,
		"stdlib/locals.pisc",
	)
}

func stdlibLocalsPisc() (*asset, error) {
	bytes, err := stdlibLocalsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/locals.pisc", size: 454, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLoopsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcb\x31\x0a\x02\x31\x10\x46\xe1\x7e\x4e\xf1\x97\xeb\xc2\x66\x7b\x53\xaa\x9d\xe0\x15\x46\xe2\x80\x81\x98\x44\x67\xa2\x1e\x5f\x42\xac\xb7\x7d\x7c\x6f\x9d\xe9\x5c\x4a\x55\x57\xa3\x06\x9a\x57\xa2\xfd\xf1\x72\x80\xc5\x87\x28\x26\x64\x3c\x5b\x31\x2c\x0b\x9c\xc3\x0e\xa7\xaf\x84\x66\x02\xee\x95\x91\xff\xce\x8f\xe9\x73\x8f\x49\x30\xa1\xbe\xe4\xb6\xf9\x0d\xc8\xdd\x31\x92\x5c\xdf\xa2\x60\x63\xf8\x5f\x00\x00\x00\xff\xff\x8a\xf6\x37\x23\x8e\x00\x00\x00")

func stdlibLoopsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLoopsPisc,
		"stdlib/loops.pisc",
	)
}

func stdlibLoopsPisc() (*asset, error) {
	bytes, err := stdlibLoopsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/loops.pisc", size: 142, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibMathPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x95\x41\x6f\x9b\x4e\x10\xc5\xef\xfe\x14\xef\xf8\x4f\xfe\xb1\x12\x7c\x4c\xa4\x48\x8d\xd3\xb4\x95\xa2\xfa\x90\xdc\xa2\x4a\x5e\x60\xc0\x9b\xc2\x0e\x99\x5d\x6a\xdc\x4f\x5f\x81\x31\xde\x35\xb6\x95\x9b\x85\x7f\xef\x0d\xfb\x66\x66\xb9\x7d\x5c\xcc\x71\x9f\x72\x1d\x17\x84\xff\xd0\x60\x3a\x45\x8a\x0b\xcc\x99\x24\x21\x28\x98\xba\x8c\x49\xe0\x18\x0a\x3d\x76\x37\xe9\x54\x2a\x61\xbb\x93\x6c\x70\x81\x2f\x92\x20\x61\xab\x0d\xe1\x0e\x7b\x64\xe5\x33\xdf\x37\x15\x49\xcc\x85\x4e\xa0\x8e\xe0\x56\x9b\x43\xc7\x11\x70\xce\x2f\x84\x9d\x1a\xb9\x39\x65\x72\x32\x2e\x60\xce\x19\x76\xfc\x1e\x4f\x62\x71\x3e\x3d\xaf\x63\x82\x30\x7b\x04\xe9\x22\x20\x48\x17\xda\xe4\xe0\x6c\x9f\x5f\x25\x94\x68\xab\xd9\xec\xc2\x1d\xc4\x61\xa0\xf3\x30\x9d\x33\x59\x1e\xe4\x48\x92\xf9\xe0\x57\x11\x16\x64\xb5\x49\x5c\x5b\xd4\xa3\x92\xb0\x5c\x59\x15\x54\x92\x71\x4a\x36\xa0\x13\xa2\xa6\x0a\xac\x9b\x8a\x0d\x19\xa7\xd5\x21\x35\xf3\xb1\xd7\x35\xc3\xad\x08\x15\xaf\x49\xda\x2c\x96\xcd\xd2\x87\xcb\xc8\xa7\x97\x6d\x91\x08\xd3\xe5\x15\x4a\x96\x5d\x5e\x84\x8c\x05\xb6\x54\x45\xd1\xe7\x66\x31\x78\x64\x05\xb3\xf8\x1e\x4f\xdd\x83\x4f\xa5\x9e\xab\xb2\x54\xbe\xf6\x5b\xf7\x60\x38\xfa\xeb\xe2\x71\x31\xc0\xef\x37\x3e\xf9\x7e\x83\x07\xb2\x96\x8a\x71\x50\xef\xc1\x91\x9e\xb4\x58\x87\xdf\xda\xa4\x27\x05\x05\xe7\xbe\xe2\xa7\x72\xb5\xa8\x02\xcf\x9c\x2b\xd1\x6e\x55\xe2\x0e\x7b\x32\x0a\x5e\xe3\x99\x73\xc4\xca\x12\xa2\x1b\xdf\x2e\x0a\x5a\xb5\x6c\x10\xe1\xff\xae\xcc\xf2\x0a\x71\xed\xb6\xe1\xaa\x24\xa9\x45\x39\xc2\x5a\xbb\x55\x1f\xef\x1f\x55\xd4\x64\x7d\xab\xd9\xd1\x72\x33\x1f\x89\x7d\xe4\x41\x9b\x6e\x88\xfa\xf1\x68\x1b\xd1\x0c\xf0\xc1\x96\xbf\xb4\xa3\x3b\x8a\xe3\xcc\xa6\xdb\xe3\x82\x8f\x70\x37\x5f\x3e\x6a\x25\xfd\x76\x8e\xe0\x83\xab\xe1\xb5\xbf\x16\x8e\x71\xa7\xde\xc2\x9d\xd4\x48\x6d\x82\xc5\xfa\x61\x1c\xe5\x24\xdb\x58\xbb\x28\xae\xa0\xac\x77\x9f\xf6\xc2\x4d\xd0\xd4\x85\xa4\x24\xd3\xbf\x24\x3c\x1a\x19\xce\xba\x6d\xb2\x94\xb0\x49\xb7\x53\x35\x78\x44\x63\x0f\x36\xf4\x49\x8b\xeb\xcb\x49\x3b\xed\xb7\x68\xa7\xa0\xfd\xdf\xad\x19\x4a\x72\x94\xca\xad\x06\xb1\x9d\x5c\x5e\x4f\x6e\x51\x76\x6d\x54\x88\xdb\x6a\xdd\xe0\x90\xe0\x02\xb3\xb4\xae\x70\x8f\x37\x18\x5d\xe1\x17\xde\x90\x0a\xb7\x3f\x74\xd6\x7e\x38\x50\xaa\x66\xaf\x2a\x94\xe4\x9d\x08\x7b\x59\x8f\xef\xf4\xad\xec\x5f\x00\x00\x00\xff\xff\x4f\x52\x4f\x54\xa5\x06\x00\x00")

func stdlibMathPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibMathPisc,
		"stdlib/math.pisc",
	)
}

func stdlibMathPisc() (*asset, error) {
	bytes, err := stdlibMathPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/math.pisc", size: 1701, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibRandomPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xca\xc1\x09\x80\x30\x0c\x40\xd1\x55\xfe\x51\x0f\x59\x40\xa7\x09\x49\xc0\x42\x9b\x16\xad\xba\xbe\x78\x7f\x1b\x76\xf4\x62\xc1\xc2\x13\x86\x08\x51\xa3\xb1\xe2\xf7\xa0\x46\x72\x6a\xba\x94\x9c\x5c\xaf\x0e\x5a\xf7\xdf\x89\x4e\xf6\x2f\x00\x00\xff\xff\x3c\x4d\xec\x7d\x3b\x00\x00\x00")

func stdlibRandomPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibRandomPisc,
		"stdlib/random.pisc",
	)
}

func stdlibRandomPisc() (*asset, error) {
	bytes, err := stdlibRandomPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/random.pisc", size: 59, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibShellPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xc1\x6e\xd4\x30\x10\x3d\xc7\x5f\xf1\x64\xf6\x50\x0e\x5e\xb5\x57\xb7\xac\x04\xa2\x85\x5e\x0a\x52\xb9\xa5\x11\x0a\xf1\xb4\xb1\xea\xb5\x4d\xec\x6c\x7e\x1f\x8d\xb3\x61\xd3\x15\x1c\x76\x15\xbf\x79\x33\x7e\xf3\x3c\x23\x34\x5c\xc2\x05\x94\xc2\x7b\x38\x9b\xb2\x7a\xb6\x8e\x12\x6a\xc4\xc1\xfa\x8c\x06\x07\xea\x14\xb5\x5d\x8f\x6b\x21\x34\x52\x4f\xce\xa9\x7d\x30\xa3\x23\x5c\xe0\xf7\x18\x72\xc9\x15\xd5\xcd\x81\xba\x1c\x86\x1d\x74\x6c\x73\xdf\xdb\x94\x45\x55\x63\xb3\x1c\x10\x27\x53\x6a\xb5\x31\x92\x37\x27\x16\x1a\xe8\x38\xa6\xde\xbc\xa5\x33\x35\x86\xf8\xab\xed\x5e\x91\xa6\x36\x9e\x25\x84\x68\x84\xa8\x6e\x8c\xed\xf2\x0e\x66\x8c\xd0\xa9\x07\x57\x58\xf5\xd0\x40\x69\x97\xce\xc0\x7f\x34\xc6\x3c\x63\x87\x33\xa2\xa8\xaa\x9a\xff\x2a\xae\xae\x36\xfb\x60\x08\xd2\x48\xa4\x3c\xa8\x2e\xf8\xdc\x5a\xbf\xae\x56\xc3\x0c\x21\xa2\x81\x7d\xe6\xac\x55\x79\x51\xcd\x42\x4c\xd1\x57\x5a\x85\xdc\x6e\x25\x3a\x53\xae\x1e\xe3\x09\x3f\x42\x5d\x31\x83\x9b\x5c\x10\xf6\x81\x31\xd6\xc6\x46\xec\x52\x1e\xac\x7f\x99\xd9\x6d\xb1\x5a\x3e\xf9\x45\xdd\x58\x24\x29\x3d\x75\xae\x44\xbe\x7f\xfc\xf1\x55\x82\xfc\x41\xbd\xd0\x1c\x61\x84\x43\x6b\x8c\xfc\x81\xa1\xfa\xbf\xdd\x36\x85\x66\x93\x3a\xba\x25\x1f\x79\x1a\x70\xb9\xbd\x92\x25\xb2\x0f\xc6\xb7\x7b\x12\x65\x52\xda\xe9\x55\x59\x6f\x33\x2e\x10\x62\xb6\xc1\x27\x1e\x94\xed\x96\x67\xa5\xe6\x37\xfc\x74\xfb\xe5\xfe\xe1\xf8\x7d\xfb\xf0\x59\x54\xf2\x29\x4b\xe8\xfb\xbb\x47\xf0\xb7\x97\xd0\xdf\xee\x1e\x45\x25\x25\xf4\xa5\xa8\x32\xb4\x27\x32\x49\xa5\xe8\x6c\x5e\xcf\x9b\xb3\x9e\x8e\x75\x06\x4a\x94\xd5\x73\x18\xd4\x02\x6a\x6b\xb1\xe1\x1f\x03\x70\xe4\xb1\xfb\x80\x1a\x52\x96\x37\x9b\x51\x8e\x97\xd1\xcc\xf3\xfb\x35\x73\x4d\x35\xfb\xba\x59\x5d\xcb\x29\x97\xd8\xb0\x46\x76\x66\xc6\x0a\x19\x0d\xa6\x9e\x3c\xe7\x92\x4f\xe3\x40\x8b\x4e\xf6\xf8\x74\x06\x13\xae\x96\xc9\x2d\x02\x8b\x0f\xc5\xbf\xbf\x8e\xb0\x1f\x05\x61\x5f\x78\xf1\xde\x61\x4c\x84\xdc\xdb\x84\x1c\x90\x28\x23\xf7\x34\x2f\x23\xda\x54\x0e\x93\xcd\x7d\xea\x42\x24\xa1\x99\xac\xe6\xe0\x71\xb3\xdf\xac\xad\xfc\xc9\x5c\xc9\x65\x94\x0b\x5d\xeb\x70\xfd\x27\x00\x00\xff\xff\xbe\xcb\x92\x00\x07\x04\x00\x00")

func stdlibShellPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibShellPisc,
		"stdlib/shell.pisc",
	)
}

func stdlibShellPisc() (*asset, error) {
	bytes, err := stdlibShellPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/shell.pisc", size: 1031, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStd_libPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x57\x59\x6f\xdb\xce\x11\x7f\x36\x3f\xc5\xe0\x0f\x03\x95\x14\x53\x8a\x9d\x37\xda\xb1\x51\xc4\x2d\x10\x20\xcd\xd1\x04\xe8\x83\x20\xd4\x4b\x72\x68\x2e\xbc\xdc\xa5\x77\x57\x92\xd5\x4f\x5f\xcc\x0c\x2f\x3b\xae\x92\xe2\xff\xa0\x83\x9c\x99\xdf\x1c\x3b\xd7\xae\x16\x49\xf2\xa3\xd6\x01\x74\x80\x58\x23\xdc\x7b\xb7\xd7\xf6\x1e\x42\x54\xb6\x54\xbe\x04\xa3\x73\xaf\xfc\x01\x5c\x05\x5f\x3f\x7e\xff\xb0\x4c\x92\xc5\x2a\x49\x32\x68\xbd\xb6\x11\x66\xa0\x20\x4d\x01\xe6\x70\x1d\xa2\x27\xc1\xd6\xeb\xdd\xbf\xdb\x6d\x0c\x70\x99\x64\xb7\x5f\x3e\x00\x31\xa5\x29\x44\x98\x03\x44\x50\xb6\x84\x0a\x3c\x86\x16\x8b\xa8\x77\x68\x0e\xd0\x6e\x43\x0d\xd1\x6f\x51\x88\xca\x04\x04\x67\xa3\x63\x7b\x42\x54\xc5\x03\xf4\x58\x95\x60\x55\x7f\x12\x2b\x59\x2d\xe0\x93\x2b\x94\x81\xaf\x1e\x2b\xfd\x84\x01\x16\xab\x24\xfb\xfa\xcf\xbf\xc1\x29\xcc\xc0\xaa\x06\x49\xcd\x4e\x19\x98\xc3\x3d\xc6\xd4\x30\xf3\xa5\xb0\x64\x30\x63\x52\xcf\x36\x87\x30\x61\x21\x6c\x56\x94\x62\xd3\xc6\xc3\x0d\x14\x35\x16\x0f\x01\x74\x45\x36\x78\x04\x45\x1f\x7b\x00\xb4\xd1\x6b\x0c\xe0\xec\x68\x5c\x92\x3d\x97\x9d\xc1\x72\x49\x2a\xba\xc7\x39\x45\xb7\xd1\xe4\x2b\x9f\xc2\x6a\x01\x3f\x6a\x84\xca\x19\x23\xa7\x56\x28\x63\x02\x6b\x20\xc8\x62\xeb\x3d\xda\xd8\x41\x86\x7a\x5b\x55\xa6\x3b\x22\x01\x61\xb7\x25\xb2\xad\x2e\x1e\xd2\x72\xdb\x8a\x4a\x4b\x4a\x97\x4b\xd0\x11\x1b\x8a\xf5\x40\x2d\xb7\xad\xd1\x85\x8a\x28\xd9\x62\x63\x2d\x3c\x39\x45\x76\xea\x09\x87\x79\x82\xec\xdd\x73\xe8\xbb\x17\xd8\x44\xf7\xd8\xb8\x5d\x87\xcc\xd4\xca\xbb\x66\xd0\x23\xb0\xc1\xb8\x78\x06\xad\x51\x05\x79\xa2\x23\xa8\xe8\xda\xff\xad\x16\xcd\x44\x2b\xab\x1d\x55\xa2\x81\x12\x0d\x4e\x7d\x11\x0c\x3a\x99\x03\xbb\x74\x26\x36\x75\xaa\x06\x73\x06\x36\xed\x29\xe9\x48\xa7\x28\x35\x68\x61\x46\xdf\x2a\x37\x9c\x1b\x06\xed\x7d\xac\x49\xe7\x27\xb4\x43\x8d\x39\x28\xb1\xd2\x16\x4b\xd8\x3b\x5f\x42\xac\x55\xa4\x37\xe8\x43\x2f\xc0\x49\x43\x6a\xbb\xd4\xbd\x77\x10\x0f\x2d\x42\x38\x04\x0a\xcc\xa8\x51\x37\xad\xf3\x54\x62\x95\x36\xd8\xaa\x58\x77\x27\x37\x87\x3b\x21\xdd\x0d\x69\x10\xd5\x03\x06\x50\xcc\x09\xc4\x7a\xc6\x45\xa2\x62\xa4\xf4\x0a\xa4\x0a\x9f\xb0\xd8\x46\xc9\x1e\x66\x53\x51\xac\xf3\x68\x14\x65\xcc\x28\xbc\x64\x1b\xfe\x08\xb1\x34\x3a\x5f\x19\xe7\xda\xb0\x6c\x75\x28\xfe\xe8\x4c\x4a\x55\x08\x18\x07\x86\xdc\x39\x73\x94\x41\xda\xc7\x51\x16\x2e\xb1\xa3\x1c\xda\x1d\xa3\x96\xba\x88\x47\xc5\x77\x58\x44\xe7\x8f\x9b\x79\x68\xf2\x5f\x78\xd2\x50\x74\x8e\xd0\xbd\xb2\xa5\x6b\x8e\x1a\x8a\xf9\xf6\xfe\x18\xc3\x5e\x1f\x57\x11\x6a\x34\xe6\x35\x06\xee\x19\xdf\xa5\x92\xb8\x1f\x50\xce\x51\xef\xa3\x5c\x92\xf2\xe7\x86\xae\x40\xc1\x1c\x6e\x9f\x57\x3b\x55\x9a\xab\x26\x15\x70\x99\x64\x3f\x0b\xbd\x1d\xbb\x45\x5f\x8b\x17\xbf\x83\x1c\xf7\x0e\xd0\x60\x83\x36\x86\x9f\xd5\x0c\x10\xb9\x80\xe4\xfc\x99\xc3\x05\xac\xe1\x7c\xd4\xb8\x81\xa8\x1b\x0c\x83\xe6\xb0\x57\x13\xb1\x9c\x75\x7f\xdf\xab\xf6\x77\xd5\xbe\x26\x7f\x3e\x69\x59\xa4\x07\xba\xe6\xa6\x64\x18\xbc\x1d\xdb\x0b\x21\x58\xfd\x0c\x60\x14\xef\xe8\x17\x83\x74\x2e\xf2\xe4\x11\xbf\x1b\x7d\xc9\xe0\xdd\x84\xab\x10\xbe\x77\xaf\xf1\xb9\x1d\x7a\x98\xc1\x13\x1c\x88\x89\x7e\x9e\x26\x2a\x27\x47\x52\x76\x66\x3d\x6e\x5d\x94\x88\xce\xe1\x47\xd7\x20\xe8\x9d\x8a\xda\x59\xe9\x0f\x34\xec\xb6\x28\xcd\x82\x07\x3b\x85\x88\xdf\xbd\xd2\xf6\x55\x15\xd1\xf3\x1c\xe2\xee\x55\xe3\x04\x8d\x83\xf5\x80\x28\x93\x40\xc1\x13\xd3\x32\x58\x77\x4f\x29\xb7\xae\x1c\x36\xd0\xfd\x21\xdb\xd9\xa3\x35\x23\xc2\x86\xcd\x26\x3f\x73\x3d\x58\x7f\xce\xdf\x17\x22\x43\x8d\x6f\x2d\x3a\x84\x99\xe5\x78\x2a\x27\x19\x14\xb5\xb2\xf7\x08\x33\xf1\xba\x9f\xdf\x22\x45\xa1\x94\x21\x1e\x20\x63\x52\xc6\x5c\x62\xf5\x73\xc9\x9d\xf2\x9f\x07\xe1\x23\xb2\xa7\xfc\x7f\x5c\x20\x4e\xf9\x2d\x9b\x24\xa4\x71\x71\x18\x98\xe8\x1c\xbb\xd9\xfe\xc1\xb5\x1a\x4b\x19\x3b\x95\xa2\xd6\xc4\xa5\xfa\x0b\x63\x38\x65\xd7\xb0\x9e\xe8\xdd\x4c\x23\x42\x9f\xc9\xc2\x02\x49\xb7\xf8\x64\xaf\x00\xce\x7b\x5d\xb2\xd7\x7c\xb4\x85\xe7\x4a\xe1\x5c\x28\xb1\x7f\xda\x29\xaf\x69\xe2\x75\xfb\x04\xc1\xbd\x79\xc3\x5b\xd2\x68\x1a\x1f\xcc\x39\xbc\x81\x8d\x58\x38\x00\x33\x7b\x9a\x0a\xbb\x7d\xc1\x9e\xfe\xc4\xce\x2b\x92\x4f\x2d\x3e\xc2\x8c\xff\x29\xfe\xe6\xe2\xc1\x47\xda\x91\xe8\x11\x1f\xc1\xba\xc8\xde\x51\xc3\xe3\xa6\x0d\x8d\xb2\xba\xdd\x1a\x49\x46\x8e\x24\x75\xf3\x54\x90\x0e\x4d\x2e\x5f\x13\x20\xa2\xda\x1e\x8a\x91\xfe\xea\xbd\x3a\x88\x9b\xb4\x7c\xa9\x07\x04\x3a\x4d\xca\xf3\xa1\x89\xd0\x72\x82\xe5\xf3\xb2\xc8\x0f\x12\xdb\xae\x86\x40\x53\x6d\x81\x22\xb4\xa1\xfd\x12\xc3\xb5\x8c\xa0\xfe\x28\x68\x09\xc5\xa2\x2b\xcd\xff\x4b\xd3\x50\xae\x44\x6a\xa6\xfa\x96\xf0\xd9\x45\x90\xd3\x2f\x0c\x2a\xbb\xa4\x30\x91\x37\x5f\x6e\xbf\x64\x10\x5c\x83\xb5\xdb\x43\x43\x1a\x23\xdd\x0c\x98\x35\x65\x56\x89\xda\x31\x43\x93\x93\x2b\xa1\x5c\x43\xb6\xc3\x22\x39\xb9\x92\x89\x79\xcd\x83\x22\x6b\x94\x7f\x80\xd5\x02\xfe\x41\xbf\xa3\xd1\x8b\x55\x72\x22\xc7\x4c\x3e\xae\x16\xf0\x77\xdd\xf9\x2a\x74\x9a\x77\xa0\x6d\xe5\xc6\x1d\x6c\x6c\x2b\x24\xbc\x66\xf8\x53\x86\x1f\x8e\x6d\xc3\x65\xc0\xb8\x3b\x2c\x52\xd5\xb6\x68\x4b\xd8\xc0\x29\x59\x06\x1b\xd8\xd7\xb4\xcc\x24\x27\xdc\x45\x57\x0b\x86\x65\x84\xc5\x0a\x4e\x89\x85\xa4\x3c\xee\xd0\x07\xce\x3c\x2e\x81\x8a\x4c\x8a\x92\xf7\xfd\xc9\x69\xba\x97\xdc\xf0\xbd\xe3\x1b\x45\x83\xef\x1d\xdf\xba\xb8\x78\x0c\x5b\x43\xb7\x1f\x5d\xc1\x0d\xaf\x80\x67\xe2\x26\x5f\x53\xe4\xac\x1c\x5d\x0d\xf6\x3a\xa0\x50\x06\xf9\x25\xdc\x76\x8b\xa2\x0a\x70\x77\xc3\xd4\x3b\x6e\x80\x13\x95\xdd\x35\x47\x54\xc1\x1c\x6e\xfa\xa6\xb7\x5a\xc0\xbf\x6a\xb4\x13\x83\x2b\xe7\x61\x4f\xaf\x0e\x6e\x0b\xa5\xb3\x7f\x89\x60\x91\xd0\x8d\xa1\xd9\xa7\x2b\x39\x60\x66\x19\xe0\x07\xe0\x35\x6c\x46\x70\x29\x2c\xd7\xd0\x10\x08\xba\x00\xda\x7a\x44\x1a\x77\x68\xe9\xea\xc2\x3b\xf7\x0d\x4f\xb4\xc6\x95\xf0\x1f\xf4\xee\x46\x56\x06\xbd\xd3\xc1\x79\xe1\x69\x7a\xae\x29\x4f\x92\xc1\xfb\x71\x26\x12\x35\x1d\x69\xab\x05\x5c\x51\x1c\x95\xf1\xa8\xca\xc3\xb0\x4b\xb3\xf2\xeb\x17\x72\x57\x5d\xf1\x66\x70\xf5\x82\xc2\x1b\xc5\x15\xac\xe1\x7d\xd7\x18\x9d\x67\xbe\xeb\x17\x00\xef\xfb\xf2\xcf\x40\xe5\x61\x5c\x63\xe6\x9c\x72\x6f\x19\x22\x3d\x87\x05\x27\x14\xda\xbe\xe7\x64\xc0\x7d\x65\x82\xc4\xf6\x2d\xc7\x45\xa1\x5f\x20\xe8\x34\x2d\xdf\x61\x5f\x82\xcb\x1d\x5b\x06\x90\x41\xe5\x53\xa9\x86\x99\xc8\xaf\x9f\xdf\x15\xc9\xca\xcd\xb8\x13\x48\x72\x5f\xfe\x37\x00\x00\xff\xff\xa0\x3f\xea\x82\xe0\x0f\x00\x00")

func stdlibStd_libPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStd_libPisc,
		"stdlib/std_lib.pisc",
	)
}

func stdlibStd_libPisc() (*asset, error) {
	bytes, err := stdlibStd_libPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/std_lib.pisc", size: 4064, mode: os.FileMode(420), modTime: time.Unix(1488368379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStringsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x3d\x6f\xdb\x30\x10\x9d\xa3\x5f\xf1\x0a\x64\x88\x92\xd2\xe9\xec\x00\x0e\x82\xb4\x43\x26\x0f\xe9\x66\x18\x20\x4d\x9d\x23\xa6\x12\x29\x93\x47\xbb\xfe\xf7\xc5\xe9\xc3\x56\x3b\x75\x13\x4f\xef\xde\x7b\xf7\xee\x1e\xef\x51\xbc\x73\x74\xfe\x23\x2d\x3a\x97\x6c\x31\xbe\x50\x1b\x5f\x35\xf2\x71\x0a\xb1\x4a\x30\xbe\x42\xca\xb6\x2e\xee\x1f\x8b\x62\xf9\x7d\xfd\x0a\x1b\xbc\x35\x8c\x3b\x18\xec\xa0\x14\x2c\x4a\xbc\xf6\x35\xf2\x86\x09\x5c\x13\x38\x74\xe0\x53\x40\x1a\x14\x10\x7c\x5f\x4e\x6c\xec\x2f\x3c\x0d\x3c\xab\xe1\x67\x4f\xa4\x94\x40\x07\xa2\x23\x45\x86\xf1\xe7\x11\x7d\x34\x4d\x26\x38\xcf\x01\x66\xe4\x9b\x18\x86\xd7\xca\x79\x71\x23\xfd\x4a\x09\xf0\x0b\x4a\xbc\x30\x53\xdb\x31\x38\x88\xdf\x81\x72\xea\x16\x26\x2f\x40\xfa\xa0\x38\xe3\x52\x9f\xc1\x79\xdc\xe1\x48\x16\x89\xba\xab\xa9\x9f\x39\x7a\x18\xa9\x73\x88\xff\x58\xd9\x9d\xa1\xc7\x49\x74\x1f\x56\x4e\x52\x96\x7e\xe7\xb1\x23\x3e\x11\x79\x98\xa6\xe9\x03\xa0\x86\x5a\xf2\x9c\x10\xf6\xd0\x47\xb2\x7a\x2e\x9f\xba\xc6\x4d\x93\x8c\xfa\x62\xa5\xc4\x7b\xff\xe3\x22\x39\x1a\x18\xed\x0c\x7a\x3a\x51\xa7\x61\x12\x0c\x2a\x72\x8d\x6b\x89\xff\x9e\x4d\xd2\x38\x3f\x5f\x73\x7a\x46\x89\xb7\x04\xae\x5d\x9a\x78\x47\xc8\xbc\xe9\x70\x5d\xb3\x34\xbc\xc4\xff\x58\x2f\x1d\xb2\x69\xe6\x34\xab\x98\x3d\xa9\x48\xa6\xa2\x78\x35\x10\x76\x9f\xb2\xef\x48\x72\x33\x06\x73\xcc\x3e\x86\xf6\x32\xee\x57\x24\x1a\x54\xf5\xe6\x6d\xbd\xd5\xa8\x82\x4d\xd8\x87\x88\x36\x44\x39\x8c\x7d\x98\xb4\xc8\xd8\x5a\xd9\xda\x4c\x2a\x87\x1c\x58\xa4\x16\x0b\x94\xf8\xf1\x9b\x6c\x66\x82\x96\xaa\xee\x09\x04\x0f\xc1\x1b\xcb\x14\xef\xc4\x42\x29\x5b\xd3\x89\xa3\x6c\xa6\x58\xf6\x29\xd8\x90\x2f\x17\xd6\xb3\x2b\x05\x9f\xdb\xb5\xb5\x39\x26\x94\x58\x3a\xef\x29\x16\x37\xdf\xb0\x74\xc5\xcd\x06\xb7\xfd\x7b\x0a\x70\x83\x87\x07\x87\x2d\x4e\x35\x79\x6c\x67\x1e\x8b\x9b\x5b\x57\x3c\x15\x7f\x02\x00\x00\xff\xff\x6d\x8f\xf6\x82\x89\x03\x00\x00")

func stdlibStringsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStringsPisc,
		"stdlib/strings.pisc",
	)
}

func stdlibStringsPisc() (*asset, error) {
	bytes, err := stdlibStringsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/strings.pisc", size: 905, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibSymbolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\x0e\x82\x30\x10\xc6\xf1\xbd\x4f\xf1\x1f\x81\x04\xd9\xc5\x48\x0c\xee\x0e\x3e\xc1\xa1\x97\x48\x82\x45\x68\x1b\xe3\xdb\x9b\x4a\x43\x18\x1c\xdb\xfb\x7e\xf7\x5d\x55\x98\xeb\xe7\xd9\x8d\x83\xdb\xbd\x7a\x77\x33\x45\x65\xf6\xe7\x4b\xcb\xc1\xfd\x7e\x8f\x64\x94\x25\x39\xed\xac\xe2\x15\x21\xd8\x7e\x0a\xca\x32\xa6\x5e\xd2\xf1\x55\x5a\x9d\xc8\x10\x3a\x22\x69\xc8\x39\xcd\x8a\x7f\xa8\x53\xfc\x7b\x4c\xc4\x61\x47\x8f\x4e\x41\x06\xa8\xcd\xc6\xaf\x7c\xa3\x05\xb1\x77\xba\x94\x4f\x1b\x9a\x58\xfb\xdf\xac\x87\xc4\x92\xda\x7c\x03\x00\x00\xff\xff\x27\x8e\xbf\xf1\xde\x00\x00\x00")

func stdlibSymbolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibSymbolsPisc,
		"stdlib/symbols.pisc",
	)
}

func stdlibSymbolsPisc() (*asset, error) {
	bytes, err := stdlibSymbolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/symbols.pisc", size: 222, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibVectorsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xc1\x4e\xdb\x40\x10\x3d\x7b\xbf\xe2\x09\xe5\x40\x68\x4d\x1a\x73\x33\x15\x52\x55\xaa\x1e\x5b\x51\x89\x8b\x95\x83\x49\x26\x65\x55\x67\xed\x7a\x27\x4e\xf8\xfb\x6a\xc6\x6b\x3b\x0e\x09\x9c\x7a\x82\x9d\x99\xf7\xc6\xfb\xde\xec\x64\x76\x85\x47\x5a\x72\x59\x7b\xe4\x6e\x05\x7e\x26\x5b\x63\xcb\xb6\xb0\x6c\xc9\xe3\x6a\x66\x4c\x7a\xff\xe3\x2b\x1a\x5a\xc6\x9e\x38\xce\x19\x97\x72\x40\x93\x17\xb0\xab\x3d\xe2\x18\x54\xd0\x06\x53\xfc\x22\x96\x0c\x97\x35\x72\xd6\x1c\x97\x52\xb6\x25\xdc\x0e\x24\x3d\xc1\x18\xfc\x9d\x58\xff\x25\xc7\x8a\x76\x2b\xda\x77\xb0\xcf\x2d\xeb\x1d\x2e\x05\x10\x5a\x4c\x71\xd1\xc5\x2f\x40\x7b\xa6\xda\xc5\xcb\xbc\x28\x0e\x7b\x51\xbe\x7c\x0e\xdd\xfe\x6e\x4b\x16\xf4\xf5\xb5\x20\xbb\xe4\x31\xd2\x9c\x69\xf8\x7f\xba\x0d\x9a\x54\x15\xb9\x55\xc0\xaa\x20\x71\x0c\x38\xda\x89\x35\x1d\x43\x5b\x74\x96\xa3\xaa\xe9\x04\xc9\x11\x47\x28\x3a\x4f\x52\x56\x4f\xf9\xf2\x4f\x20\x09\x77\x57\xae\x9e\xa1\xad\x78\x8b\x61\x5d\x97\x8e\x4f\x50\x0c\x0c\x5a\xf1\x4a\xfb\xf4\xe7\xc3\x37\x64\x8b\xf1\x78\x4c\xe1\xb9\xb6\xee\xf7\x9d\x75\xdc\xcd\x8f\xd4\x22\x09\x73\x70\x89\x1c\x4f\x83\x4d\xbd\x75\x09\x32\xf8\x5d\x5e\x8d\xc4\x59\x80\xed\x86\xbc\x32\xc8\x17\x8b\x2b\x89\x34\x9c\xa3\x49\x7a\xd7\x9a\x1b\x4c\xf1\xa5\xaa\x0a\x79\x01\xb9\x86\x73\xb6\xa5\x93\x79\x56\x93\xc3\xa0\xee\xac\x27\x54\xb9\xad\x61\x9d\x50\xc8\x03\x6a\x92\x8f\x52\x56\x93\xdf\x16\xac\xf1\x1b\x91\xe7\xad\x4e\x26\x4a\xf5\x9c\x36\x09\xd2\x66\x6e\xa2\x4f\x48\x6d\x7f\x11\x13\x4d\x9a\x04\x05\x39\x4c\x9a\xb9\xfe\xdd\x58\x87\xcc\x44\x91\x06\x26\xb6\x53\xa5\x8d\x24\x07\x11\x65\x1d\x46\xc7\x44\x51\x86\x39\x3e\x60\x81\x49\x6a\x4d\x74\x2c\x86\xaf\x8a\xfc\xc0\x37\xcb\xb4\xf1\x98\xe2\x7e\xbb\xa9\x64\x2f\x60\x59\x3a\x26\xc7\x1e\xe5\x5a\xcf\xc1\x80\xd2\x71\xa9\x67\xcf\x32\x3a\x72\xd9\x53\x4c\xd7\xfa\x16\x32\x2c\x86\xb7\x72\x7b\xb0\x5b\x6a\x6a\xa8\xf6\x34\x80\x42\xa0\x75\xf5\xa1\x3d\x88\x1b\xa1\xab\xb4\x79\x1f\x67\xa2\xd5\xb6\x42\x2a\x07\x51\x2e\x95\x19\x10\x75\x8d\x2a\x11\xab\x12\xaa\xcc\x44\x32\x09\x66\xc8\x44\xc7\x89\x00\x06\x1d\xd3\x7d\x1f\x93\xb2\x2e\xfa\xd2\x47\x5f\xba\xe2\xb0\x21\xa5\x61\x9f\xdc\x0f\xa8\x71\xfa\xe8\x13\x4e\x9a\x63\x94\xc4\xe8\xc4\x0b\xc3\xda\x16\x4c\xf5\xd1\x96\x69\x83\xb4\x7a\x6c\xef\xdc\x3f\x81\xd4\xd1\x4e\xd0\x3a\x5e\x06\x19\x44\x0c\x05\x65\x98\xb4\xb9\xe1\x89\x84\x1d\x14\x30\x58\x48\x79\x5d\x56\x58\xc0\xae\x0f\x4c\x33\x01\x68\xc4\xbd\xd9\x15\x7a\x03\xa5\xf8\xe8\xe5\x07\xaa\x29\xee\x85\x48\x46\xa4\x2d\x18\xcf\xcf\xad\xfc\xc8\xa4\xef\x72\x8c\x96\x8b\x7e\xd9\x89\x0f\x18\x2f\xaf\xd7\xfd\x35\xff\x66\xfb\x33\x0c\x87\xcb\xb1\x6d\xfe\x2f\x00\x00\xff\xff\xeb\x99\x7f\x22\x39\x07\x00\x00")

func stdlibVectorsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibVectorsPisc,
		"stdlib/vectors.pisc",
	)
}

func stdlibVectorsPisc() (*asset, error) {
	bytes, err := stdlibVectorsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/vectors.pisc", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibWithPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xcf\xf1\x53\x8c\x4a\x0f\x25\xc2\xcd\x3d\x45\x08\x09\x71\xe0\x82\x10\x57\x84\xd0\xc6\x31\xb1\x8b\x1b\x87\x78\x5b\xbf\x3e\x5a\x97\x22\xfe\x8e\xab\xf1\x7c\x33\xe3\xa6\x46\xf6\xec\xa8\x0b\x16\xb1\xdb\x5a\xc3\x09\x75\xa3\x54\xfb\xf0\x78\x8b\x6b\xac\x90\xe3\xdc\xdf\xd3\xce\x42\x6b\xac\xd7\x38\xc7\xe2\x45\x0c\x0b\x0c\x96\x75\x88\x86\x02\x52\xa6\x09\xbd\x37\xac\x07\xcb\x30\x14\x02\x36\x4a\xb5\x05\x8c\x95\x60\xf1\xbe\x8f\xfc\x45\x68\xcb\xd5\xc6\x6e\xab\xaa\x4b\xf1\x5d\xa1\xcd\x07\x9a\x55\xb5\x2c\xca\x29\x41\x0e\xed\x28\xe9\x03\xcd\x78\xc2\x3f\xa2\x74\x10\xb1\xd8\xf1\x8c\xec\xec\xa8\xaa\xa6\xc6\xdd\x2b\xd8\xf9\x74\xcc\x75\x94\x50\x5c\x48\x96\x2f\x40\xd3\x64\xc7\x1e\x9e\xc1\x11\x84\xc4\x64\xde\x64\xf3\xaf\xf4\xe5\xa9\xb7\x4e\xc7\x14\x55\x9d\xe1\x46\xc6\x95\x67\xfb\xe4\xc7\xe1\x13\xbb\xb3\x4c\xdf\xfa\xcb\x0f\xfc\xa1\x95\x86\x3f\x70\x1b\xf5\x11\x00\x00\xff\xff\x81\x99\x2d\xf3\x7d\x01\x00\x00")

func stdlibWithPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibWithPisc,
		"stdlib/with.pisc",
	)
}

func stdlibWithPisc() (*asset, error) {
	bytes, err := stdlibWithPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/with.pisc", size: 381, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stdlib/bools.pisc": stdlibBoolsPisc,
	"stdlib/debug.pisc": stdlibDebugPisc,
	"stdlib/dicts.pisc": stdlibDictsPisc,
	"stdlib/io.pisc": stdlibIoPisc,
	"stdlib/locals.pisc": stdlibLocalsPisc,
	"stdlib/loops.pisc": stdlibLoopsPisc,
	"stdlib/math.pisc": stdlibMathPisc,
	"stdlib/random.pisc": stdlibRandomPisc,
	"stdlib/shell.pisc": stdlibShellPisc,
	"stdlib/std_lib.pisc": stdlibStd_libPisc,
	"stdlib/strings.pisc": stdlibStringsPisc,
	"stdlib/symbols.pisc": stdlibSymbolsPisc,
	"stdlib/vectors.pisc": stdlibVectorsPisc,
	"stdlib/with.pisc": stdlibWithPisc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"stdlib": &bintree{nil, map[string]*bintree{
		"bools.pisc": &bintree{stdlibBoolsPisc, map[string]*bintree{}},
		"debug.pisc": &bintree{stdlibDebugPisc, map[string]*bintree{}},
		"dicts.pisc": &bintree{stdlibDictsPisc, map[string]*bintree{}},
		"io.pisc": &bintree{stdlibIoPisc, map[string]*bintree{}},
		"locals.pisc": &bintree{stdlibLocalsPisc, map[string]*bintree{}},
		"loops.pisc": &bintree{stdlibLoopsPisc, map[string]*bintree{}},
		"math.pisc": &bintree{stdlibMathPisc, map[string]*bintree{}},
		"random.pisc": &bintree{stdlibRandomPisc, map[string]*bintree{}},
		"shell.pisc": &bintree{stdlibShellPisc, map[string]*bintree{}},
		"std_lib.pisc": &bintree{stdlibStd_libPisc, map[string]*bintree{}},
		"strings.pisc": &bintree{stdlibStringsPisc, map[string]*bintree{}},
		"symbols.pisc": &bintree{stdlibSymbolsPisc, map[string]*bintree{}},
		"vectors.pisc": &bintree{stdlibVectorsPisc, map[string]*bintree{}},
		"with.pisc": &bintree{stdlibWithPisc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

