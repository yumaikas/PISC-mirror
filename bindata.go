// Code generated by go-bindata.
// sources:
// stdlib/bools.pisc
// stdlib/debug.pisc
// stdlib/dicts.pisc
// stdlib/io.pisc
// stdlib/locals.pisc
// stdlib/loops.pisc
// stdlib/math.pisc
// stdlib/random.pisc
// stdlib/shell.pisc
// stdlib/std_lib.pisc
// stdlib/strings.pisc
// stdlib/symbols.pisc
// stdlib/types.pisc
// stdlib/vectors.pisc
// stdlib/with.pisc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stdlibBoolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\xe2\x4a\xca\xcf\xcf\x29\xd6\x2b\xc8\x2c\x4e\xe6\xd2\xd2\xe7\xe2\xb2\x72\xf1\x77\x56\x48\xcc\x4b\x51\xd0\x50\xa8\x50\xa8\x54\xd0\xd5\x55\xb0\x57\xd0\x54\x50\x70\xca\xcf\xcf\x49\x4d\xcc\x03\xcb\x28\x58\x43\x54\xe5\x17\xe1\x50\x94\x5f\x04\x57\x93\x97\x5f\x02\x56\xa4\xab\xab\xa0\x58\x81\xac\x06\x24\xa1\x60\x0d\x08\x00\x00\xff\xff\x66\x06\xc1\xea\x80\x00\x00\x00")

func stdlibBoolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibBoolsPisc,
		"stdlib/bools.pisc",
	)
}

func stdlibBoolsPisc() (*asset, error) {
	bytes, err := stdlibBoolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/bools.pisc", size: 128, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDebugPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\xc6\xf1\xbd\x4f\xf1\xd1\x49\x87\xbc\x40\x8b\x2e\xba\x3b\x38\x8a\x43\xb8\x9e\x26\x10\x72\xe1\x2e\x1a\x7d\x7b\x91\x5a\x70\xe8\xf4\x0d\x7f\xbe\x5f\x37\x1c\x4f\x07\x58\x90\xe6\x8a\xf2\x2d\xbe\x5c\x13\x9d\x0c\x1b\x38\x87\x2d\xce\x41\x9a\xa1\x85\x48\x01\x73\xc7\xdc\xbd\x32\xe8\xa1\xca\xb9\xa6\x37\x92\xf8\x89\x27\x8c\xdd\x1f\x97\x84\x7c\x5a\x85\x7e\xe5\x4b\xc4\xbc\x28\x30\x92\xc2\x18\xbb\x61\xed\x7e\x01\xe4\xc9\x8a\xbd\x55\x8d\xf9\x8e\x1e\x3b\xf4\xb0\xe6\x0b\x48\x32\xf9\xba\x4c\x8e\x05\x45\x63\xae\xb8\x82\x3d\x85\xd9\xc1\x88\x4f\x00\x00\x00\xff\xff\x97\x3e\x7b\x96\xe9\x00\x00\x00")

func stdlibDebugPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDebugPisc,
		"stdlib/debug.pisc",
	)
}

func stdlibDebugPisc() (*asset, error) {
	bytes, err := stdlibDebugPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/debug.pisc", size: 233, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDictsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x06\x41\x3e\x20\x36\x3e\xda\x77\x2b\x88\x0e\x4d\xd3\x63\x82\xb6\x37\x21\x07\x86\x5a\x5b\x84\x65\x52\x26\x29\x07\x42\xd1\x77\x2f\xf8\x23\x59\x91\x75\x32\x4d\x2d\x67\x67\x86\xb3\xdc\xae\xf1\x2c\x85\x93\x5a\x71\x23\xc9\x82\xab\x0a\xae\x26\x69\xd0\x39\xd9\x48\xe7\xf7\xd6\xdb\x2c\xdb\x3d\xbf\x7e\xc3\x63\x25\x85\x7b\xc2\x03\x18\x83\x5f\x62\x05\xbc\x35\x5c\x10\xb8\x02\x9d\x5a\xd7\x87\xed\x00\xd6\x43\x2b\x8f\x04\xeb\xb8\x38\x02\x79\x96\x6d\xd7\x08\x30\xbe\x86\x1d\xc8\xb1\x13\x57\x3d\x1e\x22\xd4\xb9\xd3\xce\xe3\x7a\xcc\x1f\xe4\xc0\x71\xe1\x4d\x47\xd8\x1b\x7d\x0a\x38\x13\xe4\xbd\x36\x20\x2e\x6a\x7c\x6a\x53\x41\x2a\xf0\x70\x9c\xfb\xef\x40\x1e\x08\x7b\x61\x9a\x2c\x5c\x2d\x6d\xec\x50\xf3\x0b\xc5\xbf\x47\xea\x0b\xac\xb7\x48\xb2\x02\x1f\x4b\x6e\xa0\x12\x1b\x1f\xa9\x9f\xea\xfc\x45\x2e\xd0\xf0\xdb\x4e\x87\x65\xa8\xfb\x1f\x0d\xf1\x8b\x54\x87\x91\xe4\xad\xf0\x2f\xaa\x87\x2e\x09\x3f\x36\x4b\xa2\x47\xd4\x45\xd9\x01\x2a\xe2\xc8\x3d\x0b\x7e\xb3\xd8\xe4\x01\x9b\xcd\x40\xb6\xc0\x2a\xb6\x8e\x15\x05\xca\xe1\xde\xde\xf1\x59\x93\x42\x3e\x01\x51\xda\xb1\xc0\x66\x8a\x80\x15\xaa\xae\x85\xeb\x5b\xd2\x7b\xdc\x8d\xf9\xe8\xef\x60\x9d\x61\x8a\xce\x8b\x98\xa4\x6c\x67\x88\x4d\x08\xcf\x41\x17\x98\xdf\x10\x89\x39\x79\x21\x27\xea\x68\xc2\x04\x6f\xbd\xcd\xb0\x7b\xfb\xf9\x1d\xec\xe9\xd6\xc5\xa1\x81\xb7\x38\x1f\xeb\x96\x0a\x13\x9d\x32\xa8\xdc\x55\x78\x47\x25\xdb\xeb\xe1\xfb\x2a\x91\x98\x5e\xb9\x8f\x1c\xc7\x41\x5e\x48\x45\x46\x4a\x7b\x46\x29\x02\x1f\x9d\x0b\x31\xa0\xf9\x95\x7d\x89\xc2\x48\xff\xf1\x91\x4d\xb2\x36\x4f\x5a\x39\x32\xf3\x1b\x91\xdc\x84\xa2\x0d\x14\xa3\x55\x09\x6e\x09\x6d\x75\xad\x4e\xa3\x17\x4b\xef\x17\x6b\xfd\x34\x36\x5a\x24\x73\xe2\xa9\x61\x8c\x82\x0f\x7e\xc0\x95\x33\x31\xfb\xc6\x07\x74\x98\xc1\x4e\x49\xa1\x2b\x82\xa8\xb9\xe1\xc2\x91\xf1\x03\x19\xc6\xcc\x3a\xe3\xe7\xe2\x7a\x6b\xff\xa5\xde\xc5\x4c\x72\xb9\x90\x9d\xa8\xb8\xfc\xe2\x42\x99\x84\xdb\x4f\xde\x22\xfd\x8c\x7c\xdf\x03\x1d\xe6\x69\x8c\xfe\x8c\x31\x28\x66\x31\x08\xeb\x62\x30\xa9\xe6\x96\x85\x37\x61\x3c\xb1\x99\xd5\x6f\x36\xd3\x78\x09\xde\x34\xd1\xd5\x6c\x17\x5e\x9e\xa7\x34\x43\xc3\x23\x96\x74\x8d\xae\xda\x78\x24\xcd\x4c\x79\x43\x3a\x59\x6f\x74\x3b\xd4\xe7\x59\x72\xff\xf7\xeb\xf3\xeb\x0e\x2f\xf2\xd0\x19\x82\xee\xfc\xc3\x28\xf7\xd1\x5f\xc1\x15\x3e\x08\x27\x5e\x11\x4e\xda\x10\x5a\xa3\x5b\x32\xd0\x06\x4a\xbb\x8d\x37\x3e\x4d\xfa\x91\x7a\x3b\x28\x62\xcc\x8b\xb2\x17\x12\x58\x61\x77\xc6\x1f\xdc\x9f\xd1\x76\xb6\x66\xd7\xd2\xbf\xc8\xff\x05\x00\x00\xff\xff\x85\x2a\xec\x21\x19\x06\x00\x00")

func stdlibDictsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDictsPisc,
		"stdlib/dicts.pisc",
	)
}

func stdlibDictsPisc() (*asset, error) {
	bytes, err := stdlibDictsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/dicts.pisc", size: 1561, mode: os.FileMode(420), modTime: time.Unix(1489689113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibIoPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xf3\x36\x0c\x3d\xd7\xbf\xe2\x01\x19\x90\xe6\x43\x9c\xef\x3a\xb4\xc0\x86\x21\x6d\x80\x5e\x96\x61\xeb\xb0\x4b\x81\x55\xb6\xe9\x58\x83\x22\x79\x12\xd5\xc0\xff\x7e\x20\x6d\x27\x59\xbb\x0e\xdf\x4d\x96\xc8\xf7\x1e\xc9\x47\x7f\xfd\x82\xe7\x8e\xf0\xb4\x87\xb3\x55\x34\xd1\x52\x42\x68\xf1\xcb\xd3\x6f\x5b\x7c\xf9\x5a\x14\xfa\x6e\x13\x9a\x50\xc3\x26\xbf\x64\xb4\x21\xc2\x20\xf5\x54\xdb\xd6\xd6\x38\x85\xd8\x48\xe4\xdd\xc3\x7e\x2b\x30\xb7\x28\x4b\xac\x50\x2c\xf0\x2b\x99\x86\x62\x2a\x8a\x6d\x8e\x91\x3c\xbb\x61\x3d\xe2\x76\x26\x21\x92\x69\xac\x3f\xc0\xf8\x06\xa7\x68\x59\xce\xa1\xfa\x8b\x6a\x4e\xe0\xce\x30\x4c\x24\x54\x21\xfb\x06\x1c\x90\x7d\x43\xd1\x0d\x12\x74\x08\xa8\x4c\xa2\x06\x55\x6e\x6d\x98\x73\x36\x78\x34\x75\xa7\xa8\x14\x95\x80\x3b\x42\x1b\x9c\x0b\x27\xc9\x6a\xb3\xaf\xd9\x06\x9f\xe0\x82\x69\xa8\x81\xf5\x1c\x60\x39\xa1\xb1\xfa\x60\xe2\x00\xf2\x2c\xf5\xdf\x15\xc5\x62\xa1\x50\x65\x35\x30\x8d\x15\xe9\x69\x55\x48\x4d\x09\x66\xfc\x6c\x63\x38\x2a\xcf\x44\x6b\x12\x8c\x17\xe4\x35\x12\xb1\x96\x74\x79\x4d\x78\xdc\xef\xa4\x16\x8e\x99\x60\x5b\x7d\x22\xdf\x48\xb7\x55\xab\x75\x04\xab\x8d\xa9\x3b\x6a\x2e\x1a\x62\xf6\x93\x06\x3d\x5d\x34\xfc\xfe\xbc\x2b\xbf\x1f\x2f\xdf\x29\xb9\x24\x3b\x3b\x27\x27\x8e\x57\xb9\x7a\xff\x2e\x6b\x0d\x8e\xf6\x78\x14\xd9\xcb\x97\xb8\xd4\xd1\x2c\x5f\xfc\x12\xa1\x3d\xab\x55\x64\x29\x44\x31\x1f\xf7\xbb\x1f\x15\x94\x73\xf4\xe9\x7f\x2b\x93\x91\x54\x44\x7e\xae\x6f\x8d\xd6\xb8\x44\x08\xdc\x51\x3c\xd9\x44\x45\x71\x5f\x8c\x26\x0a\x3d\xf9\x52\x92\xca\xa9\xaf\xb7\xe8\x0d\x77\x42\x38\x5a\x0a\x2b\xec\x04\x73\x6e\x6c\x67\xde\x08\x06\xaf\xb5\x0b\x89\x5e\x75\x8c\xc3\x68\xa2\xda\x78\x54\x84\xda\x38\x47\x6a\x24\x0d\x51\x55\x57\x96\x9a\x04\xfa\xc6\x11\x3e\x8a\x10\x77\xfe\x4b\xc4\x74\xb1\xc2\x1f\x7a\x48\x6a\xd5\x64\x8f\xbd\xa3\x28\xb4\x7e\x16\xb6\xc6\xe8\xc3\x41\x75\x04\xef\x86\x31\x57\xbb\x9f\x10\xa2\x0c\xc5\xfa\x43\xc2\x7d\x71\x33\xd2\xea\x7b\x39\x5e\xe3\x56\x87\xa6\xeb\xa4\x54\xfa\x29\x0e\xea\x08\x86\x59\xfb\x38\xab\x99\x75\x8f\x00\xd3\xd8\xbf\x39\x7d\x0d\xd3\xf7\xe4\x75\x23\x5f\xfc\x1c\x24\x33\x9c\x71\xa5\x15\xd2\x80\x1f\xce\xda\xe4\xe6\x67\x73\xa4\xc9\x5c\xdb\xe0\x99\x3c\x27\xac\x80\x9f\x90\xd9\x3a\xcb\xc3\x79\xef\xf4\xaf\x31\xef\x7c\x3a\x1a\xe7\x34\x3f\x8d\x7b\x38\xb5\x61\x83\x87\x00\x1f\x18\x59\x8c\xe1\xe1\x4c\x3c\xd0\x14\x77\x16\xd2\x47\xfb\xf6\x67\x9f\x39\x5d\xd7\x77\x75\x6b\xd3\xfb\xf1\xea\x1f\x2a\xcb\x2f\x43\x44\xf4\xd1\x7a\x5d\xcd\x37\xe3\xf2\x0c\x8c\x93\xe5\xae\x0c\x99\xfb\xcc\xf3\xa4\xff\xce\x81\x05\x7d\xb3\xc1\xaa\xb8\xb9\x93\xcf\xe2\xe6\x83\x2d\x9a\xdc\xe3\x3b\x0d\x15\x08\x6c\xd4\x60\x62\xe5\x05\x9e\xf7\x0f\xfb\x62\x81\x09\x7c\x6c\xb0\x70\xe0\x4c\x68\xfd\x27\x7c\xf8\x0f\xc2\x69\x19\x3e\x21\xfc\x27\x00\x00\xff\xff\xb2\x42\xc8\x50\xc8\x05\x00\x00")

func stdlibIoPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibIoPisc,
		"stdlib/io.pisc",
	)
}

func stdlibIoPisc() (*asset, error) {
	bytes, err := stdlibIoPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/io.pisc", size: 1480, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLocalsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x4b\x03\x31\x10\x85\xef\xfb\x2b\x1e\x78\xe9\x16\x36\xbd\xb7\xe0\xa5\x16\x11\x04\x8b\x7b\x14\x0f\x43\x36\x71\x43\xd7\x4c\x4d\x26\xf5\xef\x4b\x92\xed\xa2\xf6\x38\xe4\x7d\xdf\xcb\xdb\xac\xf1\xcc\x9a\xa6\x08\xe7\x71\x7c\xea\xf7\x58\x6f\x9a\xe6\x0e\x3d\x43\x46\x17\xe1\x22\x68\x9a\x10\x25\x59\xab\x94\x52\xcd\xf6\xe1\x65\x8f\x68\xa4\x9b\x32\x86\x15\x2e\x34\xc1\xd3\xa7\x41\xd7\xa1\x45\x6f\xa4\x5e\xc2\xe5\x05\xbb\xa6\x22\x1f\xbf\x90\x6b\x3c\x07\x5a\x3c\x1a\x81\x8c\x26\x5f\xc9\x80\x62\x64\xed\x48\xcc\x80\x6f\x27\x23\x08\x95\xaa\xaf\xb7\xba\x88\x55\x6d\x3e\xa6\x98\xd3\x51\x48\x9f\x60\x43\xae\xb0\x1c\x30\x87\xd8\x0b\x97\x96\xf9\xae\xb1\xab\x6d\x08\x7c\xfe\xaf\xe3\x33\x68\xf6\xb0\x5d\x34\xd6\xde\x5a\x16\x8d\x21\x3d\x2e\x23\xbf\x12\x0b\xde\x70\xc2\x05\x1d\x94\xc2\x7b\xf6\x56\x4e\x29\xb4\xc0\x6b\xf2\xa0\x12\x23\x71\xec\xcb\x6f\xb3\x61\x1e\xec\x7c\x69\xd2\x29\x04\xe3\xe5\xcf\xae\xfe\x70\xd8\x16\xf0\x7e\x70\x5a\x80\xdd\x4f\x00\x00\x00\xff\xff\x93\x2f\x42\x92\xc6\x01\x00\x00")

func stdlibLocalsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLocalsPisc,
		"stdlib/locals.pisc",
	)
}

func stdlibLocalsPisc() (*asset, error) {
	bytes, err := stdlibLocalsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/locals.pisc", size: 454, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLoopsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcb\x31\x0a\x02\x31\x10\x46\xe1\x7e\x4e\xf1\x97\xeb\xc2\x66\x7b\x53\xaa\x9d\xe0\x15\x46\xe2\x80\x81\x98\x44\x67\xa2\x1e\x5f\x42\xac\xb7\x7d\x7c\x6f\x9d\xe9\x5c\x4a\x55\x57\xa3\x06\x9a\x57\xa2\xfd\xf1\x72\x80\xc5\x87\x28\x26\x64\x3c\x5b\x31\x2c\x0b\x9c\xc3\x0e\xa7\xaf\x84\x66\x02\xee\x95\x91\xff\xce\x8f\xe9\x73\x8f\x49\x30\xa1\xbe\xe4\xb6\xf9\x0d\xc8\xdd\x31\x92\x5c\xdf\xa2\x60\x63\xf8\x5f\x00\x00\x00\xff\xff\x8a\xf6\x37\x23\x8e\x00\x00\x00")

func stdlibLoopsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLoopsPisc,
		"stdlib/loops.pisc",
	)
}

func stdlibLoopsPisc() (*asset, error) {
	bytes, err := stdlibLoopsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/loops.pisc", size: 142, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibMathPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x95\x41\x6f\x9b\x4e\x10\xc5\xef\xfe\x14\xef\xf8\x4f\xfe\xb1\x12\x7c\x4c\xa4\x48\x8d\xd3\xb4\x95\xa2\xfa\x90\xdc\xa2\x4a\x5e\x60\xc0\x9b\xc2\x0e\x99\x5d\x6a\xdc\x4f\x5f\x81\x31\xde\x35\xb6\x95\x9b\x85\x7f\xef\x0d\xfb\x66\x66\xb9\x7d\x5c\xcc\x71\x9f\x72\x1d\x17\x84\xff\xd0\x60\x3a\x45\x8a\x0b\xcc\x99\x24\x21\x28\x98\xba\x8c\x49\xe0\x18\x0a\x3d\x76\x37\xe9\x54\x2a\x61\xbb\x93\x6c\x70\x81\x2f\x92\x20\x61\xab\x0d\xe1\x0e\x7b\x64\xe5\x33\xdf\x37\x15\x49\xcc\x85\x4e\xa0\x8e\xe0\x56\x9b\x43\xc7\x11\x70\xce\x2f\x84\x9d\x1a\xb9\x39\x65\x72\x32\x2e\x60\xce\x19\x76\xfc\x1e\x4f\x62\x71\x3e\x3d\xaf\x63\x82\x30\x7b\x04\xe9\x22\x20\x48\x17\xda\xe4\xe0\x6c\x9f\x5f\x25\x94\x68\xab\xd9\xec\xc2\x1d\xc4\x61\xa0\xf3\x30\x9d\x33\x59\x1e\xe4\x48\x92\xf9\xe0\x57\x11\x16\x64\xb5\x49\x5c\x5b\xd4\xa3\x92\xb0\x5c\x59\x15\x54\x92\x71\x4a\x36\xa0\x13\xa2\xa6\x0a\xac\x9b\x8a\x0d\x19\xa7\xd5\x21\x35\xf3\xb1\xd7\x35\xc3\xad\x08\x15\xaf\x49\xda\x2c\x96\xcd\xd2\x87\xcb\xc8\xa7\x97\x6d\x91\x08\xd3\xe5\x15\x4a\x96\x5d\x5e\x84\x8c\x05\xb6\x54\x45\xd1\xe7\x66\x31\x78\x64\x05\xb3\xf8\x1e\x4f\xdd\x83\x4f\xa5\x9e\xab\xb2\x54\xbe\xf6\x5b\xf7\x60\x38\xfa\xeb\xe2\x71\x31\xc0\xef\x37\x3e\xf9\x7e\x83\x07\xb2\x96\x8a\x71\x50\xef\xc1\x91\x9e\xb4\x58\x87\xdf\xda\xa4\x27\x05\x05\xe7\xbe\xe2\xa7\x72\xb5\xa8\x02\xcf\x9c\x2b\xd1\x6e\x55\xe2\x0e\x7b\x32\x0a\x5e\xe3\x99\x73\xc4\xca\x12\xa2\x1b\xdf\x2e\x0a\x5a\xb5\x6c\x10\xe1\xff\xae\xcc\xf2\x0a\x71\xed\xb6\xe1\xaa\x24\xa9\x45\x39\xc2\x5a\xbb\x55\x1f\xef\x1f\x55\xd4\x64\x7d\xab\xd9\xd1\x72\x33\x1f\x89\x7d\xe4\x41\x9b\x6e\x88\xfa\xf1\x68\x1b\xd1\x0c\xf0\xc1\x96\xbf\xb4\xa3\x3b\x8a\xe3\xcc\xa6\xdb\xe3\x82\x8f\x70\x37\x5f\x3e\x6a\x25\xfd\x76\x8e\xe0\x83\xab\xe1\xb5\xbf\x16\x8e\x71\xa7\xde\xc2\x9d\xd4\x48\x6d\x82\xc5\xfa\x61\x1c\xe5\x24\xdb\x58\xbb\x28\xae\xa0\xac\x77\x9f\xf6\xc2\x4d\xd0\xd4\x85\xa4\x24\xd3\xbf\x24\x3c\x1a\x19\xce\xba\x6d\xb2\x94\xb0\x49\xb7\x53\x35\x78\x44\x63\x0f\x36\xf4\x49\x8b\xeb\xcb\x49\x3b\xed\xb7\x68\xa7\xa0\xfd\xdf\xad\x19\x4a\x72\x94\xca\xad\x06\xb1\x9d\x5c\x5e\x4f\x6e\x51\x76\x6d\x54\x88\xdb\x6a\xdd\xe0\x90\xe0\x02\xb3\xb4\xae\x70\x8f\x37\x18\x5d\xe1\x17\xde\x90\x0a\xb7\x3f\x74\xd6\x7e\x38\x50\xaa\x66\xaf\x2a\x94\xe4\x9d\x08\x7b\x59\x8f\xef\xf4\xad\xec\x5f\x00\x00\x00\xff\xff\x4f\x52\x4f\x54\xa5\x06\x00\x00")

func stdlibMathPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibMathPisc,
		"stdlib/math.pisc",
	)
}

func stdlibMathPisc() (*asset, error) {
	bytes, err := stdlibMathPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/math.pisc", size: 1701, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibRandomPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xca\xc1\x09\x80\x30\x0c\x40\xd1\x55\xfe\x51\x0f\x59\x40\xa7\x09\x49\xc0\x42\x9b\x16\xad\xba\xbe\x78\x7f\x1b\x76\xf4\x62\xc1\xc2\x13\x86\x08\x51\xa3\xb1\xe2\xf7\xa0\x46\x72\x6a\xba\x94\x9c\x5c\xaf\x0e\x5a\xf7\xdf\x89\x4e\xf6\x2f\x00\x00\xff\xff\x3c\x4d\xec\x7d\x3b\x00\x00\x00")

func stdlibRandomPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibRandomPisc,
		"stdlib/random.pisc",
	)
}

func stdlibRandomPisc() (*asset, error) {
	bytes, err := stdlibRandomPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/random.pisc", size: 59, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibShellPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\xe2\x81\xf1\x21\x7b\xa0\xe1\x5c\x19\xaf\x81\xdd\x36\x69\x73\x49\x0b\xa4\x37\x47\x28\x18\x71\x1c\x11\xa1\x49\x56\xa4\x6c\xf4\xdf\x17\x43\xd9\xb1\xdd\xf6\x20\x80\x7c\xf3\xe6\xe3\xcd\x0c\x25\x34\x7c\xc6\x35\x94\xc2\x3f\xf0\x2e\x17\xb5\x71\x9e\x32\xd6\x48\x83\x0b\x05\x2d\x76\xd4\x29\x32\x5d\x8f\x5b\x21\x34\x72\x4f\xde\xab\x6d\xb4\xa3\x27\x5c\xe3\xc7\x18\x4b\xf5\x15\xcd\x72\x47\x5d\x89\xc3\x0a\x3a\x99\xd2\xf7\x2e\x17\xd1\xac\x31\x3b\x5e\x90\xf6\xb6\xc6\x32\x29\x51\xb0\x27\x16\x5a\xe8\x34\xe6\xde\x5e\xd2\x99\x9a\x62\x7a\x31\xdd\x1b\xf2\xde\xa4\xdf\x1c\x62\xb2\x42\x34\x4b\xeb\xba\xb2\x82\x1d\x13\x74\xee\xc1\x11\xce\x34\xb4\x58\x2e\x95\xcf\x8c\x8a\xa6\xb9\x10\x27\x9a\xa6\x61\x2f\xb5\xda\x46\x4b\x90\x56\x22\x97\x41\x75\x31\x14\xe3\xc2\xb9\xfc\x35\xec\x10\x13\x5a\xb8\x0d\x7b\x9d\xf5\x43\x34\x87\x04\xb6\x26\xae\x1a\x20\xe7\x73\x89\xce\x4e\xb9\xc7\x74\x32\x1c\xb1\xae\xea\xe4\xfa\xdf\x21\xd6\xc8\x20\x17\xc7\x22\x57\xb9\x0c\x2e\xbc\x1e\xf8\xa6\xf6\x51\x3e\x87\x63\x89\x63\xad\x6b\xb9\x54\xfb\xce\x57\xd3\xd7\xff\xbe\x7d\x96\xa0\xb0\x53\xaf\x74\x30\x31\xc4\xb6\x0b\x90\xc2\x8e\xb1\x35\xd4\xec\xef\xaa\xdb\x89\xe7\xb2\xb2\x6e\xa8\xa1\x9f\x78\xdc\x58\xcc\x6f\xe4\x64\xda\x46\x1b\xcc\x96\x44\xdd\x05\xb3\x7f\x53\x2e\xb8\x82\x6b\xc4\x54\x5c\x0c\x99\x57\x61\x3e\xe7\x6d\xb8\xc2\x87\x81\x4c\x61\x19\xa5\x27\xe4\x62\x0a\xe1\xc5\x64\xd7\x65\x6c\xe2\x00\x13\xaa\x7b\x2e\x3f\x3d\x71\xa6\x16\xfa\xff\xbb\x4f\x0f\x8f\x87\xf3\xdd\xe3\x47\xd1\xc8\xe7\x22\xa1\x1f\xee\x9f\xc0\xe7\x20\xa1\xbf\xdc\x3f\x89\x46\x4a\xe8\x85\x68\x0a\x74\x20\xb2\x59\xe5\xe4\x5d\x39\xdf\x3f\xef\xc2\x31\xe6\x40\x99\x8a\xda\xc4\x41\x1d\x41\xed\x1c\x66\xfc\x31\x00\x4f\x01\xab\x7f\xb1\x86\x94\x75\xd6\x13\xca\xf6\xba\xaa\x65\x9a\x7b\x3b\xc5\x54\xd3\x28\x66\x67\x69\xd9\x65\x81\x19\xd7\xc8\x9d\x9c\xb0\x4a\x46\x8b\x7d\x4f\x81\x7d\x29\xe4\x71\xa0\x63\x9d\x3c\x94\xd3\xfd\x90\x71\x71\xca\xa7\x6f\xfe\xe0\x30\xfa\xbe\xed\x55\x44\xed\xd5\x34\x92\xf7\xb6\x71\xd3\x26\x88\xbb\xc7\xcf\xf5\x0a\x63\x26\x94\xde\x65\x94\x88\x4c\x65\x9a\x45\x9d\xa9\xc9\xf5\xb2\x77\xa5\xcf\x5d\x4c\x24\x34\x93\xd5\x64\x3c\xfc\x0f\x2e\x1e\xbb\xfc\xce\x5c\xc9\x61\x94\x8f\x9d\xf1\xb8\xfd\x15\x00\x00\xff\xff\x6a\x50\xdf\xe6\x3d\x04\x00\x00")

func stdlibShellPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibShellPisc,
		"stdlib/shell.pisc",
	)
}

func stdlibShellPisc() (*asset, error) {
	bytes, err := stdlibShellPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/shell.pisc", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1489688640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStd_libPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x57\x5f\x6f\xe3\x38\x0e\x7f\x1e\x7f\x0a\x62\xb7\xc0\x25\x99\x3a\x99\x76\xdf\xdc\x4e\x8b\xc3\xf4\x0e\x18\x60\x77\x67\xf6\xa6\xc0\x3d\x04\xc1\x55\xb1\xe9\x5a\xa8\x2c\xb9\x92\x9c\x34\xf7\xe9\x0f\x24\xfd\x2f\x9d\x6e\x76\x0f\xfb\x90\x3f\x36\xc9\xdf\x8f\xa2\x48\x8a\x5a\x2d\x92\xe4\xbe\xd2\x01\x74\x80\x58\x21\x3c\x7a\xb7\xd7\xf6\x11\x42\x54\xb6\x50\xbe\x00\xa3\xb7\x5e\xf9\x03\xb8\x12\xbe\x7e\xfe\xf6\x69\x99\x24\x8b\x55\x92\x64\xd0\x78\x6d\x23\xcc\x40\x41\x9a\x02\xcc\xe1\x26\x44\x4f\x86\x8d\xd7\xbb\xff\x34\x6d\x0c\x70\x95\x64\x77\x5f\x3e\x01\x29\xa5\x29\x44\x98\x03\x44\x50\xb6\x80\x12\x3c\x86\x06\xf3\xa8\x77\x68\x0e\xd0\xb4\xa1\x82\xe8\x5b\x14\xa1\x32\x01\xc1\xd9\xe8\xd8\x9f\x10\x55\xfe\x04\x3d\x56\x29\x58\xe5\x5f\xc4\x4a\x56\x0b\xf8\xd9\xe5\xca\xc0\x57\x8f\xa5\x7e\xc1\x00\x8b\x55\x92\x7d\xfd\xd7\x3f\xe0\x0c\x66\x60\x55\x8d\x44\xb3\x53\x06\xe6\xf0\x88\x31\x35\xac\x7c\x25\x2a\x19\xcc\x58\xd4\xab\xcd\x21\x4c\x54\x08\x9b\x89\x52\xac\x9b\x78\xb8\x85\xbc\xc2\xfc\x29\x80\x2e\xc9\x07\x8f\xa0\xe8\x63\x0f\x80\x36\x7a\x8d\x01\x9c\x1d\x9d\x4b\xb2\x63\xdb\x19\x2c\x97\x44\xd1\x3d\xce\x29\xba\xb5\xa6\xb5\xf2\x2e\xac\x16\x70\x5f\x21\x94\xce\x18\xd9\xb5\x5c\x19\x13\x98\x81\x20\xf3\xd6\x7b\xb4\xb1\x83\x0c\x55\x5b\x96\xa6\xdb\x22\x01\xe1\x65\x4b\x64\x1b\x9d\x3f\xa5\x45\xdb\x08\xa5\x25\xd2\xe5\x12\x74\xc4\x9a\x62\x3d\x48\x8b\xb6\x31\x3a\x57\x11\x25\x5b\x6c\xac\x44\x67\x4b\x91\x9d\xae\x84\xc3\x3c\x41\xf6\xee\x18\xfa\xe1\x15\x36\xc9\x3d\xd6\x6e\xd7\x21\xb3\xb4\xf4\xae\x1e\x78\x04\x36\x18\x17\xcf\xa1\x31\x2a\xa7\x95\xe8\x08\x2a\xba\xe6\xf7\x69\xd1\x4c\x58\x99\x76\xa4\x44\x03\x05\x1a\x9c\xae\x45\x30\x68\x67\x0e\xbc\xa4\x73\xf1\xa9\xa3\x1a\xdc\x19\xd4\xb4\xa7\xa4\x23\x4e\x21\x35\x68\x61\x46\xdf\x6a\x6b\x38\x37\x0c\xda\xc7\x58\x11\xe7\xcf\x68\x87\x1a\x73\x50\x60\xa9\x2d\x16\xb0\x77\xbe\x80\x58\xa9\x48\x6f\xd0\x87\xde\x80\x93\x86\x68\xbb\xd4\x7d\x74\x10\x0f\x0d\x42\x38\x04\x0a\xcc\xc8\xa8\xeb\xc6\x79\x2a\xb1\x52\x1b\x6c\x54\xac\xba\x9d\x9b\xc3\x83\x88\x1e\x86\x34\x88\xea\x09\x03\x28\xd6\x04\x52\x3d\xe7\x22\x51\x31\x52\x7a\x05\xa2\xc2\x17\xcc\xdb\x28\xd9\xc3\x6a\x2a\x8a\x77\x1e\x8d\xa2\x8c\x19\x8d\x97\xec\xc3\x8f\x70\xff\xe5\xee\x4b\x06\xbf\xb8\x1d\xf6\xa1\x89\x35\x5a\x82\x23\xbb\xce\xbd\x58\x61\xc0\x6e\x2d\xda\x4f\x4a\x16\x6a\x57\xb4\x06\x43\xf2\x43\x88\x85\xd1\xdb\x95\x71\xae\x09\xcb\x46\x87\xfc\x87\xce\x38\x55\x21\x60\x1c\x14\xb6\xce\x99\x93\x0a\xd2\x87\x4e\xaa\x70\xad\x9e\xd4\xd0\xee\x94\xb4\xd0\x79\x3c\x69\xbe\xc3\x3c\x3a\x7f\xda\xcd\x43\xbd\xfd\x83\x95\xd4\x14\xe6\x13\x72\xaf\x6c\xe1\xea\x93\x8e\xe2\xb6\x7d\x3c\xa5\xb0\xd7\xa7\x29\x42\x85\xc6\xbc\xa5\xc0\xcd\xe7\x9b\x94\x24\x37\x16\x4a\x5e\x6a\xa2\x94\x94\xd2\x47\xf8\x64\x50\xa0\x60\x0e\x77\xc7\x6d\x83\x4a\xd6\x95\x93\x52\xba\x4a\xb2\xef\x8d\x3e\x8c\x6d\xa7\x2f\xea\xcb\x3f\x83\x1c\xf7\x0e\xd0\xa0\x64\xe1\x77\x34\x03\xc4\x56\x40\xb6\xfc\x99\xc3\x25\xac\xe1\x62\x64\xdc\x40\xd4\x35\x86\x81\x39\xec\xd5\xc4\x6c\xcb\xdc\xdf\xf6\xaa\xf9\xb3\xb4\x6f\xd9\x5f\x4c\x7a\x1f\xf1\x40\xd7\x25\x95\x9c\x2a\x1f\xc6\x3e\x45\x08\x56\x1f\x01\x8c\xe6\x9d\xfc\x72\xb0\xde\x8a\x3d\xad\x88\xdf\x8d\x6b\xc9\xe0\xa7\x89\x56\x2e\x7a\x3f\xbd\xa5\xe7\x76\xe8\x61\x06\x2f\x70\x20\x25\xfa\x79\x99\x50\x4e\xb6\xa4\xe8\xdc\x7a\x6e\x5d\x94\x88\xce\xe1\xbe\xeb\x34\xf4\x4e\x45\xed\xac\x34\x1a\x3a\x35\x5b\x94\xae\xc3\x13\x02\x85\x88\xdf\xbd\x71\x7e\xa8\x32\xa2\xe7\x03\x8d\xdb\x60\x85\x13\x34\x0e\xd6\x13\xa2\x1c\x29\x0a\x5e\x58\x96\xc1\xba\x7b\x4a\xb9\x07\x6e\x61\x03\xdd\x1f\xf2\x9d\x57\xb4\x66\x44\xd8\xb0\xdb\xb4\xce\xad\x1e\xbc\xbf\xe0\xef\x4b\xb1\xa1\x0e\xba\x16\x0e\x51\x66\x3b\x3e\xde\x93\x0c\xf2\x4a\xd9\x47\x84\x99\xac\xba\x1f\x04\xc4\x8a\x42\x29\xd3\x40\x80\x8c\x45\x19\x6b\x89\xd7\xc7\x96\x3b\xe5\x7f\x1d\x8c\x4f\xd8\x9e\xf1\xff\x71\x12\x39\xe3\xb7\xec\x92\x88\xc6\x09\x64\x50\xa2\x7d\xec\x86\x84\x4f\xae\xd1\x58\xc8\xf9\x55\x2a\x6a\x4d\x5c\xaa\x7f\xe0\x0c\xa7\xec\x1a\xd6\x13\xde\xcd\x34\x22\xf4\x99\x4c\x3e\x90\x74\x13\x54\xf6\x06\xe0\xbc\xe7\x92\x01\xe9\xb3\xcd\x3d\x57\x0a\xe7\x42\x81\xfd\xd3\x4e\x79\x4d\x47\x27\xb7\x12\x60\xb8\xf7\xef\x79\xdc\x1a\x5d\xa3\x30\xb5\xcd\xc4\xa9\x0b\x78\x7f\x54\x4a\xd3\x69\xec\xc7\xd3\x20\xeb\x57\x30\x9b\xd7\x8b\xea\x9c\x48\x53\xb1\xb7\xdf\x3b\x01\xbd\x75\xfa\xbb\x4e\x48\xaf\xe4\x7e\x0f\xb5\xb2\xba\x69\x8d\xe4\x31\x6f\x02\x1d\x04\x29\x3e\xc3\x8c\xff\xc9\x17\xcf\x7c\xcf\x34\xf0\xb1\xd4\xe2\x33\x58\x17\xbb\xe0\xfd\xdd\x7b\x75\x90\xd1\x8d\x06\x40\xf5\x84\x40\x89\x40\x25\x32\xf4\x1f\x1a\x90\xb0\x38\xae\xa8\xed\x41\xb6\xa5\x2b\x3f\xd0\x54\x96\xa0\x08\x6d\xe8\xdc\xa4\x70\x23\xa7\x57\xbf\x8b\x34\x08\x63\xde\x55\xf5\xff\xc5\x34\x54\x3a\x89\xea\x29\xdf\x12\x7e\x75\x7d\xe4\x72\x83\xca\x2e\x29\x7f\x68\x35\x3c\x4d\x04\x57\x63\xe5\xf6\x50\x13\x63\xa4\xdb\x09\xab\xa6\xac\x2a\x51\x3b\xe5\x68\xf2\xee\x5a\x24\x37\x90\xed\x30\x4f\xde\x5d\xcb\x61\x7b\xc3\x7b\x96\xd5\xca\x3f\xc1\x6a\x01\xbf\xd0\xef\xe8\xf4\x62\x95\xbc\xe3\x94\xe7\xb2\x5a\x2d\xe0\x9f\xba\x5b\xab\xc8\xe9\xa8\x04\x6d\x4b\x37\xce\x81\x63\x47\x22\xe3\x35\xc3\x9f\x31\xfc\xb0\x6d\x1b\xae\x20\xc6\xdd\x61\x9e\xaa\xa6\x41\x5b\xc0\x06\xce\xc8\x33\xd8\xc0\xbe\xa2\x81\x2a\x79\xc7\x49\xb3\x5a\x30\x2c\x23\x2c\x56\x70\x46\x2a\x64\xe5\x71\x87\x3e\x60\x9f\x4a\x9f\x4b\x1e\xb3\xa4\x64\xfa\x9d\xd3\x74\x37\xba\xe5\xbb\xcf\x6f\x14\x0d\xbe\xfb\xfc\xd6\xc5\xc5\x63\x68\x0d\xdd\xc0\x74\x09\xb7\x3c\x86\x9e\xcb\x32\xf9\xaa\x24\x7b\xe5\xe8\x7a\xb2\xd7\x01\x45\x32\xd8\x2f\xe1\xae\x1b\x56\x55\x80\x87\x5b\x96\x3e\x70\xef\x9c\x50\x76\x57\x2d\xa1\x82\x39\xdc\xf6\xfd\x72\xb5\x80\x7f\x57\x68\x27\x0e\x97\xce\xc3\x9e\x5e\x1d\x5c\x0b\x85\xb3\x7f\x8b\x60\x91\xd0\x8d\xa1\x63\x53\x97\xb2\xc1\xac\x32\xc0\x0f\xc0\x6b\xd8\x8c\xe0\x52\x58\xae\xa6\xf3\x23\xe8\x1c\x68\x60\x12\x6b\xdc\xa1\xa5\xeb\x13\xcf\xfd\xb7\x7c\x18\xd6\xae\x80\xff\xa2\x77\xb7\x32\x6d\xe8\x9d\x0e\xce\x8b\x4e\xdd\x6b\x4d\x75\x92\x0c\x3e\x8e\xc7\x29\x49\xd3\x51\xb6\x5a\xc0\x35\xc5\x51\x19\x8f\xaa\x38\x0c\xf3\x3c\x93\xdf\xbc\xb2\xbb\xee\x8a\x37\x83\xeb\x57\x12\x1e\x46\xae\x61\x0d\x1f\xbb\xd6\xe3\x3c\xeb\xdd\xbc\x02\xf8\xd8\x97\x7f\x06\x6a\x1b\xc6\x09\x48\xba\xd0\x07\x86\x48\x2f\x60\xc1\x09\x85\x96\x9b\xf1\x6a\x01\x19\x70\x5f\x99\x20\xb1\x7f\xcb\x71\xc6\xe8\x67\x0f\xda\x4d\xcb\x43\xf9\x6b\x70\xb9\xe7\xcb\xd9\x65\x50\xf9\x54\xaa\x61\x26\xf6\xeb\xe3\xfb\x2a\x79\xb9\x19\xc7\x09\x49\xee\xab\xff\x05\x00\x00\xff\xff\x9a\x75\x1d\x92\x64\x10\x00\x00")

func stdlibStd_libPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStd_libPisc,
		"stdlib/std_lib.pisc",
	)
}

func stdlibStd_libPisc() (*asset, error) {
	bytes, err := stdlibStd_libPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/std_lib.pisc", size: 4196, mode: os.FileMode(420), modTime: time.Unix(1490941683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStringsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xb1\x6e\xdb\x30\x10\x9d\xa3\xaf\x78\x05\x32\x44\x49\xe9\x74\x76\x00\x07\x41\xda\x21\x93\x87\x74\x33\x0c\x88\xa6\xce\x11\x53\x89\x94\xc9\xa3\x5d\xff\x7d\x71\x94\x64\xab\x9d\xba\x91\xc7\x77\xef\xbd\x7b\xc7\xc7\x7b\x14\xef\x1c\xac\xfb\x88\x8b\xde\x46\x53\x8c\x37\x34\xda\xd5\xad\x1c\x4e\x3e\xd4\x11\xda\xd5\x88\xc9\x34\xc5\xfd\x63\x51\x2c\xbf\xaf\x5f\x61\xbc\x33\x9a\x71\x07\x8d\x1d\x94\x82\x41\x89\xd7\x5c\x23\xa7\x99\xc0\x0d\x81\x7d\x0f\x3e\x79\xc4\x41\x01\xde\xe5\x72\x64\x6d\x7e\xe1\x69\xe0\x59\x0d\x8f\x99\x48\x29\x81\x0e\x44\x47\x0a\x0c\xed\xce\x23\xfa\xa8\xdb\x44\xb0\x8e\x3d\xf4\xc8\x37\x31\x0c\xb7\x95\x75\xe2\x46\xfa\x95\x12\xe0\x17\x94\x78\x61\xa6\xae\x67\xb0\x17\xbf\x03\xe5\xd4\x2d\x4c\x4e\x80\xf4\x41\x61\xc6\xa5\x3e\xbd\x75\xb8\xc3\x91\x0c\x22\xf5\x57\x53\x3f\x53\x70\xd0\x52\x67\x1f\xfe\xb1\xb2\x3b\xa3\x1a\x27\xa9\x72\x58\x29\x4a\x59\xfa\xad\xc3\x8e\xf8\x44\xe4\xa0\xdb\x36\x07\x40\x2d\x75\xe4\x38\xc2\xef\x51\x1d\xc9\x54\x73\xf9\xd8\xb7\x76\x9a\x64\xd4\x17\x2b\x25\xde\xf3\xc3\x45\x72\x34\x30\xda\x19\xf4\xaa\x48\x7d\x05\x1d\xa1\x51\x93\x6d\x6d\x47\xfc\xf7\x6c\x92\xc6\xf9\xf9\x9a\xd3\x33\x4a\xbc\x45\x70\x63\xe3\xc4\x3b\x42\xe6\x4d\x87\xeb\x9a\xa5\xe1\x25\xfc\xc7\x7a\xe9\x90\x74\x3b\xa7\x59\x85\xe4\x48\x05\xd2\x35\x85\xab\x01\xbf\xfb\x94\x7d\x07\x92\x3f\xa3\x31\xc7\xec\x83\xef\x2e\xe3\x7e\x45\xa4\x41\xb5\xda\xbc\xad\xb7\x15\x6a\x6f\x22\xf6\x3e\xa0\xf3\x41\x3e\xc6\xde\x4f\x5a\xa4\x4d\xa3\x4c\xa3\x27\x95\x43\xf2\x2c\x52\x8b\x05\x4a\xfc\xf8\x4d\x26\x31\xa1\x92\x6a\x95\x09\x04\x0f\xc1\x6b\xc3\x14\xee\xc4\x42\x29\x5b\xab\x22\x07\xd9\x4c\xb1\xcc\x29\x18\x9f\x2e\x3f\x2c\xb3\x2b\x05\x97\xba\xb5\x31\x29\x44\x94\x58\x5a\xe7\x28\x14\x37\xdf\xb0\xb4\xc5\xcd\x06\xb7\xf9\x3e\x05\xb8\xc1\xc3\x83\xc5\x16\xa7\x86\x1c\xb6\x33\x8f\xc5\xcd\xad\x2d\x2e\x22\x2e\x67\x2d\xa7\x3c\xb8\xca\x99\xd3\x41\x52\x1f\x89\x9c\x67\x3c\xe1\x4f\x00\x00\x00\xff\xff\x09\xad\x41\xce\xb8\x03\x00\x00")

func stdlibStringsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStringsPisc,
		"stdlib/strings.pisc",
	)
}

func stdlibStringsPisc() (*asset, error) {
	bytes, err := stdlibStringsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/strings.pisc", size: 952, mode: os.FileMode(420), modTime: time.Unix(1490123435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibSymbolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\x0e\x82\x30\x10\xc6\xf1\xbd\x4f\xf1\x1f\x81\x04\xd9\xc5\x48\x0c\xee\x0e\x3e\xc1\xa1\x97\x48\x82\x45\x68\x1b\xe3\xdb\x9b\x4a\x43\x18\x1c\xdb\xfb\x7e\xf7\x5d\x55\x98\xeb\xe7\xd9\x8d\x83\xdb\xbd\x7a\x77\x33\x45\x65\xf6\xe7\x4b\xcb\xc1\xfd\x7e\x8f\x64\x94\x25\x39\xed\xac\xe2\x15\x21\xd8\x7e\x0a\xca\x32\xa6\x5e\xd2\xf1\x55\x5a\x9d\xc8\x10\x3a\x22\x69\xc8\x39\xcd\x8a\x7f\xa8\x53\xfc\x7b\x4c\xc4\x61\x47\x8f\x4e\x41\x06\xa8\xcd\xc6\xaf\x7c\xa3\x05\xb1\x77\xba\x94\x4f\x1b\x9a\x58\xfb\xdf\xac\x87\xc4\x92\xda\x7c\x03\x00\x00\xff\xff\x27\x8e\xbf\xf1\xde\x00\x00\x00")

func stdlibSymbolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibSymbolsPisc,
		"stdlib/symbols.pisc",
	)
}

func stdlibSymbolsPisc() (*asset, error) {
	bytes, err := stdlibSymbolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/symbols.pisc", size: 222, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibTypesPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x8e\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\xdf\x50\x70\x5d\xa8\xbd\x47\xe9\xc5\x93\x2f\xe0\x45\x3c\x14\x3b\xad\x03\x25\xa9\xc9\x6c\xad\x88\xef\x2e\x93\x6e\x83\x20\x78\xde\x53\xfe\x09\xf3\xfd\xf3\x35\x47\x3c\x04\x9f\xb8\xa7\x88\x8f\xc8\xc2\x7e\x84\xbc\x71\x02\x7b\x8c\x01\x43\x88\x48\x33\x51\x7f\x8b\x63\x63\x1c\xba\x94\x28\x4a\x2d\x9f\x33\xe1\x80\xa5\x9b\x90\x63\x5d\x6b\x6e\x28\xc6\x10\x71\x03\x03\x38\x5a\x67\x7a\x15\xea\xe1\x96\x6e\x32\x40\xb5\x2f\x87\x01\x4e\x5f\xfd\xcb\x70\x55\x56\xe9\x1d\x3e\x88\xe2\xc0\x33\xaa\x2f\xd8\xa7\x6e\x3a\x11\x6c\xa6\x35\x5c\xa7\xed\x20\x27\xdc\xdb\x33\x6f\xdb\x4c\xe9\x5c\x9a\x6c\x6b\xf1\x8d\xcd\xe7\x65\xef\x53\x03\x1d\x78\x80\xb9\x33\xc6\x81\xbd\x5c\xe1\x80\x55\xfd\xd7\x62\xaf\xf7\xfb\xd3\x0c\xb7\xec\xbe\x79\x12\xd8\x47\x2f\x34\x52\xb4\xff\x8a\xfe\x95\x2c\x86\x67\xbe\xc5\x2f\xb9\x52\xb2\x6c\x99\x07\x5c\xb6\xdb\x4f\x00\x00\x00\xff\xff\x31\xc4\x9e\x13\x32\x02\x00\x00")

func stdlibTypesPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibTypesPisc,
		"stdlib/types.pisc",
	)
}

func stdlibTypesPisc() (*asset, error) {
	bytes, err := stdlibTypesPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/types.pisc", size: 562, mode: os.FileMode(420), modTime: time.Unix(1490757462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibVectorsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xc1\x4e\xdb\x40\x10\x3d\x7b\xbf\xe2\x09\xe5\x40\x68\x4d\x1a\x73\x33\x15\x52\x55\xaa\x1e\x5b\x51\x89\x8b\x95\x83\x49\x26\x65\x55\x67\xed\x7a\x27\x4e\xf8\xfb\x6a\xc6\x6b\x3b\x0e\x09\x9c\x7a\x82\x9d\x99\xf7\xc6\xfb\xde\xec\x64\x76\x85\x47\x5a\x72\x59\x7b\xe4\x6e\x05\x7e\x26\x5b\x63\xcb\xb6\xb0\x6c\xc9\xe3\x6a\x66\x4c\x7a\xff\xe3\x2b\x1a\x5a\xc6\x9e\x38\xce\x19\x97\x72\x40\x93\x17\xb0\xab\x3d\xe2\x18\x54\xd0\x06\x53\xfc\x22\x96\x0c\x97\x35\x72\xd6\x1c\x97\x52\xb6\x25\xdc\x0e\x24\x3d\xc1\x18\xfc\x9d\x58\xff\x25\xc7\x8a\x76\x2b\xda\x77\xb0\xcf\x2d\xeb\x1d\x2e\x05\x10\x5a\x4c\x71\xd1\xc5\x2f\x40\x7b\xa6\xda\xc5\xcb\xbc\x28\x0e\x7b\x51\xbe\x7c\x0e\xdd\xfe\x6e\x4b\x16\xf4\xf5\xb5\x20\xbb\xe4\x31\xd2\x9c\x69\xf8\x7f\xba\x0d\x9a\x54\x15\xb9\x55\xc0\xaa\x20\x71\x0c\x38\xda\x89\x35\x1d\x43\x5b\x74\x96\xa3\xaa\xe9\x04\xc9\x11\x47\x28\x3a\x4f\x52\x56\x4f\xf9\xf2\x4f\x20\x09\x77\x57\xae\x9e\xa1\xad\x78\x8b\x61\x5d\x97\x8e\x4f\x50\x0c\x0c\x5a\xf1\x4a\xfb\xf4\xe7\xc3\x37\x64\x8b\xf1\x78\x4c\xe1\xb9\xb6\xee\xf7\x9d\x75\xdc\xcd\x8f\xd4\x22\x09\x73\x70\x89\x1c\x4f\x83\x4d\xbd\x75\x09\x32\xf8\x5d\x5e\x8d\xc4\x59\x80\xed\x86\xbc\x32\xc8\x17\x8b\x2b\x89\x34\x9c\xa3\x49\x7a\xd7\x9a\x1b\x4c\xf1\xa5\xaa\x0a\x79\x01\xb9\x86\x73\xb6\xa5\x93\x79\x56\x93\xc3\xa0\xee\xac\x27\x54\xb9\xad\x61\x9d\x50\xc8\x03\x6a\x92\x8f\x52\x56\x93\xdf\x16\xac\xf1\x1b\x91\xe7\xad\x4e\x26\x4a\xf5\x9c\x36\x09\xd2\x66\x6e\xa2\x4f\x48\x6d\x7f\x11\x13\x4d\x9a\x04\x05\x39\x4c\x9a\xb9\xfe\xdd\x58\x87\xcc\x44\x91\x06\x26\xb6\x53\xa5\x8d\x24\x07\x11\x65\x1d\x46\xc7\x44\x51\x86\x39\x3e\x60\x81\x49\x6a\x4d\x74\x2c\x86\xaf\x8a\xfc\xc0\x37\xcb\xb4\xf1\x98\xe2\x7e\xbb\xa9\x64\x2f\x60\x59\x3a\x26\xc7\x1e\xe5\x5a\xcf\xc1\x80\xd2\x71\xa9\x67\xcf\x32\x3a\x72\xd9\x53\x4c\xd7\xfa\x16\x32\x2c\x86\xb7\x72\x7b\xb0\x5b\x6a\x6a\xa8\xf6\x34\x80\x42\xa0\x75\xf5\xa1\x3d\x88\x1b\xa1\xab\xb4\x79\x1f\x67\xa2\xd5\xb6\x42\x2a\x07\x51\x2e\x95\x19\x10\x75\x8d\x2a\x11\xab\x12\xaa\xcc\x44\x32\x09\x66\xc8\x44\xc7\x89\x00\x06\x1d\xd3\x7d\x1f\x93\xb2\x2e\xfa\xd2\x47\x5f\xba\xe2\xb0\x21\xa5\x61\x9f\xdc\x0f\xa8\x71\xfa\xe8\x13\x4e\x9a\x63\x94\xc4\xe8\xc4\x0b\xc3\xda\x16\x4c\xf5\xd1\x96\x69\x83\xb4\x7a\x6c\xef\xdc\x3f\x81\xd4\xd1\x4e\xd0\x3a\x5e\x06\x19\x44\x0c\x05\x65\x98\xb4\xb9\xe1\x89\x84\x1d\x14\x30\x58\x48\x79\x5d\x56\x58\xc0\xae\x0f\x4c\x33\x01\x68\xc4\xbd\xd9\x15\x7a\x03\xa5\xf8\xe8\xe5\x07\xaa\x29\xee\x85\x48\x46\xa4\x2d\x18\xcf\xcf\xad\xfc\xc8\xa4\xef\x72\x8c\x96\x8b\x7e\xd9\x89\x0f\x18\x2f\xaf\xd7\xfd\x35\xff\x66\xfb\x33\x0c\x87\xcb\xb1\x6d\xfe\x2f\x00\x00\xff\xff\xeb\x99\x7f\x22\x39\x07\x00\x00")

func stdlibVectorsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibVectorsPisc,
		"stdlib/vectors.pisc",
	)
}

func stdlibVectorsPisc() (*asset, error) {
	bytes, err := stdlibVectorsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/vectors.pisc", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibWithPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xcf\xf1\x53\x8c\x4a\x0f\x25\xc2\xcd\x3d\x45\x08\x09\x71\xe0\x82\x10\x57\x84\xd0\xc6\x31\xb1\x8b\x1b\x87\x78\x5b\xbf\x3e\x5a\x97\x22\xfe\x8e\xab\xf1\x7c\x33\xe3\xa6\x46\xf6\xec\xa8\x0b\x16\xb1\xdb\x5a\xc3\x09\x75\xa3\x54\xfb\xf0\x78\x8b\x6b\xac\x90\xe3\xdc\xdf\xd3\xce\x42\x6b\xac\xd7\x38\xc7\xe2\x45\x0c\x0b\x0c\x96\x75\x88\x86\x02\x52\xa6\x09\xbd\x37\xac\x07\xcb\x30\x14\x02\x36\x4a\xb5\x05\x8c\x95\x60\xf1\xbe\x8f\xfc\x45\x68\xcb\xd5\xc6\x6e\xab\xaa\x4b\xf1\x5d\xa1\xcd\x07\x9a\x55\xb5\x2c\xca\x29\x41\x0e\xed\x28\xe9\x03\xcd\x78\xc2\x3f\xa2\x74\x10\xb1\xd8\xf1\x8c\xec\xec\xa8\xaa\xa6\xc6\xdd\x2b\xd8\xf9\x74\xcc\x75\x94\x50\x5c\x48\x96\x2f\x40\xd3\x64\xc7\x1e\x9e\xc1\x11\x84\xc4\x64\xde\x64\xf3\xaf\xf4\xe5\xa9\xb7\x4e\xc7\x14\x55\x9d\xe1\x46\xc6\x95\x67\xfb\xe4\xc7\xe1\x13\xbb\xb3\x4c\xdf\xfa\xcb\x0f\xfc\xa1\x95\x86\x3f\x70\x1b\xf5\x11\x00\x00\xff\xff\x81\x99\x2d\xf3\x7d\x01\x00\x00")

func stdlibWithPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibWithPisc,
		"stdlib/with.pisc",
	)
}

func stdlibWithPisc() (*asset, error) {
	bytes, err := stdlibWithPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/with.pisc", size: 381, mode: os.FileMode(420), modTime: time.Unix(1488367565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stdlib/bools.pisc": stdlibBoolsPisc,
	"stdlib/debug.pisc": stdlibDebugPisc,
	"stdlib/dicts.pisc": stdlibDictsPisc,
	"stdlib/io.pisc": stdlibIoPisc,
	"stdlib/locals.pisc": stdlibLocalsPisc,
	"stdlib/loops.pisc": stdlibLoopsPisc,
	"stdlib/math.pisc": stdlibMathPisc,
	"stdlib/random.pisc": stdlibRandomPisc,
	"stdlib/shell.pisc": stdlibShellPisc,
	"stdlib/std_lib.pisc": stdlibStd_libPisc,
	"stdlib/strings.pisc": stdlibStringsPisc,
	"stdlib/symbols.pisc": stdlibSymbolsPisc,
	"stdlib/types.pisc": stdlibTypesPisc,
	"stdlib/vectors.pisc": stdlibVectorsPisc,
	"stdlib/with.pisc": stdlibWithPisc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"stdlib": &bintree{nil, map[string]*bintree{
		"bools.pisc": &bintree{stdlibBoolsPisc, map[string]*bintree{}},
		"debug.pisc": &bintree{stdlibDebugPisc, map[string]*bintree{}},
		"dicts.pisc": &bintree{stdlibDictsPisc, map[string]*bintree{}},
		"io.pisc": &bintree{stdlibIoPisc, map[string]*bintree{}},
		"locals.pisc": &bintree{stdlibLocalsPisc, map[string]*bintree{}},
		"loops.pisc": &bintree{stdlibLoopsPisc, map[string]*bintree{}},
		"math.pisc": &bintree{stdlibMathPisc, map[string]*bintree{}},
		"random.pisc": &bintree{stdlibRandomPisc, map[string]*bintree{}},
		"shell.pisc": &bintree{stdlibShellPisc, map[string]*bintree{}},
		"std_lib.pisc": &bintree{stdlibStd_libPisc, map[string]*bintree{}},
		"strings.pisc": &bintree{stdlibStringsPisc, map[string]*bintree{}},
		"symbols.pisc": &bintree{stdlibSymbolsPisc, map[string]*bintree{}},
		"types.pisc": &bintree{stdlibTypesPisc, map[string]*bintree{}},
		"vectors.pisc": &bintree{stdlibVectorsPisc, map[string]*bintree{}},
		"with.pisc": &bintree{stdlibWithPisc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

