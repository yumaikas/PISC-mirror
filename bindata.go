// Code generated by go-bindata.
// sources:
// stdlib/bools.pisc
// stdlib/debug.pisc
// stdlib/dicts.pisc
// stdlib/io.pisc
// stdlib/locals.pisc
// stdlib/loops.pisc
// stdlib/math.pisc
// stdlib/random.pisc
// stdlib/shell.pisc
// stdlib/std_lib.pisc
// stdlib/strings.pisc
// stdlib/symbols.pisc
// stdlib/vectors.pisc
// stdlib/with.pisc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stdlibBoolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\xcd\xb1\xae\x82\x40\x10\x85\xe1\x7e\x9f\xe2\xdc\xee\x4a\x32\xd2\x4b\x61\xa2\xf6\x3e\xc3\x8a\x43\x20\x6e\x76\xc8\xce\x60\xe0\xed\x0d\xbb\x86\xd8\x58\x59\x9f\x2f\xe7\xaf\x2b\x77\x13\x09\xba\x1f\x07\x6d\x5d\x55\x3b\x77\xb8\x5c\xcf\xf0\xf1\x8e\x7f\xcc\x58\x40\x84\x23\x76\xc0\x49\x24\xb0\x8f\x79\x41\x53\x94\xa4\x2f\x48\xd2\x66\xa2\x58\x46\x44\xf8\x9b\x3f\xcd\x3a\xa0\x79\xf7\x56\x43\x04\x5b\x81\xe5\x46\x87\xc4\x3a\x72\x6b\xc3\x93\xc3\x82\x71\xd2\x1e\x96\x26\x2e\xa3\x0f\xca\x90\x68\x02\xeb\x19\x6a\xbe\x7d\x6c\xc5\xae\x7c\x75\xbf\x7d\xbd\x02\x00\x00\xff\xff\xb9\x8b\x83\xea\x19\x01\x00\x00")

func stdlibBoolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibBoolsPisc,
		"stdlib/bools.pisc",
	)
}

func stdlibBoolsPisc() (*asset, error) {
	bytes, err := stdlibBoolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/bools.pisc", size: 281, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDebugPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\xc6\xf1\xbd\x4f\xf1\xd1\x49\x87\xbc\x40\x8b\x2e\xba\x3b\x38\x8a\x43\xb8\x9e\x26\x10\x72\xe1\x2e\x1a\x7d\x7b\x91\x2a\x74\xe8\xf6\xc1\x9f\xef\xd7\x0d\xc7\xd3\x01\x16\xa4\xb9\xa2\x7c\x8b\x2f\xd7\x44\x27\xc3\x06\xce\x61\x8b\x73\x90\x66\x68\x21\x52\xc0\xdc\x31\x77\xaf\x0c\x7a\xa8\x72\xae\xe9\x8d\x24\x7e\xe2\x09\x63\xb7\xe0\x92\x90\x4f\xab\xd0\xaf\x7c\x89\x98\xff\x0a\x8c\xa4\x30\xc6\x6e\x58\xbb\x5f\x00\x79\xb2\x62\x6f\x55\x63\xbe\xa3\xc7\x0e\x3d\xac\xf9\x02\xab\xea\x48\x32\xf9\xba\x9c\x39\x16\x14\x8d\xb9\xe2\x0a\xf6\x14\x66\x0f\x23\x3e\x01\x00\x00\xff\xff\xd4\x33\x23\xc6\xf1\x00\x00\x00")

func stdlibDebugPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDebugPisc,
		"stdlib/debug.pisc",
	)
}

func stdlibDebugPisc() (*asset, error) {
	bytes, err := stdlibDebugPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/debug.pisc", size: 241, mode: os.FileMode(438), modTime: time.Unix(1498731141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibDictsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x06\x41\x3e\x20\x36\x3e\xda\x77\x2b\x88\x0e\x4d\xd3\x63\x82\xb6\x37\x21\x07\x86\x5a\x5b\x84\x65\x52\x26\x29\x07\x42\xd1\x77\x2f\xf8\x23\x59\x91\x75\x32\x4d\x2d\x67\x67\x86\xb3\xdc\xae\xf1\x2c\x85\x93\x5a\x71\x23\xc9\x82\xab\x0a\xae\x26\x69\xd0\x39\xd9\x48\xe7\xf7\xd6\xdb\x2c\xdb\x3d\xbf\x7e\xc3\x63\x25\x85\x7b\xc2\x03\x18\x83\x5f\x62\x05\xbc\x35\x5c\x10\xb8\x02\x9d\x5a\xd7\x87\xed\x00\xd6\x43\x2b\x8f\x04\xeb\xb8\x38\x02\x79\x96\x6d\xd7\x08\x30\xbe\x86\x1d\xc8\xb1\x13\x57\x3d\x1e\x22\xd4\xb9\xd3\xce\xe3\x7a\xcc\x1f\xe4\xc0\x71\xe1\x4d\x47\xd8\x1b\x7d\x0a\x38\x13\xe4\xbd\x36\x20\x2e\x6a\x7c\x6a\x53\x41\x2a\xf0\x70\x9c\xfb\xef\x40\x1e\x08\x7b\x61\x9a\x2c\x5c\x2d\x6d\xec\x50\xf3\x0b\xc5\xbf\x47\xea\x0b\xac\xb7\x48\xb2\x02\x1f\x4b\x6e\xa0\x12\x1b\x1f\xa9\x9f\xea\xfc\x45\x2e\xd0\xf0\xdb\x4e\x87\x65\xa8\xfb\x1f\x0d\xf1\x8b\x54\x87\x91\xe4\xad\xf0\x2f\xaa\x87\x2e\x09\x3f\x36\x4b\xa2\x47\xd4\x45\xd9\x01\x2a\xe2\xc8\x3d\x0b\x7e\xb3\xd8\xe4\x01\x9b\xcd\x40\xb6\xc0\x2a\xb6\x8e\x15\x05\xca\xe1\xde\xde\xf1\x59\x93\x42\x3e\x01\x51\xda\xb1\xc0\x66\x8a\x80\x15\xaa\xae\x85\xeb\x5b\xd2\x7b\xdc\x8d\xf9\xe8\xef\x60\x9d\x61\x8a\xce\xcb\xa0\xa4\x6c\x67\x88\x4d\x18\xcf\x51\x17\xa8\xdf\x30\x89\x41\x79\x21\x27\xea\xe8\xc2\x04\x6f\xbd\xcd\xb0\x7b\xfb\xf9\x1d\xec\xe9\xd6\xc6\xa1\x81\xf7\x38\x1f\xeb\x96\x0a\x13\x9d\x32\xc8\xdc\x55\x78\x47\x25\xdb\xeb\xe1\xfb\x2a\x91\x98\xde\xb9\xcf\x1c\xc7\x41\x5e\x48\x45\x46\x4a\x7b\x46\x29\x03\x1f\x9d\x0b\x39\xa0\xf9\x9d\x7d\xc9\xc2\x48\xff\xf1\x91\x4d\xc2\x36\x8f\x5a\x39\x32\xf3\x1b\x91\xdc\x84\xa2\x0d\x14\xa3\x55\x09\x6e\x09\x6d\x75\xad\x4e\xb3\x17\x4b\xef\x17\x6b\xfd\x38\x36\x5a\x24\x73\xe2\xa9\x61\x8e\x82\x0f\x7e\xc2\x95\x33\x31\xfc\xc6\x27\x74\x18\xc2\x4e\x49\xa1\x2b\x82\xa8\xb9\xe1\xc2\x91\xf1\x13\x19\xe6\xcc\x3a\xe3\x07\xe3\x7a\x6b\xff\xa5\xde\xc5\x4c\x72\xb9\x90\x9d\xa8\xb8\xfc\xe2\x42\x99\x84\xdb\x4f\xde\x22\xfd\x8c\x7c\xdf\x03\x1d\xe6\x69\x8c\xfe\x8c\x31\x28\x66\x31\x08\xeb\x62\x30\xa9\xe6\x96\x85\x47\x61\x3c\xb1\x99\xd5\x6f\x36\xd3\x78\x09\xde\x34\xd1\xd5\x6c\x17\x9e\x9e\xa7\x34\x44\xc3\x2b\x96\x74\x8d\xae\xda\x78\x24\xcd\x4c\x79\x43\x3a\x59\x6f\x74\x3b\xd4\xe7\x59\x72\xff\xf7\xeb\xf3\xeb\x0e\x2f\xf2\xd0\x19\x82\xee\xfc\xcb\x28\xf7\xd1\x5f\xc1\x15\x3e\x08\x27\x5e\x11\x4e\xda\x10\x5a\xa3\x5b\x32\xd0\x06\x4a\xbb\x8d\x37\x3e\x8d\xfa\x91\x7a\x3b\x28\x62\xcc\x8b\xb2\x17\x12\x58\x61\x77\xc6\x1f\xdc\x9f\xd1\x76\xb6\x66\xd7\xd2\xbf\xc8\xff\x05\x00\x00\xff\xff\x7d\x6e\xdc\xdd\x1a\x06\x00\x00")

func stdlibDictsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibDictsPisc,
		"stdlib/dicts.pisc",
	)
}

func stdlibDictsPisc() (*asset, error) {
	bytes, err := stdlibDictsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/dicts.pisc", size: 1562, mode: os.FileMode(438), modTime: time.Unix(1499005225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibIoPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xf3\x36\x0c\x3d\xd7\xbf\xe2\x01\x19\x90\xe6\x43\x9c\xef\x3a\xb4\xc0\x86\x21\x6d\x80\x5e\x96\x61\xeb\xb0\x4b\x81\x55\xb6\xe9\x58\x83\x22\x79\x12\xd5\xc0\xff\x7e\x20\x6d\x27\x59\xbb\x0e\xdf\x4d\x96\xc8\xf7\x1e\xc9\x47\x7f\xfd\x82\xe7\x8e\xf0\xb4\x87\xb3\x55\x34\xd1\x52\x42\x68\xf1\xcb\xd3\x6f\x5b\x7c\xf9\x5a\x14\xfa\x6e\x13\x9a\x50\xc3\x26\xbf\x64\xb4\x21\xc2\x20\xf5\x54\xdb\xd6\xd6\x38\x85\xd8\x48\xe4\xdd\xc3\x7e\x2b\x30\xb7\x28\x4b\xac\x50\x2c\xf0\x2b\x99\x86\x62\x2a\x8a\x6d\x8e\x91\x3c\xbb\x61\x3d\xe2\x76\x26\x21\x92\x69\xac\x3f\xc0\xf8\x06\xa7\x68\x59\xce\xa1\xfa\x8b\x6a\x4e\xe0\xce\x30\x4c\x24\x54\x21\xfb\x06\x1c\x90\x7d\x43\xd1\x0d\x12\x74\x08\xa8\x4c\xa2\x06\x55\x6e\x6d\x98\x73\x36\x78\x34\x75\xa7\xa8\x14\x95\x80\x3b\x42\x1b\x9c\x0b\x27\xc9\x6a\xb3\xaf\xd9\x06\x9f\xe0\x82\x69\xa8\x81\xf5\x1c\x60\x39\xa1\xb1\xfa\x60\xe2\x00\xf2\x2c\xf5\xdf\x15\xc5\x62\xa1\x50\x65\x35\x30\x8d\x15\xe9\x69\x55\x48\x4d\x09\x66\xfc\x6c\x63\x38\x2a\xcf\x44\x6b\x12\x8c\x17\xe4\x35\x12\xb1\x96\x74\x79\x4d\x78\xdc\xef\xa4\x16\x8e\x99\x60\x5b\x7d\x22\xdf\x48\xb7\x55\xab\x75\x04\xab\x8d\xa9\x3b\x6a\x2e\x1a\x62\xf6\x93\x06\x3d\x5d\x34\xfc\xfe\xbc\x2b\xbf\x1f\x2f\xdf\x29\xb9\x24\x3b\x3b\x27\x27\x8e\x57\xb9\x7a\xff\x2e\x6b\x0d\x8e\xf6\x78\x14\xd9\xcb\x97\xb8\xd4\xd1\x2c\x5f\xfc\x12\xa1\x3d\xab\x55\x64\x29\x44\x31\x1f\xf7\xbb\x1f\x15\x94\x73\xf4\xe9\x7f\x2b\x93\x91\x54\x44\x7e\xae\x6f\x8d\xd6\xb8\x44\x08\xdc\x51\x3c\xd9\x44\x45\x71\x5f\x8c\x26\x0a\x3d\xf9\x52\x92\xca\xa9\xaf\xb7\xe8\x0d\x77\x42\x38\x5a\x0a\x2b\xec\x04\x73\x6e\x6c\x67\xde\x08\x06\xaf\xb5\x0b\x89\x5e\x75\x8c\xc3\x68\xa2\xda\x78\x54\x84\xda\x38\x47\x6a\x24\x0d\x51\x55\x57\x96\x9a\x04\xfa\xc6\x11\x3e\x8a\x10\x77\xfe\x4b\xc4\x74\xb1\xc2\x1f\x7a\x48\x6a\xd5\x64\x8f\xbd\xa3\x28\xb4\x7e\x16\xb6\xc6\xe8\xc3\x41\x75\x04\xef\x86\x31\x57\xbb\x9f\x10\xa2\x0c\xc5\xfa\x43\xc2\x7d\x71\x33\xd2\xea\x7b\x39\x5e\xe3\x56\x87\xa6\xeb\xa4\x54\xfa\x29\x0e\xea\x08\x86\x59\xfb\x38\xab\x99\x75\x8f\x00\xd3\xd8\xbf\x39\x7d\x0d\xd3\xf7\xe4\x75\x23\x5f\xfc\x1c\x24\x33\x9c\x71\xa5\x15\xd2\x80\x1f\xce\xda\xe4\xe6\x67\x73\xa4\xc9\x5c\xdb\xe0\x99\x3c\x27\xac\x80\x9f\x90\xd9\x3a\xcb\xc3\x79\xef\xf4\xaf\x31\xef\x7c\x3a\x1a\xe7\x34\x3f\x8d\x7b\x38\xb5\x61\x83\x87\x00\x1f\x18\x59\x8c\xe1\xe1\x4c\x3c\xd0\x14\x77\x16\xd2\x47\xfb\xf6\x67\x9f\x39\x5d\xd7\x77\x75\x6b\xd3\xfb\xf1\xea\x1f\x2a\xcb\x2f\x43\x44\xf4\xd1\x7a\x5d\xcd\x37\xe3\xf2\x0c\x8c\x93\xe5\xae\x0c\x99\xfb\xcc\xf3\xa4\xff\xce\x81\x05\x7d\xb3\xc1\xaa\xb8\xb9\x93\xcf\xe2\xe6\x83\x2d\x9a\xdc\xe3\x3b\x0d\x15\x08\x6c\xd4\x60\x62\xe5\x05\x9e\xf7\x0f\xfb\x62\x81\x09\x7c\x6c\xb0\x70\xe0\x4c\x68\xfd\x27\x7c\xf8\x0f\xc2\x69\x19\x3e\x21\xfc\x27\x00\x00\xff\xff\xb2\x42\xc8\x50\xc8\x05\x00\x00")

func stdlibIoPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibIoPisc,
		"stdlib/io.pisc",
	)
}

func stdlibIoPisc() (*asset, error) {
	bytes, err := stdlibIoPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/io.pisc", size: 1480, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLocalsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xcd\x8a\x1a\x41\x10\xbe\xcf\x53\x7c\xe0\x1e\x76\x5c\x46\xef\x23\x04\x82\x91\xb0\x10\x12\x59\x8f\xe2\xa1\xe8\xa9\xd6\x46\xed\x9e\x74\xd7\xb8\x79\xfc\xd0\x3f\xe3\xba\xba\x87\x3e\x14\xf5\xfd\x55\x57\xcd\xa7\xf8\xe5\x14\x9d\x02\x8c\xc5\xfa\x75\xb3\xc4\x74\x5e\x55\xed\x8f\x3f\x4b\x04\x96\xe6\x14\x7b\x78\xc6\x85\x4e\xb0\x74\x66\x34\x0d\x6a\x6c\x58\x72\x25\x2e\x75\xb0\x28\x94\xfd\x0d\x65\x84\x47\x40\x8d\x9f\x2c\x90\x03\xc7\x6a\x60\x50\x08\x4e\x19\x12\xee\xf0\x6e\xe4\x00\x42\x66\xe5\xee\xa3\x5c\xc0\x73\x76\x5e\x0f\x21\xa2\x83\x90\x3a\x42\xfb\x68\xa1\x9d\x47\x01\x39\x2b\x2e\xb9\x94\x3a\xc3\x46\xb5\xce\xbb\xfe\x5e\xce\xf5\xa0\xa2\xe3\xf4\x55\x46\xeb\x47\x95\xab\x0c\x93\x3a\x5c\x87\xfc\x3b\x38\xc1\x16\x47\x5c\xd0\x60\x36\xc3\x2e\xea\x66\xde\x6c\x86\x1a\x78\x1b\x2c\x28\xc1\x48\x8c\xb3\x29\x6d\x54\x28\x03\x1b\x9b\x9c\xd4\xe0\x3d\x5b\xf9\x34\xd7\x66\xb5\x6a\x13\xf1\x5b\x67\x94\x24\xff\xf9\x14\x4b\xd7\x1b\xee\xa0\xbd\x3b\x43\x93\x12\xe7\xe3\xc2\x5a\xa8\x03\xd9\x3d\x8f\x89\x2e\xe4\x7f\x97\xef\x4f\x31\xc2\x3b\xf5\xd8\x62\x7b\xb3\xa0\x1d\x8e\xcc\x3d\x76\xe8\x4c\x9f\xde\xc7\xba\x17\xa8\xaa\x09\xbe\x8b\xf0\xb9\x17\x63\xf7\x71\xcd\x45\xbf\x2c\xaa\x6a\xd7\x6f\x2b\x3c\xb5\x5f\xf8\xd5\x23\x34\xe7\x4d\xc7\x85\xb5\x67\x6d\xfe\x71\x88\x59\x27\x78\xb5\xca\xf3\x39\xce\x4b\xb6\x43\xc7\xa5\xaa\x90\x54\x9b\xe6\xe6\x78\xea\xd4\xce\xb9\x9a\x0b\x79\x2c\x0a\xea\xe5\xe5\x13\xca\xd8\x3b\x54\x35\x49\x27\x17\x0d\x02\x4b\x49\x9d\xa9\x4f\x0f\xc7\xf9\xf1\x2b\xa3\x7c\xfb\x70\xf3\x37\xdf\xf3\x3f\x00\x00\xff\xff\x14\x7d\xd9\xc0\x34\x03\x00\x00")

func stdlibLocalsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLocalsPisc,
		"stdlib/locals.pisc",
	)
}

func stdlibLocalsPisc() (*asset, error) {
	bytes, err := stdlibLocalsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/locals.pisc", size: 820, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibLoopsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcb\x31\x0a\x02\x31\x10\x46\xe1\x7e\x4e\xf1\x97\xeb\xc2\x66\x7b\x53\xaa\x9d\xe0\x15\x46\xe2\x80\x81\x98\x44\x67\xa2\x1e\x5f\x42\xac\xb7\x7d\x7c\x6f\x9d\xe9\x5c\x4a\x55\x57\xa3\x06\x9a\x57\xa2\xfd\xf1\x72\x80\xc5\x87\x28\x26\x64\x3c\x5b\x31\x2c\x0b\x9c\xc3\x0e\xa7\xaf\x84\x66\x02\xee\x95\x91\xff\xce\x8f\xe9\x73\x8f\x49\x30\xa1\xbe\xe4\xb6\xf9\x0d\xc8\xdd\x31\x92\x5c\xdf\xa2\x60\x63\xf8\x5f\x00\x00\x00\xff\xff\x8a\xf6\x37\x23\x8e\x00\x00\x00")

func stdlibLoopsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibLoopsPisc,
		"stdlib/loops.pisc",
	)
}

func stdlibLoopsPisc() (*asset, error) {
	bytes, err := stdlibLoopsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/loops.pisc", size: 142, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibMathPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x95\x4f\x6f\xe3\x36\x10\xc5\xef\xfa\x14\xef\xb8\x71\x23\x24\xca\xd1\x71\x1c\x74\xbd\xdd\xb6\xc0\xa2\x3e\x24\xb7\x20\x80\x29\x69\x24\x33\x95\x48\xed\x90\x8a\xed\x7e\xfa\x82\xb4\x6c\x51\xf2\x1f\xec\xcd\x30\x7f\xef\x0d\xf9\x38\x43\x4d\xbf\x2d\x17\x98\xe7\xba\x4d\x2b\xc2\x17\x6c\x11\xc7\xc8\x71\x83\x85\x26\xce\x08\x02\xaa\xad\x53\x62\x58\x0d\x81\x0e\x7b\x8c\xbc\x4a\x64\xda\x1c\x24\x3b\xdc\xe0\x77\xce\x90\x69\x23\x15\xe1\x11\x3d\xb2\x0e\x99\xbf\x76\x0d\x71\xaa\x2b\x99\x41\x9c\xc1\x8d\x54\x63\xc7\x13\xe0\x9a\xdf\x10\xb6\xe2\xc4\xcd\x0a\x55\x92\xb2\x03\xe6\x9a\xa1\xe7\x7b\x3c\x4b\xd9\x86\xf4\xa2\x4d\x09\xac\x75\x40\x90\xac\x06\x04\xc9\x4a\xaa\x12\xba\xe8\xf3\x6b\x98\x32\x69\xa4\x56\x87\x70\x8f\xe2\x61\xa0\x8b\x61\x3a\x57\xb2\x1c\xe5\x48\x5c\x84\xe0\x1f\xcc\x9a\x51\xb4\x2a\xb3\xae\x68\x40\x65\xc3\x72\x75\x53\x51\x4d\xca\x0a\xde\x81\x2e\x88\xb6\xcd\xc0\x7a\xdb\x68\x45\xca\x4a\x31\xa6\x1e\x42\xec\x75\xa3\x61\xd7\x84\x46\x6f\x88\x5d\x16\xab\xed\x2a\x84\xeb\x24\xa4\x57\xae\x48\x82\x78\x75\x8b\x5a\xf3\x21\x2f\x42\xa1\x19\xa6\x16\x55\xd5\xe5\x66\x70\xf4\x28\x2a\xad\x39\xf4\xf8\xee\xff\xf8\xa5\xd4\x4b\x51\xd7\x22\xd4\xfe\xe9\xff\x38\x1e\xfd\x75\xf9\x6d\x79\x84\x3f\xee\x43\xf2\xe3\x1e\x5f\xc9\x18\xaa\x4e\x83\xfa\x18\x1c\xe9\xbb\x64\x63\xf1\xaf\x54\xf9\x45\x41\xa5\xcb\x50\xf1\x8f\xb0\x2d\x8b\x0a\x3f\x74\x29\x58\xda\x75\x8d\x47\xf4\x64\x32\xd8\xc6\x0f\x5d\x22\x15\x86\x90\xdc\x87\x76\xc9\xe0\xaa\x56\x5b\x24\xf8\xcd\x97\x59\xdd\x22\x6d\xed\x3e\x5c\x91\x65\x2d\x0b\x4b\xd8\x48\xbb\xee\xe2\xfd\x14\x55\x4b\x26\xb4\x7a\x38\x5b\xee\x21\x44\xd2\x10\xf9\x2a\x95\x6f\xa2\xae\x3d\xdc\x45\x6c\x8f\xf0\x68\xca\x5f\x5c\xeb\x9e\xc4\x71\x65\xd2\xcd\x79\xc1\xcf\xe1\x6c\xbe\xfc\x6c\x05\x77\xd3\x79\x02\x8f\x9e\x86\xd7\xee\x59\x38\xc7\x5d\xda\x85\xbd\xa8\xe1\x56\x0d\x06\xeb\x6f\x65\xa9\x24\xde\xc7\xea\xa3\xb8\x85\x30\xc1\x7b\xda\x09\x77\x83\x4b\x5d\x72\x4e\x1c\xff\x47\xac\x4f\x5a\x46\x17\x7e\x9a\x0c\x65\x5a\xe5\xfb\xae\x3a\x7a\x24\xa7\x1e\x5a\xd1\x2f\x5a\xdc\x4d\x22\xd7\xed\x53\xb8\x2e\x70\xeb\x76\xa3\x21\xb8\x44\x2d\xec\xfa\x28\x36\xd1\xe4\x2e\x9a\xa2\xf6\xd7\x28\x90\xba\x6a\xbe\x71\x88\x71\x83\x87\xbc\x6d\x30\xc7\x1b\x94\x6c\xf0\x8e\x37\xe4\xac\xdd\x0f\x59\xb8\x0f\x07\x6a\xb1\xed\x55\x95\xe0\xd2\x8b\xd0\xcb\x3a\xfc\xa0\xf7\xb2\xe8\x6e\x82\x17\x5d\x93\x6b\x3b\x99\xed\x77\xe3\xf7\x40\x9f\xa4\x9e\xf1\x05\xca\xb9\x3d\xbb\xea\xa8\x75\x0e\x97\xda\xb3\x2f\x97\xcb\x4f\x69\x34\xef\x99\xfa\x40\x85\x4c\x34\xc5\x53\xbf\x23\xb7\x1a\xf7\x6b\x77\x13\xcc\x20\x0d\x44\xc5\x24\xf2\x1d\x72\x2a\xa4\xa2\x7c\x5f\x7c\x3e\xd2\xcd\xa0\xdc\x97\x20\x9a\x62\x36\x5a\xf1\x87\x9b\xe1\x0d\x4f\x78\x47\x2e\x1b\x68\xf6\xdc\x7c\x64\xf0\xd4\x39\x44\x53\x88\xd4\xf8\xc5\x38\x86\xc0\x0d\x9c\xc1\xbd\xb7\x88\x13\x4c\xf0\x8e\xcd\x9a\x5c\xcb\xfd\x1f\x00\x00\xff\xff\x5a\xd8\x7d\x5b\xc0\x07\x00\x00")

func stdlibMathPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibMathPisc,
		"stdlib/math.pisc",
	)
}

func stdlibMathPisc() (*asset, error) {
	bytes, err := stdlibMathPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/math.pisc", size: 1984, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibRandomPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xca\xc1\x09\x80\x30\x0c\x40\xd1\x55\xfe\x51\x0f\x59\x40\xa7\x09\x49\xc0\x42\x9b\x16\xad\xba\xbe\x78\x7f\x1b\x76\xf4\x62\xc1\xc2\x13\x86\x08\x51\xa3\xb1\xe2\xf7\xa0\x46\x72\x6a\xba\x94\x9c\x5c\xaf\x0e\x5a\xf7\xdf\x89\x4e\xf6\x2f\x00\x00\xff\xff\x3c\x4d\xec\x7d\x3b\x00\x00\x00")

func stdlibRandomPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibRandomPisc,
		"stdlib/random.pisc",
	)
}

func stdlibRandomPisc() (*asset, error) {
	bytes, err := stdlibRandomPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/random.pisc", size: 59, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibShellPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\xe2\x81\xf1\x21\x7b\xa0\xe1\x5c\x19\xaf\x81\xdd\x36\x69\x73\x49\x0b\xa4\x37\x47\x28\x18\x71\x1c\x11\xa1\x49\x56\xa4\x6c\xf4\xdf\x17\x43\xd9\xb1\xdd\xf6\x20\x80\x7c\xf3\xe6\xe3\xcd\x0c\x25\x34\x7c\xc6\x35\x94\xc2\x3f\xf0\x2e\x17\xb5\x71\x9e\x32\xd6\x48\x83\x0b\x05\x2d\x76\xd4\x29\x32\x5d\x8f\x5b\x21\x34\x72\x4f\xde\xab\x6d\xb4\xa3\x27\x5c\xe3\xc7\x18\x4b\xf5\x15\xcd\x72\x47\x5d\x89\xc3\x0a\x3a\x99\xd2\xf7\x2e\x17\xd1\xac\x31\x3b\x5e\x90\xf6\xb6\xc6\x32\x29\x51\xb0\x27\x16\x5a\xe8\x34\xe6\xde\x5e\xd2\x99\x9a\x62\x7a\x31\xdd\x1b\xf2\xde\xa4\xdf\x1c\x62\xb2\x42\x34\x4b\xeb\xba\xb2\x82\x1d\x13\x74\xee\xc1\x11\xce\x34\xb4\x58\x2e\x95\xcf\x8c\x8a\xa6\xb9\x10\x27\x9a\xa6\x61\x2f\xb5\xda\x46\x4b\x90\x56\x22\x97\x41\x75\x31\x14\xe3\xc2\xb9\xfc\x35\xec\x10\x13\x5a\xb8\x0d\x7b\x9d\xf5\x43\x34\x87\x04\xb6\x26\xae\x1a\x20\xe7\x73\x89\xce\x4e\xb9\xc7\x74\x32\x1c\xb1\xae\xea\xe4\xfa\xdf\x21\xd6\xc8\x20\x17\xc7\x22\x57\xb9\x0c\x2e\xbc\x1e\xf8\xa6\xf6\x51\x3e\x87\x63\x89\x63\xad\x6b\xb9\x54\xfb\xce\x57\xd3\xd7\xff\xbe\x7d\x96\xa0\xb0\x53\xaf\x74\x30\x31\xc4\xb6\x0b\x90\xc2\x8e\xb1\x35\xd4\xec\xef\xaa\xdb\x89\xe7\xb2\xb2\x6e\xa8\xa1\x9f\x78\xdc\x58\xcc\x6f\xe4\x64\xda\x46\x1b\xcc\x96\x44\xdd\x05\xb3\x7f\x53\x2e\xb8\x82\x6b\xc4\x54\x5c\x0c\x99\x57\x61\x3e\xe7\x6d\xb8\xc2\x87\x81\x4c\x61\x19\xa5\x27\xe4\x62\x0a\xe1\xc5\x64\xd7\x65\x6c\xe2\x00\x13\xaa\x7b\x2e\x3f\x3d\x71\xa6\x16\xfa\xff\xbb\x4f\x0f\x8f\x87\xf3\xdd\xe3\x47\xd1\xc8\xe7\x22\xa1\x1f\xee\x9f\xc0\xe7\x20\xa1\xbf\xdc\x3f\x89\x46\x4a\xe8\x85\x68\x0a\x74\x20\xb2\x59\xe5\xe4\x5d\x39\xdf\x3f\xef\xc2\x31\xe6\x40\x99\x8a\xda\xc4\x41\x1d\x41\xed\x1c\x66\xfc\x31\x00\x4f\x01\xab\x7f\xb1\x86\x94\x75\xd6\x13\xca\xf6\xba\xaa\x65\x9a\x7b\x3b\xc5\x54\xd3\x28\x66\x67\x69\xd9\x65\x81\x19\xd7\xc8\x9d\x9c\xb0\x4a\x46\x8b\x7d\x4f\x81\x7d\x29\xe4\x71\xa0\x63\x9d\x3c\x94\xd3\xfd\x90\x71\x71\xca\xa7\x6f\xfe\xe0\x30\xfa\xbe\xed\x55\x44\xed\xd5\x34\x92\xf7\xb6\x71\xd3\x26\x88\xbb\xc7\xcf\xf5\x0a\x63\x26\x94\xde\x65\x94\x88\x4c\x65\x9a\x45\x9d\xa9\xc9\xf5\xb2\x77\xa5\xcf\x5d\x4c\x24\x34\x93\xd5\x64\x3c\xfc\x0f\x2e\x1e\xbb\xfc\xce\x5c\xc9\x61\x94\x8f\x9d\xf1\xb8\xfd\x15\x00\x00\xff\xff\x6a\x50\xdf\xe6\x3d\x04\x00\x00")

func stdlibShellPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibShellPisc,
		"stdlib/shell.pisc",
	)
}

func stdlibShellPisc() (*asset, error) {
	bytes, err := stdlibShellPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/shell.pisc", size: 1085, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStd_libPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x3c\x6c\x0f\xb5\x0c\x7f\x6c\xb2\x37\x1b\xa8\x0f\x9b\xcb\x02\x2d\xd2\x22\x01\x7a\x70\x8d\x9a\x96\x46\x11\x61\x9a\xd4\x92\x94\x1d\xff\xfb\x62\x86\xb2\xa4\x74\xb3\x40\x0e\xbb\xb1\xc9\x79\xef\xcd\x0c\xdf\x8c\x97\xd3\x2c\x7b\xae\x75\x80\x0e\x88\x35\xe1\xc5\xbb\x8b\xb6\x2f\x08\x51\xd9\x52\xf9\x12\x46\x1f\xbc\xf2\x57\xb8\x0a\x7f\x7e\x7b\xfa\xba\xc8\xb2\xe9\x32\xcb\x56\x68\xbc\xb6\xd1\x58\x4c\xa0\x30\x9f\x03\x39\x7e\x0b\xd1\x33\xb4\xf1\xfa\xfc\x6f\xd3\xc6\x80\x4f\xff\xd8\x4f\xa3\xaf\xeb\x1e\x77\x43\xbd\x07\x5a\x67\x59\xb6\x9c\xe2\xb9\x26\x54\xce\x98\x94\x4e\xa1\x8c\x09\x50\x9e\x24\xc9\xa2\xf5\x9e\x6c\xe4\x24\x8b\xe3\x3c\xd4\x6d\x55\x99\x8e\xe4\xa4\xa3\x3e\x53\x80\x24\xf9\xf0\xf8\x15\x8d\x2e\x8e\xf3\xb2\x6d\x30\xc1\x62\x01\xcb\xaa\x8b\x05\x74\xa4\x13\x72\x0c\xb7\x65\xdb\x18\x5d\xa8\x48\xa9\x0d\x36\xd6\x29\xe6\xa0\x8a\x23\x9c\x95\x43\x91\x83\x94\x31\x30\x7b\xf7\x96\x7a\xff\x3f\x6e\xbe\xf7\x74\x72\xe7\x8e\x59\x6e\x2b\xef\x4e\xbd\x4e\xa2\x0d\xc6\xc5\x19\x1a\xa3\x0a\xae\x44\x47\xa8\xe8\x9a\x9f\xcb\x92\x19\xa9\x8a\xec\x20\x49\x06\x25\x19\x1a\xd7\x92\x38\xc8\x46\x7f\x95\x92\x66\x29\xa7\x4e\xaa\x4f\xa7\x0f\xd3\x9e\xcc\x55\x34\x93\xa8\x21\x7e\x69\x43\x56\x1d\x0c\xb1\xa4\x21\xfb\x12\x6b\xd6\xfc\x9d\x6c\x6f\x1e\x87\x92\x2a\x6d\xa9\xc4\xc5\xf9\x12\xb1\x56\x91\x4f\xc8\x87\x1b\xa0\xa8\xa9\x38\xb2\x6c\x74\x37\x48\xbc\x36\x84\x70\x0d\xdc\x98\x41\x51\x9f\x1a\xe7\xd9\x28\x95\x36\xd4\xa8\x58\x77\x2f\x97\x63\x9f\xae\xf6\xbd\x0d\xa2\x3a\x52\x80\x92\x48\x70\xe8\x0c\xca\x96\x50\x31\xd2\xa9\x89\x81\xa5\xe8\x95\x8a\x36\x26\xf7\x48\x98\x8a\x29\x3b\x4f\x46\xb1\x63\x06\xf0\x42\x72\xf8\x05\xcf\x8f\x0f\x8f\x2b\xfc\xe1\xce\x74\x6b\x4d\x3c\x91\x65\x3a\xc6\x75\xe9\xc5\x9a\x02\x75\xb5\x68\x0f\x4f\xa1\xa1\x42\xf8\x4e\xae\x6c\x0d\x05\xf1\xf2\x53\x7a\x61\xf1\x29\xf7\x62\xba\x4c\x35\x26\x5b\xca\x24\x28\x28\xe4\x78\x78\xeb\x42\x76\x80\xab\x46\x2f\xb3\xce\x56\x3f\x82\x3e\x0f\x2e\xbe\x79\xe4\xfe\x23\xcc\xf1\xe2\x40\x86\x52\x51\x3f\xc8\xf4\x14\x87\x44\x72\x90\x7f\x39\xee\xb1\xc5\xdd\xa0\xb8\x43\xd4\x27\x0a\xbd\x72\xb8\xa8\x11\xec\x20\xda\x4f\x17\xd5\x7c\x54\xf6\x3d\xfc\xdd\x68\x94\x64\x87\x74\x43\xd7\xad\x90\xcf\x83\xed\x99\xc1\xea\x37\x04\x03\xbc\xbb\xbf\xef\xd1\x87\x84\xe7\x8a\xe4\x6c\xa8\x65\x85\x2f\xa3\xa8\x22\xc5\x7d\x79\x2f\xce\x9d\xc9\x63\x82\x57\x5c\x39\x88\xff\xbc\x8e\x24\x47\x4f\x52\x76\x69\x7d\x6f\x5d\x4c\x1d\xcd\xf1\xdc\x19\x97\xcf\x54\xd4\xce\x26\xdf\xe2\xac\x4c\x4b\xc9\xc4\xb2\x12\xb9\x45\x72\xf6\xce\x3a\x52\x55\x24\x2f\xfb\x51\xa6\xaa\xa6\x11\x9b\x34\xeb\x48\x94\x36\x94\xc2\xab\xdc\xad\xb0\xed\xbe\xcd\x65\xa4\x0e\xd8\xa1\xfb\xc0\xb9\x4b\x45\x5b\x61\xc4\x4e\xd2\xe6\x3a\x0f\xba\xcf\xfe\x4e\xfe\xbf\x4f\x18\x1e\xc8\x6d\xd2\x48\xc1\x82\x5b\x8b\xed\xbf\x55\x32\x35\xf2\xd4\xbd\xe7\x75\x85\x09\x36\x88\xbe\xa5\xbf\xb8\x15\x95\x32\x21\x7d\x9a\xcf\x79\x7e\x5a\x13\x91\x73\xd4\x46\xb6\xca\x2c\x11\x72\xb8\xc8\xce\xe0\x62\x4d\xfe\xa2\x03\xa5\x9b\x1e\xbf\xc0\x43\xb7\x7b\x54\xc0\x7e\x23\xb7\x7b\xc9\x7d\x24\x99\xc2\x3b\x29\xe4\xd8\xdc\xf2\x5d\x4e\xf1\x77\x4d\x76\x94\x70\xe5\x3c\x2e\x7c\x74\x75\x2d\x4a\x67\x7f\x8d\xb0\xc4\xec\xc6\xb0\x6d\x75\x25\x25\xa5\x90\x9e\xbe\x27\xde\x62\x37\x90\x4b\x37\x56\xa0\xef\x83\xed\x36\xc8\x13\x7e\x31\x18\xf9\x66\x70\x4e\xd9\xca\x22\x19\x66\x38\x97\xb9\x4f\x3f\x9e\xf2\xac\x85\x21\xe5\xe7\xc9\x03\x93\x84\xdf\x76\x3f\x88\xbc\xf5\xae\x1b\x58\x17\xb1\x1b\x3c\x7b\xa9\x79\xc3\xad\xff\x0b\x00\x00\xff\xff\x9f\xf0\x1a\x72\xf1\x07\x00\x00")

func stdlibStd_libPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStd_libPisc,
		"stdlib/std_lib.pisc",
	)
}

func stdlibStd_libPisc() (*asset, error) {
	bytes, err := stdlibStd_libPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/std_lib.pisc", size: 2033, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibStringsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x3d\x6f\xdb\x30\x10\x9d\xa3\x5f\xf1\x1a\x64\x88\x92\x32\xe9\xec\x00\x36\x82\xb4\x43\x26\x0f\xee\x66\x18\x10\x4d\x9d\x23\xa6\x12\x29\x93\x27\xbb\xfe\xf7\xc5\x51\x1f\x56\x3b\x75\xd3\x1d\xdf\xbd\xf7\xee\x43\xcf\x0f\xc8\x36\x1c\xac\xfb\x88\x4f\xad\x8d\x26\x1b\x22\x54\xda\x95\xb5\x7c\x9c\x7d\x28\x23\xb4\x2b\x11\x3b\x53\x65\x0f\xcf\x59\xb6\xf8\xbe\x7e\x43\xe4\xa0\x8c\x77\x46\x33\xee\xa1\xb1\x87\x52\x30\xc8\xf1\x96\x72\xe4\x34\x13\xb8\x22\xb0\x6f\xc1\x67\x2f\x78\x51\x81\x77\x29\x1d\x59\x9b\x5f\x78\xe9\xb9\x96\xfd\x63\x22\x52\x4a\xa0\x3d\xd1\x89\x02\x43\xbb\xcb\x80\x3e\xe9\xba\x23\x58\xc7\x1e\x7a\xe0\x1b\x19\x22\x87\xa5\x75\x62\x45\x8a\x95\x12\xd4\x17\xe4\x78\x65\xa6\xa6\x65\xb0\x87\x19\xf9\xc6\x52\xa1\x71\x02\xa4\x0f\x0a\x33\x22\xf5\xe9\xad\xc3\x3d\x4e\x64\x10\xa9\xbd\x3a\xfa\xd9\x05\x07\x2d\x79\xf6\xe1\x1f\x1f\xfb\x0b\x8a\xa1\x8d\x22\x4d\xab\x8b\x92\x96\x7a\xeb\xb0\x27\x3e\x13\x39\xe8\xba\x4e\xdd\x53\x4d\x0d\x39\x8e\xf0\x07\x14\x27\x32\xc5\x5c\x3e\xb6\xb5\x1d\x3b\x19\xf4\xc5\x4a\x8e\x4d\x7a\x98\x24\x07\x03\x83\x9d\x5e\xaf\x88\xd4\x16\xd0\x11\x1a\x25\xd9\xda\x36\xc4\x7f\xf7\x26\xd3\xb8\xac\xae\x73\x5a\x21\xc7\x7b\x04\x57\x36\x8e\xbc\x03\x64\x5e\x74\x5c\x5d\x97\x2c\x15\xaf\xe1\x3f\x96\x4b\xc7\x4e\xd7\x73\x9e\x65\xe8\x1c\xa9\x40\xba\xa4\x70\x75\xe0\xf7\x9f\xb2\xed\x40\x72\x31\x1a\x73\xcc\x21\xf8\x66\xea\xf7\x2b\x22\xf5\xaa\xc5\xf6\x7d\xbd\x2b\x50\x7a\x13\x71\xf0\x01\x8d\x0f\x72\x16\x07\x3f\x6a\x91\x36\x95\x32\x95\x1e\x55\x8e\x9d\x67\x91\x7a\x7a\x42\x8e\x1f\xbf\xc9\x74\x4c\x28\x24\x5b\x24\x02\xc1\x43\xf0\xda\x30\x85\x7b\xb1\x90\xcb\xda\x8a\xc8\x41\x56\x93\x2d\x86\x73\xef\xa6\x13\x4b\xec\x4a\xc1\x75\xcd\xda\x98\x2e\x44\xe4\x58\x58\xe7\x28\x64\x37\xdf\xb0\xb0\xd9\xcd\x16\x77\x29\x9e\x26\xb8\xc5\xe3\xa3\xc5\x0e\xe7\x8a\x1c\x76\x33\x93\xd9\xcd\x9d\xcd\x46\x15\x99\xb4\x8c\x44\x6e\x38\x6e\x24\xce\xc1\x97\x96\xfc\x01\xb7\xfd\xbf\x79\x3b\x31\x4e\xce\x5c\xbf\x21\xf9\x4c\xe3\x52\x69\x53\x92\xcc\x27\xb0\xf3\x8c\x17\xfc\x09\x00\x00\xff\xff\x74\xb0\x4a\xc5\xf1\x03\x00\x00")

func stdlibStringsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibStringsPisc,
		"stdlib/strings.pisc",
	)
}

func stdlibStringsPisc() (*asset, error) {
	bytes, err := stdlibStringsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/strings.pisc", size: 1009, mode: os.FileMode(438), modTime: time.Unix(1499006298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibSymbolsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\x0e\x82\x30\x10\xc6\xf1\xbd\x4f\xf1\x1f\x81\x04\xd9\xc5\x48\x0c\xee\x0e\x3e\xc1\xa1\x97\x48\x82\x45\x68\x1b\xe3\xdb\x9b\x4a\x43\x18\x1c\xdb\xfb\x7e\xf7\x5d\x55\x98\xeb\xe7\xd9\x8d\x83\xdb\xbd\x7a\x77\x33\x45\x65\xf6\xe7\x4b\xcb\xc1\xfd\x7e\x8f\x64\x94\x25\x39\xed\xac\xe2\x15\x21\xd8\x7e\x0a\xca\x32\xa6\x5e\xd2\xf1\x55\x5a\x9d\xc8\x10\x3a\x22\x69\xc8\x39\xcd\x8a\x7f\xa8\x53\xfc\x7b\x4c\xc4\x61\x47\x8f\x4e\x41\x06\xa8\xcd\xc6\xaf\x7c\xa3\x05\xb1\x77\xba\x94\x4f\x1b\x9a\x58\xfb\xdf\xac\x87\xc4\x92\xda\x7c\x03\x00\x00\xff\xff\x27\x8e\xbf\xf1\xde\x00\x00\x00")

func stdlibSymbolsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibSymbolsPisc,
		"stdlib/symbols.pisc",
	)
}

func stdlibSymbolsPisc() (*asset, error) {
	bytes, err := stdlibSymbolsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/symbols.pisc", size: 222, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibVectorsPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\xe2\xa1\xf0\xa1\xee\xef\xe7\x66\x71\x6f\xee\x50\x60\x58\x87\x61\xa7\x0d\x1d\xd0\x8b\x11\xa0\x6a\xc2\xa0\xc2\x1c\xd9\x93\x65\x27\xfd\xf6\x03\xe9\xff\x59\xd2\xf5\x94\x88\xe4\x7b\x94\xc8\x47\x7a\x71\x85\x47\x5a\xfb\xc2\x55\xd0\x76\x03\xff\x42\xc6\xa1\xf6\x26\x37\xde\x50\x85\xab\x85\x52\xe9\xfd\xf7\xcf\x68\x68\x1d\x57\xe4\x63\xed\x71\xc9\x07\x34\x3a\x87\xd9\x1c\x10\xc7\xa0\x9c\x76\x88\xf0\x93\x3c\x7b\x7c\xe1\xa0\xbd\xf8\x7c\xc1\x61\x35\xe1\x76\x24\x19\x08\xe6\xe0\xaf\xe4\xe5\x2f\x59\x2f\x68\xbb\xa1\x43\x0f\xfb\xd8\xb2\xde\xe1\x92\x01\x5d\x8a\x08\xdf\xac\xf1\xd0\xb0\xb4\xef\x6d\x93\x34\xa4\xd7\x2f\x5d\xa2\xdf\x75\xe1\x19\x78\x7d\x8d\x08\x0f\xb5\xc5\x13\x5b\x9e\xb0\x2d\x1c\x24\xac\xcf\x6b\x2c\xbf\x7f\x24\x53\x67\xd2\x23\xc2\x45\x6f\xbc\x00\x1d\x3c\x39\x1b\xaf\x75\x9e\xbf\xe7\x02\x17\xbd\xf3\x2c\x52\x97\x25\xd9\x4d\x87\x95\xf2\xc4\x31\xf8\x99\xdc\xa8\x9e\xa1\x0d\x3a\xcb\x51\x3a\x3a\x41\x72\xc4\xd1\x05\x9d\x27\x29\xca\x67\xbd\xfe\xd5\x91\x74\x6f\x17\xae\x81\xa1\x8d\x78\x8b\x61\xeb\x0a\xeb\x4f\x50\x8c\x0c\x12\x71\x4c\xa1\xd2\x1f\x0f\x5f\x90\xad\xe6\x62\x89\x50\x79\x77\x67\xac\xef\xa5\xc4\x81\x48\xba\x8e\x5d\x42\xe3\x79\xec\xd1\xd0\xb7\x04\x19\xaa\xbd\x2e\x67\x95\x59\xc1\x9b\x1d\x55\xc2\xc0\xd7\xe5\x96\x24\x9c\x6d\x89\x26\x19\x5a\xd6\xdc\x20\xc2\xa7\xb2\xcc\x79\x18\xb4\x98\xb5\x37\x85\x65\x69\x4f\xb5\xb3\x37\x15\xa1\xd4\xc6\xb1\x88\x9a\xa5\xcc\x52\x93\xfc\xcf\x61\x8e\xaa\x3a\x17\x71\x35\x37\x5c\x9b\xb7\x32\xa9\x20\x95\x73\xda\x24\x48\x9b\xa5\x0a\x3e\x20\x35\xc3\x43\x54\x10\x36\x09\x72\xb2\x08\x9b\xa5\xfc\xee\x8c\x45\xa6\x82\x40\x0c\xa1\xe9\xab\xd2\x5a\x92\x89\x45\x58\x47\xdd\xa8\x20\xc8\xb0\xc4\x7f\x58\x21\x4c\x8d\x0a\x8e\x8b\x51\x95\xb9\x9e\x34\xcd\x78\xda\x55\x88\x70\x5f\xef\x4a\x19\x91\x75\x61\x3d\x59\x5f\xa1\xd8\x4e\x47\xa6\xb0\xbe\x90\x73\xe5\x59\x37\xfc\xd8\x53\x4c\xd7\x32\x08\x19\x56\xe3\xa0\xdc\x4e\xd6\x8c\xa3\x86\x5c\x45\x23\xa8\x33\xb4\x5d\x7d\x68\x0f\xdc\x8d\x71\xea\xdf\x81\x53\xc1\xa6\x2e\x91\xf2\x81\x2b\x97\xb2\x06\xb8\xba\x4a\x2a\x11\x4b\x25\xa4\x32\x21\x7b\x12\x2c\x90\x71\x1d\x43\x06\x8c\x75\x4c\x0f\x83\x8d\xc3\x7a\xeb\xeb\x60\x7d\xed\x83\xbb\x65\xc9\x09\x07\xe7\x61\x44\xcd\xdd\x47\x57\x38\xd9\x1c\x25\x24\x4a\x14\xcf\x0c\x5b\x93\x7b\x72\x47\x2b\xa6\x35\xd2\xe6\xb1\x7d\xf3\x30\x02\xa9\xa5\x3d\xa3\x45\x5e\x0a\x19\xb8\x18\x02\xca\x10\xb6\xbe\x71\x44\xba\x05\xd4\x61\xb0\xe2\x70\x57\x94\x58\xc1\x6c\x27\x4d\x53\x1d\x50\x71\xf7\x16\x57\x18\x1a\xc8\xc1\x47\x63\xdf\x51\x45\xb8\x67\x22\x96\x48\x1b\x30\xd7\xcf\x2d\x7f\x6f\xd2\x7f\x72\xcc\x36\x8b\xdc\xec\xc4\x05\xe6\x9b\xeb\xef\xfc\xe2\x7f\x33\xfd\x19\x86\xe9\x66\x6c\x93\xff\x09\x00\x00\xff\xff\x67\xa7\x25\x06\x44\x07\x00\x00")

func stdlibVectorsPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibVectorsPisc,
		"stdlib/vectors.pisc",
	)
}

func stdlibVectorsPisc() (*asset, error) {
	bytes, err := stdlibVectorsPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/vectors.pisc", size: 1860, mode: os.FileMode(438), modTime: time.Unix(1499004895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stdlibWithPisc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xcf\xf1\x53\x8c\x4a\x0f\x25\xc2\xcd\x3d\x45\x08\x09\x71\xe0\x82\x10\x57\x84\xd0\xc6\x31\xb1\x8b\x1b\x87\x78\x5b\xbf\x3e\x5a\x97\x22\xfe\x8e\xab\xf1\x7c\x33\xe3\xa6\x46\xf6\xec\xa8\x0b\x16\xb1\xdb\x5a\xc3\x09\x75\xa3\x54\xfb\xf0\x78\x8b\x6b\xac\x90\xe3\xdc\xdf\xd3\xce\x42\x6b\xac\xd7\x38\xc7\xe2\x45\x0c\x0b\x0c\x96\x75\x88\x86\x02\x52\xa6\x09\xbd\x37\xac\x07\xcb\x30\x14\x02\x36\x4a\xb5\x05\x8c\x95\x60\xf1\xbe\x8f\xfc\x45\x68\xcb\xd5\xc6\x6e\xab\xaa\x4b\xf1\x5d\xa1\xcd\x07\x9a\x55\xb5\x2c\xca\x29\x41\x0e\xed\x28\xe9\x03\xcd\x78\xc2\x3f\xa2\x74\x10\xb1\xd8\xf1\x8c\xec\xec\xa8\xaa\xa6\xc6\xdd\x2b\xd8\xf9\x74\xcc\x75\x94\x50\x5c\x48\x96\x2f\x40\xd3\x64\xc7\x1e\x9e\xc1\x11\x84\xc4\x64\xde\x64\xf3\xaf\xf4\xe5\xa9\xb7\x4e\xc7\x14\x55\x9d\xe1\x46\xc6\x95\x67\xfb\xe4\xc7\xe1\x13\xbb\xb3\x4c\xdf\xfa\xcb\x0f\xfc\xa1\x95\x86\x3f\x70\x1b\xf5\x11\x00\x00\xff\xff\x81\x99\x2d\xf3\x7d\x01\x00\x00")

func stdlibWithPiscBytes() ([]byte, error) {
	return bindataRead(
		_stdlibWithPisc,
		"stdlib/with.pisc",
	)
}

func stdlibWithPisc() (*asset, error) {
	bytes, err := stdlibWithPiscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stdlib/with.pisc", size: 381, mode: os.FileMode(438), modTime: time.Unix(1493398664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stdlib/bools.pisc": stdlibBoolsPisc,
	"stdlib/debug.pisc": stdlibDebugPisc,
	"stdlib/dicts.pisc": stdlibDictsPisc,
	"stdlib/io.pisc": stdlibIoPisc,
	"stdlib/locals.pisc": stdlibLocalsPisc,
	"stdlib/loops.pisc": stdlibLoopsPisc,
	"stdlib/math.pisc": stdlibMathPisc,
	"stdlib/random.pisc": stdlibRandomPisc,
	"stdlib/shell.pisc": stdlibShellPisc,
	"stdlib/std_lib.pisc": stdlibStd_libPisc,
	"stdlib/strings.pisc": stdlibStringsPisc,
	"stdlib/symbols.pisc": stdlibSymbolsPisc,
	"stdlib/vectors.pisc": stdlibVectorsPisc,
	"stdlib/with.pisc": stdlibWithPisc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"stdlib": &bintree{nil, map[string]*bintree{
		"bools.pisc": &bintree{stdlibBoolsPisc, map[string]*bintree{}},
		"debug.pisc": &bintree{stdlibDebugPisc, map[string]*bintree{}},
		"dicts.pisc": &bintree{stdlibDictsPisc, map[string]*bintree{}},
		"io.pisc": &bintree{stdlibIoPisc, map[string]*bintree{}},
		"locals.pisc": &bintree{stdlibLocalsPisc, map[string]*bintree{}},
		"loops.pisc": &bintree{stdlibLoopsPisc, map[string]*bintree{}},
		"math.pisc": &bintree{stdlibMathPisc, map[string]*bintree{}},
		"random.pisc": &bintree{stdlibRandomPisc, map[string]*bintree{}},
		"shell.pisc": &bintree{stdlibShellPisc, map[string]*bintree{}},
		"std_lib.pisc": &bintree{stdlibStd_libPisc, map[string]*bintree{}},
		"strings.pisc": &bintree{stdlibStringsPisc, map[string]*bintree{}},
		"symbols.pisc": &bintree{stdlibSymbolsPisc, map[string]*bintree{}},
		"vectors.pisc": &bintree{stdlibVectorsPisc, map[string]*bintree{}},
		"with.pisc": &bintree{stdlibWithPisc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

