/*

This is the growing standard library of PISC.

*/

: print ( a -- ) >string priv_puts ;
:DOC t ( -- t )  t and f respectively push true and false onto the stack  ;
:DOC f ( -- f )  t and f respectively push true and false onto the stack  ;

/* stack-empty? checks if there are any entries on the stack
: stack-empty? ( .. -- empty? ) primitive ;
*/

/* The following calls are the current stack-shuffling primitives */

:DOC pick-dup ( .. n -- .. item )  pick-dup duplicates the nth item back on the stack  ;

:DOC pick-drop ( .. n -- ..` item )  pick-drop removes the item from the nth stack slot, placing it atop the stack  ;

:DOC pick-del ( .. n --  ..`  )  pick-del deletes the nth stack entry back, removing it from the stack entirely  ;


:DOC len ( lenable -- length )  Len is the go defined word that defers length checking to the go type system  ;


:DOC import ( filepath -- .. ) `import` current takes a file path, and attempts to execute the file at that relative file path. ;
 
"Hey" print

"loops.pisc" import
"bools.pisc" import 
"strings.pisc" import
"locals.pisc" import
"io.pisc" import
"dicts.pisc" import
"vectors.pisc" import
"symbols.pisc" import
"math.pisc" import



/* Local Prefixes */
/* # is the import prefix */
:PRE : ( val name --  ) set-local ;
:PRE $ ( name -- val ) get-local ;

/* Stack shufflers */
:DOC dup ( a -- a a ) Duplicates the top of the stack ;
: dup ( a -- a a ) 0 pick-dup ;

:DOC 2dup ( a -- a a ) Duplicates the top two elements of the stack ;
: 2dup ( a b -- a b a b ) 2 [ 1 pick-dup ] times ;

:DOC swap ( a b -- b a ) Swaps the top two elements of the stack ;
: swap ( a b -- b a ) 1 pick-drop ;

: drop ( a -- ) 0 pick-del ;
: nip ( a b -- b ) 1 pick-del ;
: 2drop ( a b -- ) 2 [ drop ] times ;
: 3drop ( a b c -- ) 3 [ drop ] times ;
: over ( x y -- x y x ) 1 pick-dup ;
/* Needs to be implemented as a builtin to keep it local clean */
:DOC dip ( a quot -- a ) Takes a quotation and a value, and puts the value back on the stack after calling the quotation ; 

: keep ( ..a x quot: [ ..a x --- ..b ] -- ..b x ) over [ call ] dip ;
: bi ( a quot1 quot2 -- ... ) [ keep ] dip call ;

/*
: change ( quot name -- ... ) drop-locals :name :quot  ;

: change ( quot varName -- .. ) drop-locals :name :quot $name get-local $quot call $name set-local get-locals ;
*/

/* Copied from factor */
: change ( quot varName -- .. ) swap [ [ get-local ] keep ] dip dip set-local ;
:PRE $: ( quot varName -- ) change ;

: str-neq ( str-a str-b -- eq? ) str-eq not ;

/* Symbol manipulation */
: symb-eq ( symb symb  -- eq? ) symb-neq not ;

/* Arrays */

/* Take all the elements placed on the stack by quot and put in an array */
/* TODO: somehow make this local-clean */
: quot>vector ( quot -- vec )
	<vector> :vec
	<symbol> dup :mark /* Mark the stack */
	swap call /* Fill the stack with info from the quotation */
	[ dup $mark symb-neq ] [ $vec swap vec-prepend :vec ] while 
	drop /* the mark */ $vec ;


/* If statement */
: if ( ? true false -- res ) ? call ;
/* When statement for when you don't need all of if */
: when ( ? true -- res ) [ ] ? call ;


/* Some basic math */
: even? ( n -- ? ) 2 mod zero? ;
: divisor? ( n m -- ? ) mod zero? ;

: = ( a b -- ? ) - zero? ;

/* < is already defined */
: >= ( a b -- ? ) < not ;
: <= ( a b -- ? ) 2dup < [ = ] dip or ;
: > ( a b -- ? ) <= not ;

: abs ( a -- a ) dup 0 < [ -1 * ] when ; 

/* : eq ( a b -- ? ) */
: . ( a -- ) drop ;


: inspect ( a -- a ) dup print ;

