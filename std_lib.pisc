/*

This is the growing standard library of PISC.

*/

/* Local Prefixes */
/* # is the import prefix */
:PRE : ( val name --  ) set-local ;
:PRE $ ( name -- val ) get-local ;

/* Stack shufflers */
: dup ( a -- a a ) 0 pick-dup ;
: 2dup ( a b -- a b a b ) 2 [ 1 pick-dup ] times ;
: swap ( a b -- b a ) 1 pick-drop ;
: drop ( a -- ) 0 pick-del ;
: nip ( a b -- b ) 1 pick-del ;
: 2drop ( a b -- ) 2 [ drop ] times ;
: 3drop ( a b c -- ) 3 [ drop ] times ;
: over ( x y -- x y x ) 1 pick-dup ;
/* Uses locals for fun and profit */
: dip ( a quot -- a ) swap :a call $a ;
: keep ( ..a x quot: ( ..a x -- ..b ) -- ..b x ) over [ call ] dip ;
: bi ( a quot1 quot2 -- ... ) [ keep ] dip call ;

: str-neq ( str-a str-b -- eq? ) str-eq not ;



:PRE [] ( vec idx -- ) string>int vec-at ;

  


/* Symbol manipulation */
: is-symbol ( symb symb  -- eq? ) symb-neq not ;

/* Arrays */

/* Take all the elements placed on the stack by quot and put in an array */
: quot>vector ( quot -- vec )
	<vector> :vec
	<symbol> dup :mark /* Mark the stack */
	swap call /* Fill the stack with info from the quotation */
	[ dup $mark symb-neq ] [ $vec swap vec-prepend :vec ] while 
	drop /* the mark */ $vec ;


/* If statement */
: if ( ? true false -- res ) ? call ;
/* When statement for when you don't need all of if */
: when ( ? true -- res ) [ ] ? call ;

/* Some basic math */
: even? ( n -- ? ) 2 mod zero? ;
: divisor? ( n m -- ? ) mod zero? ;

: = ( a b -- ? ) - zero? ;

/* < is already defined */
: >= ( a b -- ? ) < not ;
: <= ( a b -- ? ) 2dup < [ = ] dip or ;
: > ( a b -- ? ) <= not ;

/* : eq ( a b -- ? ) */
: . ( a -- ) drop ;

: print ( a -- ) >string priv_puts ;

: inspect ( a -- a ) dup print ;

